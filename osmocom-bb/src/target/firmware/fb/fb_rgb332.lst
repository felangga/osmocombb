   1              		.file	"fb_rgb332.c"
   9              	.Ltext0:
  10              		.section	.text.fb_limit_fb_range,"ax",%progbits
  11              		.align	2
  13              	fb_limit_fb_range:
  14              	.LFB13:
  15              		.file 1 "include/fb/framebuffer.h"
   1:include/fb/framebuffer.h **** #ifndef _FB_FRAMEBUFFER_H
   2:include/fb/framebuffer.h **** #define _FB_FRAMEBUFFER_H
   3:include/fb/framebuffer.h **** 
   4:include/fb/framebuffer.h **** #include <fb/font.h>
   5:include/fb/framebuffer.h **** #include <stdint.h>
   6:include/fb/framebuffer.h **** 
   7:include/fb/framebuffer.h **** /* color is encoded as <special><red><green><blue> */
   8:include/fb/framebuffer.h **** /* if a color is "special", then the RGB components most likely
   9:include/fb/framebuffer.h ****    don't make sense. Use "special" colours when you have to
  10:include/fb/framebuffer.h ****    mask out bits with transparency or you have to encode
  11:include/fb/framebuffer.h ****    colours in a fixed color palette ... */
  12:include/fb/framebuffer.h **** 
  13:include/fb/framebuffer.h **** #define FB_COLOR_WHITE		0x00ffffffU
  14:include/fb/framebuffer.h **** #define FB_COLOR_BLACK		0x00000000U
  15:include/fb/framebuffer.h **** #define FB_COLOR_TRANSP		0x01ffffffU
  16:include/fb/framebuffer.h **** 
  17:include/fb/framebuffer.h **** #define FB_COLOR_RGB(r,g,b) ((((r) & 0xff)<<16)|(((g)&0xff)<<8)|((b)&0xff))
  18:include/fb/framebuffer.h **** #define FB_COLOR_RED		FB_COLOR_RGB(0xff,0x00,0x00)
  19:include/fb/framebuffer.h **** #define FB_COLOR_GREEN		FB_COLOR_RGB(0x00,0xff,0x00)
  20:include/fb/framebuffer.h **** #define FB_COLOR_BLUE		FB_COLOR_RGB(0x00,0x00,0xff)
  21:include/fb/framebuffer.h **** 
  22:include/fb/framebuffer.h **** /* encode */
  23:include/fb/framebuffer.h **** 
  24:include/fb/framebuffer.h **** /* decode */
  25:include/fb/framebuffer.h **** #define FB_COLOR_IS_SPECIAL(v)     (!!((v) & 0xff000000U))
  26:include/fb/framebuffer.h **** #define FB_COLOR_TO_R(v)		(((v)>>16) & 0xff)
  27:include/fb/framebuffer.h **** #define FB_COLOR_TO_G(v)		(((v)>> 8) & 0xff)
  28:include/fb/framebuffer.h **** #define FB_COLOR_TO_B(v)		( (v)      & 0xff)
  29:include/fb/framebuffer.h **** 
  30:include/fb/framebuffer.h **** struct framebuffer {
  31:include/fb/framebuffer.h **** 	char name[8];				// keep it short!
  32:include/fb/framebuffer.h **** 	void (*init)();				// (re)initialize
  33:include/fb/framebuffer.h **** 	void (*clear)();			// clear display
  34:include/fb/framebuffer.h **** 	void (*set_p)(uint16_t x,uint16_t y);	// set pixel to fg color
  35:include/fb/framebuffer.h **** 	void (*boxto)(uint16_t x,uint16_t y);	// draw box to xy
  36:include/fb/framebuffer.h **** 	void (*lineto)(uint16_t x,uint16_t y);	// draw line to xy
  37:include/fb/framebuffer.h **** 	int (*putstr)(char *c,int maxwidth);	// put text in current font to fb
  38:include/fb/framebuffer.h **** 	void (*flush)();			// flush changes
  39:include/fb/framebuffer.h **** 
  40:include/fb/framebuffer.h **** 	uint16_t width,height;			// width/height of fb
  41:include/fb/framebuffer.h **** 	uint16_t cursor_x,cursor_y;		// current cursor
  42:include/fb/framebuffer.h **** 	uint32_t fg_color,bg_color;		// current fg/bg color
  43:include/fb/framebuffer.h **** 	enum fb_font_id font;			// current font
  44:include/fb/framebuffer.h **** };
  45:include/fb/framebuffer.h **** 
  46:include/fb/framebuffer.h **** /* there is a single framebuffer, the specific driver defines
  47:include/fb/framebuffer.h ****    the "framebuffer" symbol */
  48:include/fb/framebuffer.h **** extern struct framebuffer *framebuffer;
  49:include/fb/framebuffer.h **** 
  50:include/fb/framebuffer.h **** static inline void
  51:include/fb/framebuffer.h **** fb_init(){
  52:include/fb/framebuffer.h **** 	framebuffer->init();
  53:include/fb/framebuffer.h **** }
  54:include/fb/framebuffer.h **** 
  55:include/fb/framebuffer.h **** static inline void
  56:include/fb/framebuffer.h **** fb_clear(){
  57:include/fb/framebuffer.h **** 	framebuffer->clear();
  58:include/fb/framebuffer.h **** }
  59:include/fb/framebuffer.h **** 
  60:include/fb/framebuffer.h **** static inline void
  61:include/fb/framebuffer.h **** fb_boxto(uint16_t x,uint16_t y){
  62:include/fb/framebuffer.h **** 	framebuffer->boxto(x,y);
  63:include/fb/framebuffer.h **** }
  64:include/fb/framebuffer.h **** 
  65:include/fb/framebuffer.h **** static inline void
  66:include/fb/framebuffer.h **** fb_lineto(uint16_t x,uint16_t y){
  67:include/fb/framebuffer.h **** 	framebuffer->lineto(x,y);
  68:include/fb/framebuffer.h **** }
  69:include/fb/framebuffer.h **** 
  70:include/fb/framebuffer.h **** static inline void
  71:include/fb/framebuffer.h **** fb_set_p(uint16_t x,uint16_t y){
  72:include/fb/framebuffer.h **** 	framebuffer->set_p(x,y);
  73:include/fb/framebuffer.h **** }
  74:include/fb/framebuffer.h **** 
  75:include/fb/framebuffer.h **** static inline int
  76:include/fb/framebuffer.h **** fb_putstr(char *str,int maxwidth){
  77:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
  78:include/fb/framebuffer.h **** }
  79:include/fb/framebuffer.h **** 
  80:include/fb/framebuffer.h **** static inline void
  81:include/fb/framebuffer.h **** fb_flush(){
  82:include/fb/framebuffer.h **** 	framebuffer->flush();
  83:include/fb/framebuffer.h **** }
  84:include/fb/framebuffer.h **** 
  85:include/fb/framebuffer.h **** static inline void
  86:include/fb/framebuffer.h **** fb_gotoxy(uint16_t x,uint16_t y){
  87:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
  88:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
  89:include/fb/framebuffer.h **** }
  90:include/fb/framebuffer.h **** 
  91:include/fb/framebuffer.h **** static inline void
  92:include/fb/framebuffer.h **** fb_setfg(uint32_t color){
  93:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
  94:include/fb/framebuffer.h **** }
  95:include/fb/framebuffer.h **** 
  96:include/fb/framebuffer.h **** static inline void
  97:include/fb/framebuffer.h **** fb_setbg(uint32_t color){
  98:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
  99:include/fb/framebuffer.h **** }
 100:include/fb/framebuffer.h **** 
 101:include/fb/framebuffer.h **** static inline void
 102:include/fb/framebuffer.h **** fb_setfont(enum fb_font_id fid){
 103:include/fb/framebuffer.h **** 	framebuffer->font = fid;
 104:include/fb/framebuffer.h **** }
 105:include/fb/framebuffer.h **** 
 106:include/fb/framebuffer.h **** /* utility function: limit coordinates to area of framebuffer */
 107:include/fb/framebuffer.h **** static inline void
 108:include/fb/framebuffer.h **** fb_limit_fb_range(uint16_t *x,uint16_t *y){
  16              		.loc 1 108 0
  17              		@ args = 0, pretend = 0, frame = 0
  18              		@ frame_needed = 0, uses_anonymous_args = 0
  19              		@ link register save eliminated.
  20              	.LVL0:
 109:include/fb/framebuffer.h **** 	if(*x >= framebuffer->width)
  21              		.loc 1 109 0
  22 0000 2C309FE5 		ldr	r3, .L7
 110:include/fb/framebuffer.h **** 		*x = framebuffer->width - 1;
 111:include/fb/framebuffer.h **** 	if(*y >= framebuffer->height)
  23              		.loc 1 111 0
  24 0004 00C093E5 		ldr	ip, [r3, #0]
  25              		.loc 1 109 0
  26 0008 B030D0E1 		ldrh	r3, [r0, #0]
  27 000c B422DCE1 		ldrh	r2, [ip, #36]
  28 0010 020053E1 		cmp	r3, r2
  29              		.loc 1 110 0
  30 0014 012042E2 		sub	r2, r2, #1
  31 0018 B020C021 		strcsh	r2, [r0, #0]	@ movhi
  32              		.loc 1 111 0
  33 001c B632DCE1 		ldrh	r3, [ip, #38]
  34 0020 B020D1E1 		ldrh	r2, [r1, #0]
 112:include/fb/framebuffer.h **** 		*y = framebuffer->height - 1;
  35              		.loc 1 112 0
  36 0024 010043E2 		sub	r0, r3, #1
  37              	.LVL1:
  38              		.loc 1 111 0
  39 0028 030052E1 		cmp	r2, r3
  40              		.loc 1 108 0
  41              		@ lr needed for prologue
  42              		.loc 1 112 0
  43 002c B000C121 		strcsh	r0, [r1, #0]	@ movhi
  44 0030 1EFF2FE1 		bx	lr
  45              	.L8:
  46              		.align	2
  47              	.L7:
  48 0034 00000000 		.word	framebuffer
  49              	.LFE13:
  51              		.section	.text.fb_sanitize_box,"ax",%progbits
  52              		.align	2
  54              	fb_sanitize_box:
  55              	.LFB14:
 113:include/fb/framebuffer.h **** }
 114:include/fb/framebuffer.h **** 
 115:include/fb/framebuffer.h **** /* utility function: limit box coordinates to area of framebuffer
 116:include/fb/framebuffer.h ****    and make sure that x1y1 is left upper edge, x2y2 is right lower */
 117:include/fb/framebuffer.h **** static inline void
 118:include/fb/framebuffer.h **** fb_sanitize_box(uint16_t *x1,uint16_t *y1,uint16_t *x2,uint16_t *y2){
  56              		.loc 1 118 0
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              	.LVL2:
  60 0000 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
  61              	.LCFI0:
  62              		.loc 1 118 0
  63 0004 0240A0E1 		mov	r4, r2
  64 0008 0350A0E1 		mov	r5, r3
  65 000c 0060A0E1 		mov	r6, r0
  66 0010 0170A0E1 		mov	r7, r1
 119:include/fb/framebuffer.h **** 	fb_limit_fb_range(x1,y1);
  67              		.loc 1 119 0
  68 0014 FEFFFFEB 		bl	fb_limit_fb_range
  69              	.LVL3:
 120:include/fb/framebuffer.h **** 	fb_limit_fb_range(x2,y2);
  70              		.loc 1 120 0
  71 0018 0400A0E1 		mov	r0, r4
  72 001c 0510A0E1 		mov	r1, r5
  73 0020 FEFFFFEB 		bl	fb_limit_fb_range
 121:include/fb/framebuffer.h **** 	if(*x1 > *x2){
  74              		.loc 1 121 0
  75 0024 B020D6E1 		ldrh	r2, [r6, #0]
  76 0028 B030D4E1 		ldrh	r3, [r4, #0]
  77 002c 030052E1 		cmp	r2, r3
  78              	.LBB2:
 122:include/fb/framebuffer.h **** 		uint16_t tmp = *x1;
 123:include/fb/framebuffer.h **** 		*x1 = *x2;
  79              		.loc 1 123 0
  80 0030 B030C681 		strhih	r3, [r6, #0]	@ movhi
 124:include/fb/framebuffer.h **** 		*x2 = tmp;
  81              		.loc 1 124 0
  82 0034 B020C481 		strhih	r2, [r4, #0]	@ movhi
  83              	.LBE2:
 125:include/fb/framebuffer.h **** 	}
 126:include/fb/framebuffer.h **** 	if(*y1 > *y2){
  84              		.loc 1 126 0
  85 0038 B020D7E1 		ldrh	r2, [r7, #0]
  86 003c B030D5E1 		ldrh	r3, [r5, #0]
  87 0040 030052E1 		cmp	r2, r3
  88              	.LBB3:
 127:include/fb/framebuffer.h **** 		uint16_t tmp = *y1;
 128:include/fb/framebuffer.h **** 		*y1 = *y2;
  89              		.loc 1 128 0
  90 0044 B030C781 		strhih	r3, [r7, #0]	@ movhi
 129:include/fb/framebuffer.h **** 		*y2 = tmp;
  91              		.loc 1 129 0
  92 0048 B020C581 		strhih	r2, [r5, #0]	@ movhi
  93 004c F080BDE8 		ldmfd	sp!, {r4, r5, r6, r7, pc}
  94              	.LBE3:
  95              	.LFE14:
  97              		.section	.text.fb_rgb332_clear,"ax",%progbits
  98              		.align	2
  99              		.global	fb_rgb332_clear
 101              	fb_rgb332_clear:
 102              	.LFB16:
 103              		.file 2 "fb/fb_rgb332.c"
   1:fb/fb_rgb332.c **** /* utility functions for a color framebuffer organized
   2:fb/fb_rgb332.c ****    as one pixel per byte, with bits mapped as RRRGGGBB.
   3:fb/fb_rgb332.c ****    This matches the SSD1783 LC Display Controller used
   4:fb/fb_rgb332.c ****    on the Motorola C155 */
   5:fb/fb_rgb332.c **** 
   6:fb/fb_rgb332.c **** /* (C) 2010 by Christian Vogel <vogelchr@vogel.cx>
   7:fb/fb_rgb332.c ****  *
   8:fb/fb_rgb332.c ****  * All Rights Reserved
   9:fb/fb_rgb332.c ****  *
  10:fb/fb_rgb332.c ****  * This program is free software; you can redistribute it and/or modify
  11:fb/fb_rgb332.c ****  * it under the terms of the GNU General Public License as published by
  12:fb/fb_rgb332.c ****  * the Free Software Foundation; either version 2 of the License, or
  13:fb/fb_rgb332.c ****  * (at your option) any later version.
  14:fb/fb_rgb332.c ****  *
  15:fb/fb_rgb332.c ****  * This program is distributed in the hope that it will be useful,
  16:fb/fb_rgb332.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17:fb/fb_rgb332.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  18:fb/fb_rgb332.c ****  * GNU General Public License for more details.
  19:fb/fb_rgb332.c ****  *
  20:fb/fb_rgb332.c ****  * You should have received a copy of the GNU General Public License along
  21:fb/fb_rgb332.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  22:fb/fb_rgb332.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  23:fb/fb_rgb332.c ****  *
  24:fb/fb_rgb332.c ****  */
  25:fb/fb_rgb332.c **** 
  26:fb/fb_rgb332.c **** #include <fb/framebuffer.h>
  27:fb/fb_rgb332.c **** #include <fb/fb_rgb332.h>
  28:fb/fb_rgb332.c **** #include <stdio.h>
  29:fb/fb_rgb332.c **** #include <stdlib.h>
  30:fb/fb_rgb332.c **** 
  31:fb/fb_rgb332.c **** void
  32:fb/fb_rgb332.c **** fb_rgb332_clear(){
 104              		.loc 2 32 0
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108              	.LVL4:
  33:fb/fb_rgb332.c **** 	int i,n;
  34:fb/fb_rgb332.c **** 	
  35:fb/fb_rgb332.c **** 	/* bytes to clear */
  36:fb/fb_rgb332.c **** 	n = framebuffer->height * framebuffer->width;
 109              		.loc 2 36 0
 110 0000 64309FE5 		ldr	r3, .L20
 111 0004 003093E5 		ldr	r3, [r3, #0]
 112 0008 B422D3E1 		ldrh	r2, [r3, #36]
 113 000c B632D3E1 		ldrh	r3, [r3, #38]
 114 0010 920300E0 		mul	r0, r2, r3
 115              	.LVL5:
 116 0014 0010A0E3 		mov	r1, #0
 117              	.LVL6:
 118              		.loc 2 32 0
 119              		@ lr needed for prologue
 120 0018 0A0000EA 		b	.L16
 121              	.L17:
  37:fb/fb_rgb332.c **** 	for(i=0;i<n;i++)
  38:fb/fb_rgb332.c **** 		fb_rgb332->mem[i]=0xff; /* white */
 122              		.loc 2 38 0
 123 001c 003093E5 		ldr	r3, [r3, #0]
 124 0020 002093E5 		ldr	r2, [r3, #0]
 125 0024 0030E0E3 		mvn	r3, #0
 126 0028 0130C2E7 		strb	r3, [r2, r1]
 127              		.loc 2 37 0
 128 002c 011081E2 		add	r1, r1, #1
 129              	.L16:
 130 0030 000051E1 		cmp	r1, r0
 131 0034 34309FE5 		ldr	r3, .L20+4
 132 0038 050000BA 		blt	.L17
  39:fb/fb_rgb332.c **** 
  40:fb/fb_rgb332.c **** 	/* mark everything as dirty */
  41:fb/fb_rgb332.c **** 	fb_rgb332->damage_x1 = 0;
 133              		.loc 2 41 0
 134 003c 003093E5 		ldr	r3, [r3, #0]
  42:fb/fb_rgb332.c **** 	fb_rgb332->damage_x2 = framebuffer->width;
 135              		.loc 2 42 0
 136 0040 24209FE5 		ldr	r2, .L20
 137              		.loc 2 41 0
 138 0044 0010A0E3 		mov	r1, #0	@ movhi
 139              	.LVL7:
 140              		.loc 2 42 0
 141 0048 002092E5 		ldr	r2, [r2, #0]
 142              		.loc 2 41 0
 143 004c B410C3E1 		strh	r1, [r3, #4]	@ movhi
 144              		.loc 2 42 0
 145 0050 B412D2E1 		ldrh	r1, [r2, #36]
 146 0054 B810C3E1 		strh	r1, [r3, #8]	@ movhi
  43:fb/fb_rgb332.c **** 	fb_rgb332->damage_y1 = 0;
 147              		.loc 2 43 0
 148 0058 0010A0E3 		mov	r1, #0	@ movhi
 149 005c B610C3E1 		strh	r1, [r3, #6]	@ movhi
  44:fb/fb_rgb332.c **** 	fb_rgb332->damage_y2 = framebuffer->height;
 150              		.loc 2 44 0
 151 0060 B622D2E1 		ldrh	r2, [r2, #38]
 152 0064 BA20C3E1 		strh	r2, [r3, #10]	@ movhi
  45:fb/fb_rgb332.c **** }
 153              		.loc 2 45 0
 154 0068 1EFF2FE1 		bx	lr
 155              	.L21:
 156              		.align	2
 157              	.L20:
 158 006c 00000000 		.word	framebuffer
 159 0070 00000000 		.word	fb_rgb332
 160              	.LFE16:
 162              		.section	.text.fb_rgb332_update_damage,"ax",%progbits
 163              		.align	2
 165              	fb_rgb332_update_damage:
 166              	.LFB17:
  46:fb/fb_rgb332.c **** 
  47:fb/fb_rgb332.c **** /* update damage rectangle to include the area
  48:fb/fb_rgb332.c ****    x1,y1 (upper left) to x2,y2 (lower right)
  49:fb/fb_rgb332.c ****    Note that all pixels *including* x1y2 and x2y2 are
  50:fb/fb_rgb332.c ****    marked as dirty */
  51:fb/fb_rgb332.c **** static void
  52:fb/fb_rgb332.c **** fb_rgb332_update_damage(
  53:fb/fb_rgb332.c **** 	uint16_t x1,uint16_t y1, /* left upper corner (inclusive) */
  54:fb/fb_rgb332.c **** 	uint16_t x2,uint16_t y2  /* right lower corner (inclusive) */
  55:fb/fb_rgb332.c **** ){
 167              		.loc 2 55 0
 168              		@ args = 0, pretend = 0, frame = 16
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              	.LVL8:
 171 0000 04E02DE5 		str	lr, [sp, #-4]!
 172              	.LCFI1:
 173 0004 10D04DE2 		sub	sp, sp, #16
 174              	.LCFI2:
 175              	.LVL9:
 176              		.loc 2 55 0
 177 0008 BC00CDE1 		strh	r0, [sp, #12]	@ movhi
 178 000c B810CDE1 		strh	r1, [sp, #8]	@ movhi
 179 0010 B420CDE1 		strh	r2, [sp, #4]	@ movhi
 180 0014 B030CDE1 		strh	r3, [sp, #0]	@ movhi
  56:fb/fb_rgb332.c **** 	fb_sanitize_box(&x1,&y1,&x2,&y2);
 181              		.loc 2 56 0
 182 0018 0C008DE2 		add	r0, sp, #12
 183              	.LVL10:
 184 001c 08108DE2 		add	r1, sp, #8
 185              	.LVL11:
 186 0020 04208DE2 		add	r2, sp, #4
 187              	.LVL12:
 188 0024 0D30A0E1 		mov	r3, sp
 189              	.LVL13:
 190 0028 FEFFFFEB 		bl	fb_sanitize_box
  57:fb/fb_rgb332.c **** 	
  58:fb/fb_rgb332.c **** 	x2++; /* see definition of fb_rgb332->damage_x2/y2 */
  59:fb/fb_rgb332.c **** 	y2++;
  60:fb/fb_rgb332.c **** 
  61:fb/fb_rgb332.c **** 	/* maybe currently everything is clean? */
  62:fb/fb_rgb332.c **** 	if(fb_rgb332->damage_x1 == fb_rgb332->damage_x2 ||
 191              		.loc 2 62 0
 192 002c A0309FE5 		ldr	r3, .L35
 193 0030 000093E5 		ldr	r0, [r3, #0]
 194              		.loc 2 58 0
 195 0034 B420DDE1 		ldrh	r2, [sp, #4]
 196              		.loc 2 62 0
 197 0038 B4C0D0E1 		ldrh	ip, [r0, #4]
 198 003c B830D0E1 		ldrh	r3, [r0, #8]
 199              		.loc 2 59 0
 200 0040 B010DDE1 		ldrh	r1, [sp, #0]
 201              		.loc 2 58 0
 202 0044 012082E2 		add	r2, r2, #1
 203              		.loc 2 59 0
 204 0048 011081E2 		add	r1, r1, #1
 205              		.loc 2 62 0
 206 004c 0C0053E1 		cmp	r3, ip
 207              		.loc 2 58 0
 208 0050 B420CDE1 		strh	r2, [sp, #4]	@ movhi
 209              		.loc 2 59 0
 210 0054 B010CDE1 		strh	r1, [sp, #0]	@ movhi
 211              		.loc 2 62 0
 212 0058 1900000A 		beq	.L23
 213 005c B620D0E1 		ldrh	r2, [r0, #6]
 214 0060 BA30D0E1 		ldrh	r3, [r0, #10]
 215 0064 030052E1 		cmp	r2, r3
 216 0068 2200001A 		bne	.L25
 217              	.L23:
  63:fb/fb_rgb332.c **** 	   fb_rgb332->damage_y1 == fb_rgb332->damage_y2
  64:fb/fb_rgb332.c **** 	){
  65:fb/fb_rgb332.c **** 			fb_rgb332->damage_x1 = x1;
 218              		.loc 2 65 0
 219 006c BC30DDE1 		ldrh	r3, [sp, #12]
 220 0070 B430C0E1 		strh	r3, [r0, #4]	@ movhi
  66:fb/fb_rgb332.c **** 			fb_rgb332->damage_y1 = y1;
 221              		.loc 2 66 0
 222 0074 B830DDE1 		ldrh	r3, [sp, #8]
 223 0078 B630C0E1 		strh	r3, [r0, #6]	@ movhi
  67:fb/fb_rgb332.c **** 			fb_rgb332->damage_x2 = x2;
 224              		.loc 2 67 0
 225 007c B430DDE1 		ldrh	r3, [sp, #4]
 226 0080 B830C0E1 		strh	r3, [r0, #8]	@ movhi
  68:fb/fb_rgb332.c **** 			fb_rgb332->damage_y2 = y2;
 227              		.loc 2 68 0
 228 0084 B030DDE1 		ldrh	r3, [sp, #0]
 229 0088 BA30C0E1 		strh	r3, [r0, #10]	@ movhi
 230 008c 310000EA 		b	.L34
 231              	.L25:
  69:fb/fb_rgb332.c **** 			return;
  70:fb/fb_rgb332.c **** 	}
  71:fb/fb_rgb332.c **** 
  72:fb/fb_rgb332.c **** 	/* grow damage box */
  73:fb/fb_rgb332.c **** 	if(x1 < fb_rgb332->damage_x1)
 232              		.loc 2 73 0
 233 0090 BC30DDE1 		ldrh	r3, [sp, #12]
 234 0094 0C0053E1 		cmp	r3, ip
  74:fb/fb_rgb332.c **** 		fb_rgb332->damage_x1 = x1;
 235              		.loc 2 74 0
 236 0098 B430C031 		strcch	r3, [r0, #4]	@ movhi
  75:fb/fb_rgb332.c **** 	if(y1 < fb_rgb332->damage_y1)
 237              		.loc 2 75 0
 238 009c B630D0E1 		ldrh	r3, [r0, #6]
 239 00a0 B820DDE1 		ldrh	r2, [sp, #8]
 240 00a4 020053E1 		cmp	r3, r2
  76:fb/fb_rgb332.c **** 		fb_rgb332->damage_y1 = y1;
 241              		.loc 2 76 0
 242 00a8 B620C081 		strhih	r2, [r0, #6]	@ movhi
  77:fb/fb_rgb332.c **** 	if(x2 > fb_rgb332->damage_x2)
 243              		.loc 2 77 0
 244 00ac B830D0E1 		ldrh	r3, [r0, #8]
 245 00b0 B420DDE1 		ldrh	r2, [sp, #4]
 246 00b4 020053E1 		cmp	r3, r2
  78:fb/fb_rgb332.c **** 		fb_rgb332->damage_x2 = x2;
 247              		.loc 2 78 0
 248 00b8 B820C031 		strcch	r2, [r0, #8]	@ movhi
  79:fb/fb_rgb332.c **** 	if(y2 > fb_rgb332->damage_y2)
 249              		.loc 2 79 0
 250 00bc BA30D0E1 		ldrh	r3, [r0, #10]
 251 00c0 B020DDE1 		ldrh	r2, [sp, #0]
 252 00c4 020053E1 		cmp	r3, r2
  80:fb/fb_rgb332.c **** 		fb_rgb332->damage_y2 = y2;
 253              		.loc 2 80 0
 254 00c8 BA20C031 		strcch	r2, [r0, #10]	@ movhi
 255              	.L34:
  81:fb/fb_rgb332.c **** #if 0
  82:fb/fb_rgb332.c **** 	printf("%s: damage now %d %d %d %d\n",
  83:fb/fb_rgb332.c **** 	       __FUNCTION__,fb_rgb332->damage_x1,fb_rgb332->damage_y1,
  84:fb/fb_rgb332.c **** 	       fb_rgb332->damage_x2,fb_rgb332->damage_y2);
  85:fb/fb_rgb332.c **** #endif
  86:fb/fb_rgb332.c **** }
 256              		.loc 2 86 0
 257 00cc 10D08DE2 		add	sp, sp, #16
 258 00d0 0080BDE8 		ldmfd	sp!, {pc}
 259              	.L36:
 260              		.align	2
 261              	.L35:
 262 00d4 00000000 		.word	fb_rgb332
 263              	.LFE17:
 265              		.section	.text.rgb_to_pixel,"ax",%progbits
 266              		.align	2
 268              	rgb_to_pixel:
 269              	.LFB18:
  87:fb/fb_rgb332.c **** 
  88:fb/fb_rgb332.c **** /* we trust gcc to move this expensive bitshifting out of
  89:fb/fb_rgb332.c ****    the loops in the drawing funtcions */
  90:fb/fb_rgb332.c **** static uint8_t rgb_to_pixel(uint32_t color){
 270              		.loc 2 90 0
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274              	.LVL14:
 275 0000 0020A0E1 		mov	r2, r0
  91:fb/fb_rgb332.c **** 	uint8_t ret;
  92:fb/fb_rgb332.c **** 	ret  = (FB_COLOR_TO_R(color) & 0xe0);      /* 765 = RRR */
  93:fb/fb_rgb332.c **** 	ret |= (FB_COLOR_TO_G(color) & 0xe0) >> 3; /* 432 = GGG */
 276              		.loc 2 93 0
 277 0004 A235A0E1 		mov	r3, r2, lsr #11
 278              		.loc 2 92 0
 279 0008 2008A0E1 		mov	r0, r0, lsr #16
 280              	.LVL15:
 281              		.loc 2 93 0
 282 000c 1C3003E2 		and	r3, r3, #28
 283              		.loc 2 92 0
 284 0010 E00000E2 		and	r0, r0, #224
 285              	.LVL16:
 286              		.loc 2 93 0
 287 0014 030080E1 		orr	r0, r0, r3
 288              	.LVL17:
 289 0018 C02002E2 		and	r2, r2, #192
 290              	.LVL18:
  94:fb/fb_rgb332.c **** 	ret |= (FB_COLOR_TO_B(color) & 0xc0) >> 6; /*  10 =  BB */
  95:fb/fb_rgb332.c **** 	return ret;
  96:fb/fb_rgb332.c **** }
 291              		.loc 2 96 0
 292 001c 220380E1 		orr	r0, r0, r2, lsr #6
 293              	.LVL19:
 294              		.loc 2 90 0
 295              		@ lr needed for prologue
 296              		.loc 2 96 0
 297 0020 1EFF2FE1 		bx	lr
 298              	.LFE18:
 300              		.section	.text.set_pix,"ax",%progbits
 301              		.align	2
 303              	set_pix:
 304              	.LFB19:
  97:fb/fb_rgb332.c **** 
  98:fb/fb_rgb332.c **** static void set_pix(uint8_t *pixel,uint32_t color){
 305              		.loc 2 98 0
 306              		@ args = 0, pretend = 0, frame = 0
 307              		@ frame_needed = 0, uses_anonymous_args = 0
 308              	.LVL20:
  99:fb/fb_rgb332.c **** 	if(color == FB_COLOR_TRANSP)
 309              		.loc 2 99 0
 310 0000 FE34E0E3 		mvn	r3, #-33554432
 311 0004 030051E1 		cmp	r1, r3
 312              		.loc 2 98 0
 313 0008 10402DE9 		stmfd	sp!, {r4, lr}
 314              	.LCFI3:
 315              		.loc 2 98 0
 316 000c 0040A0E1 		mov	r4, r0
 100:fb/fb_rgb332.c **** 		return;
 101:fb/fb_rgb332.c **** 	*pixel = rgb_to_pixel(color);
 317              		.loc 2 101 0
 318 0010 0100A0E1 		mov	r0, r1
 319              	.LVL21:
 320              		.loc 2 99 0
 321 0014 1080BD08 		ldmeqfd	sp!, {r4, pc}
 322              	.LVL22:
 323              		.loc 2 101 0
 324 0018 FEFFFFEB 		bl	rgb_to_pixel
 325              	.LVL23:
 326 001c 0000C4E5 		strb	r0, [r4, #0]
 327 0020 1080BDE8 		ldmfd	sp!, {r4, pc}
 328              	.LFE19:
 330              		.section	.text.fb_rgb332_boxto,"ax",%progbits
 331              		.align	2
 332              		.global	fb_rgb332_boxto
 334              	fb_rgb332_boxto:
 335              	.LFB22:
 102:fb/fb_rgb332.c **** }
 103:fb/fb_rgb332.c **** 
 104:fb/fb_rgb332.c **** static void set_fg(uint8_t *pixel){
 105:fb/fb_rgb332.c **** 	set_pix(pixel,framebuffer->fg_color);
 106:fb/fb_rgb332.c **** }
 107:fb/fb_rgb332.c **** 
 108:fb/fb_rgb332.c **** static void set_bg(uint8_t *pixel){
 109:fb/fb_rgb332.c **** 	set_pix(pixel,framebuffer->bg_color);
 110:fb/fb_rgb332.c **** }
 111:fb/fb_rgb332.c **** 
 112:fb/fb_rgb332.c **** void fb_rgb332_boxto(uint16_t x2,uint16_t y2)
 113:fb/fb_rgb332.c **** {
 336              		.loc 2 113 0
 337              		@ args = 0, pretend = 0, frame = 12
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              	.LVL24:
 340 0000 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 341              	.LCFI4:
 114:fb/fb_rgb332.c **** 	uint16_t x1 = framebuffer->cursor_x;
 342              		.loc 2 114 0
 343 0004 08319FE5 		ldr	r3, .L56
 344              		.loc 2 113 0
 345 0008 0CD04DE2 		sub	sp, sp, #12
 346              	.LCFI5:
 347              	.LVL25:
 348              		.loc 2 113 0
 349 000c B400CDE1 		strh	r0, [sp, #4]	@ movhi
 350 0010 B010CDE1 		strh	r1, [sp, #0]	@ movhi
 351              		.loc 2 114 0
 352 0014 003093E5 		ldr	r3, [r3, #0]
 353 0018 B822D3E1 		ldrh	r2, [r3, #40]
 354 001c BA20CDE1 		strh	r2, [sp, #10]	@ movhi
 355              	.LVL26:
 115:fb/fb_rgb332.c **** 	uint16_t y1 = framebuffer->cursor_y;
 356              		.loc 2 115 0
 357 0020 BA22D3E1 		ldrh	r2, [r3, #42]
 358 0024 B820CDE1 		strh	r2, [sp, #8]	@ movhi
 359              	.LVL27:
 116:fb/fb_rgb332.c **** 	int x,y;
 117:fb/fb_rgb332.c **** 	uint8_t *p;
 118:fb/fb_rgb332.c **** 
 119:fb/fb_rgb332.c **** 	framebuffer->cursor_x = x2;
 360              		.loc 2 119 0
 361 0028 B420DDE1 		ldrh	r2, [sp, #4]	@ movhi
 362 002c B822C3E1 		strh	r2, [r3, #40]	@ movhi
 120:fb/fb_rgb332.c **** 	framebuffer->cursor_y = y2;
 363              		.loc 2 120 0
 364 0030 B020DDE1 		ldrh	r2, [sp, #0]
 121:fb/fb_rgb332.c **** 	
 122:fb/fb_rgb332.c **** 	fb_sanitize_box(&x1,&y1,&x2,&y2);
 365              		.loc 2 122 0
 366 0034 0A008DE2 		add	r0, sp, #10
 367              	.LVL28:
 368              		.loc 2 120 0
 369 0038 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
 370              		.loc 2 122 0
 371 003c 08108DE2 		add	r1, sp, #8
 372              	.LVL29:
 373 0040 04208DE2 		add	r2, sp, #4
 374 0044 0D30A0E1 		mov	r3, sp
 375 0048 FEFFFFEB 		bl	fb_sanitize_box
 123:fb/fb_rgb332.c **** 	fb_rgb332_update_damage(x1,y1,x2,y2);
 376              		.loc 2 123 0
 377 004c BA00DDE1 		ldrh	r0, [sp, #10]
 378 0050 B810DDE1 		ldrh	r1, [sp, #8]
 379 0054 B420DDE1 		ldrh	r2, [sp, #4]
 380 0058 B030DDE1 		ldrh	r3, [sp, #0]
 381 005c FEFFFFEB 		bl	fb_rgb332_update_damage
 124:fb/fb_rgb332.c **** 
 125:fb/fb_rgb332.c **** 	for(y=y1; y<=y2; y++){
 382              		.loc 2 125 0
 383 0060 B860DDE1 		ldrh	r6, [sp, #8]
 384              	.LVL30:
 385 0064 3E0000EA 		b	.L44
 386              	.LVL31:
 387              	.L45:
 126:fb/fb_rgb332.c **** 		p = & fb_rgb332->mem[x1 + framebuffer->width * y];
 388              		.loc 2 126 0
 389 0068 A4309FE5 		ldr	r3, .L56
 390 006c 003093E5 		ldr	r3, [r3, #0]
 391 0070 BA40DDE1 		ldrh	r4, [sp, #10]
 392 0074 B432D3E1 		ldrh	r3, [r3, #36]
 393 0078 964322E0 		mla	r2, r6, r3, r4
 394 007c 94309FE5 		ldr	r3, .L56+4
 395 0080 003093E5 		ldr	r3, [r3, #0]
 396 0084 003093E5 		ldr	r3, [r3, #0]
 397 0088 025083E0 		add	r5, r3, r2
 398 008c 390000EA 		b	.L46
 399              	.L47:
 400              	.LBB4:
 401              	.LBB5:
 402              		.loc 2 109 0
 403 0090 7C309FE5 		ldr	r3, .L56
 404 0094 003093E5 		ldr	r3, [r3, #0]
 405 0098 301093E5 		ldr	r1, [r3, #48]
 406 009c FEFFFFEB 		bl	set_pix
 407              	.LVL32:
 408              	.LBE5:
 409              	.LBE4:
 127:fb/fb_rgb332.c **** 		for(x=x1;x<=x2;x++){
 128:fb/fb_rgb332.c **** 			set_bg(p);
 129:fb/fb_rgb332.c **** 			if(y==y1 || y==y2 || x==x1 || x==x2) /* border */
 410              		.loc 2 129 0
 411 00a0 B830DDE1 		ldrh	r3, [sp, #8]
 412 00a4 030056E1 		cmp	r6, r3
 413              	.LBB6:
 414              	.LBB7:
 415              		.loc 2 105 0
 416 00a8 0500A0E1 		mov	r0, r5
 417              	.LBE7:
 418              	.LBE6:
 130:fb/fb_rgb332.c **** 				set_fg(p);
 131:fb/fb_rgb332.c **** 			p++;
 419              		.loc 2 131 0
 420 00ac 015085E2 		add	r5, r5, #1
 421              		.loc 2 129 0
 422 00b0 3400000A 		beq	.L48
 423 00b4 B030DDE1 		ldrh	r3, [sp, #0]
 424 00b8 030056E1 		cmp	r6, r3
 425 00bc 3400000A 		beq	.L48
 426 00c0 BA30DDE1 		ldrh	r3, [sp, #10]
 427 00c4 030054E1 		cmp	r4, r3
 428 00c8 3400000A 		beq	.L48
 429 00cc B430DDE1 		ldrh	r3, [sp, #4]
 430 00d0 030054E1 		cmp	r4, r3
 431 00d4 3800001A 		bne	.L52
 432              	.L48:
 433              	.LBB8:
 434              	.LBB9:
 435              		.loc 2 105 0
 436 00d8 34309FE5 		ldr	r3, .L56
 437 00dc 003093E5 		ldr	r3, [r3, #0]
 438 00e0 2C1093E5 		ldr	r1, [r3, #44]
 439 00e4 FEFFFFEB 		bl	set_pix
 440              	.LVL33:
 441              	.L52:
 442              	.LBE9:
 443              	.LBE8:
 444              		.loc 2 127 0
 445 00e8 014084E2 		add	r4, r4, #1
 446              	.L46:
 447 00ec B430DDE1 		ldrh	r3, [sp, #4]
 448 00f0 030054E1 		cmp	r4, r3
 449              	.LBB10:
 450              	.LBB11:
 451              		.loc 2 109 0
 452 00f4 0500A0E1 		mov	r0, r5
 453              	.LBE11:
 454              	.LBE10:
 455              		.loc 2 127 0
 456 00f8 220000DA 		ble	.L47
 457              	.LVL34:
 458              		.loc 2 125 0
 459 00fc 016086E2 		add	r6, r6, #1
 460              	.L44:
 461 0100 B030DDE1 		ldrh	r3, [sp, #0]
 462 0104 030056E1 		cmp	r6, r3
 463 0108 180000DA 		ble	.L45
 132:fb/fb_rgb332.c **** 		}
 133:fb/fb_rgb332.c **** 	}
 134:fb/fb_rgb332.c **** }
 464              		.loc 2 134 0
 465 010c 0CD08DE2 		add	sp, sp, #12
 466 0110 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 467              	.L57:
 468              		.align	2
 469              	.L56:
 470 0114 00000000 		.word	framebuffer
 471 0118 00000000 		.word	fb_rgb332
 472              	.LFE22:
 474              		.section	.text.fb_rgb332_lineto,"ax",%progbits
 475              		.align	2
 476              		.global	fb_rgb332_lineto
 478              	fb_rgb332_lineto:
 479              	.LFB23:
 135:fb/fb_rgb332.c **** 
 136:fb/fb_rgb332.c **** /* draw a line like Brensenham did... (roughly) */
 137:fb/fb_rgb332.c **** void fb_rgb332_lineto(uint16_t x2,uint16_t y2){
 480              		.loc 2 137 0
 481              		@ args = 0, pretend = 0, frame = 12
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              	.LVL35:
 484 0000 F0472DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 485              	.LCFI6:
 138:fb/fb_rgb332.c **** 	uint8_t *p,pixel;	/* framebuffer pointer */
 139:fb/fb_rgb332.c **** 	int delta_regular;	/* framebuffer offset per step */
 140:fb/fb_rgb332.c **** 	int delta_step;		/* " */
 141:fb/fb_rgb332.c **** 
 142:fb/fb_rgb332.c **** 	uint16_t x1 = framebuffer->cursor_x; /* start */
 486              		.loc 2 142 0
 487 0004 24419FE5 		ldr	r4, .L79
 488              		.loc 2 137 0
 489 0008 0CD04DE2 		sub	sp, sp, #12
 490              	.LCFI7:
 491              	.LVL36:
 492              		.loc 2 142 0
 493 000c 003094E5 		ldr	r3, [r4, #0]
 494              		.loc 2 137 0
 495 0010 B400CDE1 		strh	r0, [sp, #4]	@ movhi
 496 0014 B010CDE1 		strh	r1, [sp, #0]	@ movhi
 497              		.loc 2 142 0
 498 0018 B822D3E1 		ldrh	r2, [r3, #40]
 499 001c BA20CDE1 		strh	r2, [sp, #10]	@ movhi
 500              	.LVL37:
 143:fb/fb_rgb332.c **** 	uint16_t y1 = framebuffer->cursor_y;
 501              		.loc 2 143 0
 502 0020 BA32D3E1 		ldrh	r3, [r3, #42]
 144:fb/fb_rgb332.c **** 
 145:fb/fb_rgb332.c **** 	int t,tmax;		/* counter for steps */
 146:fb/fb_rgb332.c **** 	int err_inc,err_accu=0;	/* error delta and accumulator for */
 147:fb/fb_rgb332.c **** 				/* Brensenham's algorithm */
 148:fb/fb_rgb332.c **** 
 149:fb/fb_rgb332.c **** 	fb_limit_fb_range(&x1,&y1);
 503              		.loc 2 149 0
 504 0024 0A008DE2 		add	r0, sp, #10
 505              	.LVL38:
 506 0028 08108DE2 		add	r1, sp, #8
 507              	.LVL39:
 508              		.loc 2 143 0
 509 002c B830CDE1 		strh	r3, [sp, #8]	@ movhi
 510              	.LVL40:
 511              		.loc 2 149 0
 512 0030 FEFFFFEB 		bl	fb_limit_fb_range
 150:fb/fb_rgb332.c **** 	fb_limit_fb_range(&x2,&y2);
 513              		.loc 2 150 0
 514 0034 04008DE2 		add	r0, sp, #4
 515 0038 0D10A0E1 		mov	r1, sp
 516 003c FEFFFFEB 		bl	fb_limit_fb_range
 151:fb/fb_rgb332.c **** 	fb_rgb332_update_damage(x1,y1,x2,y2);
 517              		.loc 2 151 0
 518 0040 B810DDE1 		ldrh	r1, [sp, #8]
 519 0044 BA00DDE1 		ldrh	r0, [sp, #10]
 520 0048 B420DDE1 		ldrh	r2, [sp, #4]
 521 004c B030DDE1 		ldrh	r3, [sp, #0]
 522 0050 FEFFFFEB 		bl	fb_rgb332_update_damage
 152:fb/fb_rgb332.c **** 
 153:fb/fb_rgb332.c **** 	framebuffer->cursor_x = x2; /* end pixel */
 154:fb/fb_rgb332.c **** 	framebuffer->cursor_y = y2;
 155:fb/fb_rgb332.c **** 
 156:fb/fb_rgb332.c **** 	/* pointer to first pixel, pixel value in FB memory */
 157:fb/fb_rgb332.c **** 	p = fb_rgb332->mem + framebuffer->width * y1 + x1;
 523              		.loc 2 157 0
 524 0054 D8309FE5 		ldr	r3, .L79+4
 525              		.loc 2 153 0
 526 0058 002094E5 		ldr	r2, [r4, #0]
 527              		.loc 2 157 0
 528 005c 003093E5 		ldr	r3, [r3, #0]
 529 0060 B870DDE1 		ldrh	r7, [sp, #8]
 530 0064 B482D2E1 		ldrh	r8, [r2, #36]
 531              	.LVL41:
 532 0068 003093E5 		ldr	r3, [r3, #0]
 533 006c 973823E0 		mla	r3, r7, r8, r3
 534              		.loc 2 153 0
 535 0070 B440DDE1 		ldrh	r4, [sp, #4]
 536              		.loc 2 154 0
 537 0074 B050DDE1 		ldrh	r5, [sp, #0]
 538              		.loc 2 157 0
 539 0078 BA60DDE1 		ldrh	r6, [sp, #10]
 158:fb/fb_rgb332.c **** 	pixel = rgb_to_pixel(framebuffer->fg_color);
 540              		.loc 2 158 0
 541 007c 2C0092E5 		ldr	r0, [r2, #44]
 542              		.loc 2 153 0
 543 0080 B842C2E1 		strh	r4, [r2, #40]	@ movhi
 544              		.loc 2 154 0
 545 0084 BA52C2E1 		strh	r5, [r2, #42]	@ movhi
 546              		.loc 2 157 0
 547 0088 06A083E0 		add	sl, r3, r6
 548              	.LVL42:
 549              		.loc 2 158 0
 550 008c FEFFFFEB 		bl	rgb_to_pixel
 159:fb/fb_rgb332.c **** 
 160:fb/fb_rgb332.c **** 	if(abs(x2-x1) >= abs(y2-y1)){ /* shallow line */
 551              		.loc 2 160 0
 552 0090 043066E0 		rsb	r3, r6, r4
 553 0094 052067E0 		rsb	r2, r7, r5
 554 0098 C31F23E0 		eor	r1, r3, r3, asr #31
 555 009c C31F41E0 		sub	r1, r1, r3, asr #31
 556              	.LVL43:
 557 00a0 000052E3 		cmp	r2, #0
 558 00a4 002062B2 		rsblt	r2, r2, #0
 559              	.LVL44:
 560 00a8 020051E1 		cmp	r1, r2
 561              		.loc 2 158 0
 562 00ac 0090A0E1 		mov	r9, r0
 563              		.loc 2 160 0
 564 00b0 320000BA 		blt	.L59
 161:fb/fb_rgb332.c **** 		/* set pointer deltas for directions */
 162:fb/fb_rgb332.c **** 		delta_regular = 1;		    /* X */
 163:fb/fb_rgb332.c **** 		if(x2 < x1)
 565              		.loc 2 163 0
 566 00b4 060054E1 		cmp	r4, r6
 567 00b8 0100A023 		movcs	r0, #1
 568 00bc 0000E033 		mvncc	r0, #0
 569              	.LVL45:
 164:fb/fb_rgb332.c **** 			delta_regular = -delta_regular;
 165:fb/fb_rgb332.c **** 		delta_step = framebuffer->width;    /* Y */
 166:fb/fb_rgb332.c **** 		if(y2 < y1)
 570              		.loc 2 166 0
 571 00c0 070055E1 		cmp	r5, r7
 572 00c4 08C0A021 		movcs	ip, r8
 573              	.LVL46:
 167:fb/fb_rgb332.c **** 			delta_step = -delta_step;
 574              		.loc 2 167 0
 575 00c8 00C06832 		rsbcc	ip, r8, #0
 576 00cc 3C0000EA 		b	.L66
 577              	.LVL47:
 578              	.L59:
 168:fb/fb_rgb332.c **** 		tmax = abs(x2-x1);
 169:fb/fb_rgb332.c **** 		err_inc = abs(y2-y1);
 170:fb/fb_rgb332.c **** 	} else { /* steep line */
 171:fb/fb_rgb332.c **** 		delta_regular = framebuffer->width; /* Y */
 172:fb/fb_rgb332.c **** 		if(y2 < y1)
 579              		.loc 2 172 0
 580 00d0 070055E1 		cmp	r5, r7
 581 00d4 0800A021 		movcs	r0, r8
 582              	.LVL48:
 173:fb/fb_rgb332.c **** 			delta_regular = -delta_regular;
 583              		.loc 2 173 0
 584 00d8 00006832 		rsbcc	r0, r8, #0
 174:fb/fb_rgb332.c **** 		delta_step = 1; 		    /* X */
 175:fb/fb_rgb332.c **** 		if(x2 < x1)
 176:fb/fb_rgb332.c **** 			delta_step = -1;
 177:fb/fb_rgb332.c **** 		tmax = abs(y2-y1);
 178:fb/fb_rgb332.c **** 		err_inc = abs(x2-y1);
 585              		.loc 2 178 0
 586 00dc 043067E0 		rsb	r3, r7, r4
 587              		.loc 2 175 0
 588 00e0 060054E1 		cmp	r4, r6
 589 00e4 01C0A023 		movcs	ip, #1
 590 00e8 00C0E033 		mvncc	ip, #0
 591              	.LVL49:
 592              		.loc 2 178 0
 593 00ec 0210A0E1 		mov	r1, r2
 594 00f0 C32F23E0 		eor	r2, r3, r3, asr #31
 595 00f4 C32F42E0 		sub	r2, r2, r3, asr #31
 596              	.L66:
 597 00f8 00E0A0E3 		mov	lr, #0
 598              	.LVL50:
 599 00fc 0E30A0E1 		mov	r3, lr
 600              	.LVL51:
 601 0100 440000EA 		b	.L73
 602              	.L74:
 179:fb/fb_rgb332.c **** 	}
 180:fb/fb_rgb332.c **** 
 181:fb/fb_rgb332.c **** #if 0
 182:fb/fb_rgb332.c **** 	printf("%s: (%d,%d) -> (%d,%d) step=%d regular=%d err_inc=%d tmax=%d\n",
 183:fb/fb_rgb332.c **** 	       __FUNCTION__,x1,y1,x2,y2,delta_step,delta_regular,err_inc,tmax);
 184:fb/fb_rgb332.c **** #endif
 185:fb/fb_rgb332.c **** 
 186:fb/fb_rgb332.c **** 	for(t=0;t<=tmax;t++){
 187:fb/fb_rgb332.c **** 		*p = pixel;
 188:fb/fb_rgb332.c **** 		err_accu += err_inc;
 189:fb/fb_rgb332.c **** 		if(err_accu >= tmax){
 603              		.loc 2 189 0
 604 0104 010053E1 		cmp	r3, r1
 605              		.loc 2 187 0
 606 0108 0090CAE5 		strb	r9, [sl, #0]
 190:fb/fb_rgb332.c **** 			p += delta_step;
 607              		.loc 2 190 0
 608 010c 0CA08AA0 		addge	sl, sl, ip
 191:fb/fb_rgb332.c **** 			err_accu -= tmax;
 609              		.loc 2 191 0
 610 0110 033061A0 		rsbge	r3, r1, r3
 192:fb/fb_rgb332.c **** 		}
 193:fb/fb_rgb332.c **** 		p += delta_regular;
 611              		.loc 2 193 0
 612 0114 00A08AE0 		add	sl, sl, r0
 613              	.L73:
 614              		.loc 2 186 0
 615 0118 01005EE1 		cmp	lr, r1
 616              		.loc 2 188 0
 617 011c 023083E0 		add	r3, r3, r2
 618              		.loc 2 186 0
 619 0120 01E08EE2 		add	lr, lr, #1
 620 0124 3F0000DA 		ble	.L74
 194:fb/fb_rgb332.c **** 	}
 195:fb/fb_rgb332.c **** }
 621              		.loc 2 195 0
 622 0128 0CD08DE2 		add	sp, sp, #12
 623 012c F087BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 624              	.L80:
 625              		.align	2
 626              	.L79:
 627 0130 00000000 		.word	framebuffer
 628 0134 00000000 		.word	fb_rgb332
 629              	.LFE23:
 631              		.section	.text.fb_rgb332_putstr,"ax",%progbits
 632              		.align	2
 633              		.global	fb_rgb332_putstr
 635              	fb_rgb332_putstr:
 636              	.LFB24:
 196:fb/fb_rgb332.c **** 
 197:fb/fb_rgb332.c **** int fb_rgb332_putstr(char *str,int maxwidth){
 637              		.loc 2 197 0
 638              		@ args = 0, pretend = 0, frame = 16
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640              	.LVL52:
 641 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 642              	.LCFI8:
 198:fb/fb_rgb332.c **** 	const struct fb_font *font = fb_fonts[framebuffer->font];
 643              		.loc 2 198 0
 644 0004 A0329FE5 		ldr	r3, .L125
 645 0008 003093E5 		ldr	r3, [r3, #0]
 646 000c 342093E5 		ldr	r2, [r3, #52]
 647 0010 98329FE5 		ldr	r3, .L125+4
 199:fb/fb_rgb332.c **** 	const struct fb_char *fchr;
 200:fb/fb_rgb332.c **** 
 201:fb/fb_rgb332.c **** 	int x1,y1,x2,y2; 		// will become bounding box
 202:fb/fb_rgb332.c **** 	int y;				// coordinates in display
 203:fb/fb_rgb332.c **** 	int char_x=0,char_y;		// coordinates in font character
 204:fb/fb_rgb332.c **** 	int bitmap_x,bitmap_y;		// coordinates in character's bitmap
 205:fb/fb_rgb332.c **** 	int byte_per_line;		// depending on character width in font
 206:fb/fb_rgb332.c **** 	int bitmap_offs,bitmap_bit;	// offset inside bitmap, bit number of pixel
 207:fb/fb_rgb332.c **** 	uint8_t *p,fgpixel,bgpixel,trans; // pointer into framebuffer memory
 208:fb/fb_rgb332.c **** 	int total_w;			// total width
 209:fb/fb_rgb332.c **** 
 210:fb/fb_rgb332.c **** 	/* center, if maxwidth < 0 */
 211:fb/fb_rgb332.c **** 	if (maxwidth < 0) {
 648              		.loc 2 211 0
 649 0014 000051E3 		cmp	r1, #0
 650              		.loc 2 197 0
 651 0018 10D04DE2 		sub	sp, sp, #16
 652              	.LCFI9:
 653              	.LVL53:
 654              		.loc 2 198 0
 655 001c 026193E7 		ldr	r6, [r3, r2, asl #2]
 656              	.LVL54:
 657              		.loc 2 197 0
 658 0020 00A0A0E1 		mov	sl, r0
 212:fb/fb_rgb332.c **** 		total_w = 0;
 213:fb/fb_rgb332.c **** 		/* count width of string */
 214:fb/fb_rgb332.c **** 		for(p=(uint8_t *)str;*p;p++){
 659              		.loc 2 214 0
 660 0024 0040A0B1 		movlt	r4, r0
 661              	.LVL55:
 662 0028 0050A0B3 		movlt	r5, #0
 663              	.LVL56:
 664              		.loc 2 211 0
 665 002c 140000BA 		blt	.L84
 666 0030 240000EA 		b	.L82
 667              	.LVL57:
 668              	.L85:
 215:fb/fb_rgb332.c **** 			fchr = fb_font_get_char(font,*p);
 669              		.loc 2 215 0
 670 0034 FEFFFFEB 		bl	fb_font_get_char
 671              	.LVL58:
 216:fb/fb_rgb332.c **** 			if(!fchr)  /* FIXME: Does '?' exist in every font? */
 672              		.loc 2 216 0
 673 0038 003050E2 		subs	r3, r0, #0
 674              	.LVL59:
 217:fb/fb_rgb332.c **** 				fchr = fb_font_get_char(font,'?');
 675              		.loc 2 217 0
 676 003c 3F10A0E3 		mov	r1, #63
 677 0040 0600A0E1 		mov	r0, r6
 678              		.loc 2 216 0
 679 0044 1200001A 		bne	.L86
 680              	.LVL60:
 681              		.loc 2 217 0
 682 0048 FEFFFFEB 		bl	fb_font_get_char
 683              	.LVL61:
 684 004c 0030A0E1 		mov	r3, r0
 685              	.LVL62:
 686              	.L86:
 218:fb/fb_rgb332.c **** 			total_w += fchr->width;
 687              		.loc 2 218 0
 688 0050 D030D3E1 		ldrsb	r3, [r3, #0]
 689              	.LVL63:
 690 0054 035085E0 		add	r5, r5, r3
 691              	.LVL64:
 692              	.L84:
 693              		.loc 2 214 0
 694 0058 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 695 005c 001053E2 		subs	r1, r3, #0
 696              	.LVL65:
 697              		.loc 2 215 0
 698 0060 0600A0E1 		mov	r0, r6
 699              		.loc 2 214 0
 700 0064 014084E2 		add	r4, r4, #1
 701 0068 0B00001A 		bne	.L85
 702              	.LVL66:
 219:fb/fb_rgb332.c **** 
 220:fb/fb_rgb332.c **** 		} // str
 221:fb/fb_rgb332.c **** 		if (total_w <= framebuffer->width)
 703              		.loc 2 221 0
 704 006c 38329FE5 		ldr	r3, .L125
 705 0070 002093E5 		ldr	r2, [r3, #0]
 706 0074 B432D2E1 		ldrh	r3, [r2, #36]
 707 0078 030055E1 		cmp	r5, r3
 222:fb/fb_rgb332.c **** 			framebuffer->cursor_x =
 708              		.loc 2 222 0
 709 007c 033065D0 		rsble	r3, r5, r3
 710 0080 C330A0D1 		movle	r3, r3, asr #1
 223:fb/fb_rgb332.c **** 				(framebuffer->width - total_w) >> 1;
 224:fb/fb_rgb332.c **** 		else
 225:fb/fb_rgb332.c **** 			framebuffer->cursor_x = 1;
 711              		.loc 2 225 0
 712 0084 0130A0C3 		movgt	r3, #1	@ movhi
 713 0088 B832C2E1 		strh	r3, [r2, #40]	@ movhi
 226:fb/fb_rgb332.c **** 		maxwidth = framebuffer->width;
 714              		.loc 2 226 0
 715 008c 18329FE5 		ldr	r3, .L125
 716 0090 003093E5 		ldr	r3, [r3, #0]
 717 0094 B412D3E1 		ldrh	r1, [r3, #36]
 718              	.LVL67:
 719              	.L82:
 227:fb/fb_rgb332.c **** 	}
 228:fb/fb_rgb332.c **** 
 229:fb/fb_rgb332.c **** 	x1 = framebuffer->cursor_x;	// first col (incl!)
 720              		.loc 2 229 0
 721 0098 0C329FE5 		ldr	r3, .L125
 722 009c 004093E5 		ldr	r4, [r3, #0]
 723              	.LVL68:
 724 00a0 B892D4E1 		ldrh	r9, [r4, #40]
 725              	.LVL69:
 230:fb/fb_rgb332.c **** 	x2 = x1 + maxwidth - 1;		// last col (incl!)
 231:fb/fb_rgb332.c **** 	if(x2 >= framebuffer->width)
 726              		.loc 2 231 0
 727 00a4 B422D4E1 		ldrh	r2, [r4, #36]
 728              		.loc 2 230 0
 729 00a8 013089E0 		add	r3, r9, r1
 730 00ac 018043E2 		sub	r8, r3, #1
 731              	.LVL70:
 732              		.loc 2 231 0
 733 00b0 020058E1 		cmp	r8, r2
 232:fb/fb_rgb332.c **** 		x2 = framebuffer->width - 1;
 734              		.loc 2 232 0
 735 00b4 018042A2 		subge	r8, r2, #1
 233:fb/fb_rgb332.c **** 
 234:fb/fb_rgb332.c **** 	y1 = framebuffer->cursor_y - font->ascent + 1; // first row
 736              		.loc 2 234 0
 737 00b8 BA32D4E1 		ldrh	r3, [r4, #42]
 738 00bc D120D6E1 		ldrsb	r2, [r6, #1]
 235:fb/fb_rgb332.c **** 	y2 = y1 + font->height - 1;	// last row
 739              		.loc 2 235 0
 740 00c0 D010D6E1 		ldrsb	r1, [r6, #0]
 741              	.LVL71:
 742              		.loc 2 234 0
 743 00c4 033062E0 		rsb	r3, r2, r3
 236:fb/fb_rgb332.c **** 
 237:fb/fb_rgb332.c **** 	fgpixel = rgb_to_pixel(framebuffer->fg_color);
 744              		.loc 2 237 0
 745 00c8 2C0094E5 		ldr	r0, [r4, #44]
 746              		.loc 2 235 0
 747 00cc 017083E0 		add	r7, r3, r1
 748              	.LVL72:
 749 00d0 015083E2 		add	r5, r3, #1
 750              	.LVL73:
 751              		.loc 2 237 0
 752 00d4 FEFFFFEB 		bl	rgb_to_pixel
 238:fb/fb_rgb332.c **** 	bgpixel = rgb_to_pixel(framebuffer->bg_color);
 753              		.loc 2 238 0
 754 00d8 30C094E5 		ldr	ip, [r4, #48]
 755              		.loc 2 237 0
 756 00dc 04008DE5 		str	r0, [sp, #4]
 757              		.loc 2 238 0
 758 00e0 0C00A0E1 		mov	r0, ip
 759 00e4 08C08DE5 		str	ip, [sp, #8]
 760 00e8 FEFFFFEB 		bl	rgb_to_pixel
 239:fb/fb_rgb332.c **** 	trans = (framebuffer->bg_color == FB_COLOR_TRANSP);
 240:fb/fb_rgb332.c **** 
 241:fb/fb_rgb332.c **** 	if(y1 < 0)			// sanitize in case of overflow
 242:fb/fb_rgb332.c **** 		y1 = 0;
 243:fb/fb_rgb332.c **** 	if(y2 >= framebuffer->height)
 761              		.loc 2 243 0
 762 00ec B632D4E1 		ldrh	r3, [r4, #38]
 763              		.loc 2 241 0
 764 00f0 000055E3 		cmp	r5, #0
 765 00f4 0050A0B3 		movlt	r5, #0
 766              		.loc 2 243 0
 767 00f8 030057E1 		cmp	r7, r3
 244:fb/fb_rgb332.c **** 		y2 = framebuffer->height - 1;
 768              		.loc 2 244 0
 769 00fc 017043A2 		subge	r7, r3, #1
 770              		.loc 2 243 0
 771 0100 0040A0E3 		mov	r4, #0
 772              	.LVL74:
 773              		.loc 2 238 0
 774 0104 00008DE5 		str	r0, [sp, #0]
 775 0108 940000EA 		b	.L98
 776              	.LVL75:
 777              	.L99:
 245:fb/fb_rgb332.c **** 
 246:fb/fb_rgb332.c **** 	/* iterate over all characters */
 247:fb/fb_rgb332.c **** 	for(;*str && framebuffer->cursor_x <= x2;str++){
 248:fb/fb_rgb332.c **** 		fchr = fb_font_get_char(font,*str);
 778              		.loc 2 248 0
 779 010c 0600A0E1 		mov	r0, r6
 780              	.LVL76:
 781 0110 FEFFFFEB 		bl	fb_font_get_char
 782              	.LVL77:
 249:fb/fb_rgb332.c **** 		if(!fchr)  /* FIXME: Does '?' exist in every font? */
 783              		.loc 2 249 0
 784 0114 000050E3 		cmp	r0, #0
 785              	.LVL78:
 786 0118 4A00001A 		bne	.L100
 250:fb/fb_rgb332.c **** 			fchr = fb_font_get_char(font,'?');
 787              		.loc 2 250 0
 788 011c 0600A0E1 		mov	r0, r6
 789              	.LVL79:
 790 0120 3F10A0E3 		mov	r1, #63
 791 0124 FEFFFFEB 		bl	fb_font_get_char
 251:fb/fb_rgb332.c **** 		if(!fchr)
 792              		.loc 2 251 0
 793 0128 000050E3 		cmp	r0, #0
 794              	.LVL80:
 795 012c A700000A 		beq	.L103
 796              	.L100:
 252:fb/fb_rgb332.c **** 			return 0;
 253:fb/fb_rgb332.c **** 		byte_per_line = (fchr->bbox_w+7)/8;
 797              		.loc 2 253 0
 798 0130 D130D0E1 		ldrsb	r3, [r0, #1]
 799 0134 072093E2 		adds	r2, r3, #7
 800 0138 0E208342 		addmi	r2, r3, #14
 801 013c C221A0E1 		mov	r2, r2, asr #3
 802 0140 05E0A0E1 		mov	lr, r5
 803              	.LVL81:
 804 0144 0C208DE5 		str	r2, [sp, #12]
 805 0148 8C0000EA 		b	.L104
 806              	.LVL82:
 807              	.L105:
 254:fb/fb_rgb332.c **** 
 255:fb/fb_rgb332.c **** 		for(y=y1;y<=y2;y++){
 256:fb/fb_rgb332.c **** 			p=fb_rgb332->mem+y*framebuffer->width;
 808              		.loc 2 256 0
 809 014c 60319FE5 		ldr	r3, .L125+8
 810 0150 001091E5 		ldr	r1, [r1, #0]
 811 0154 003093E5 		ldr	r3, [r3, #0]
 812 0158 002093E5 		ldr	r2, [r3, #0]
 813              	.LVL83:
 814 015c B432D1E1 		ldrh	r3, [r1, #36]
 815 0160 932E22E0 		mla	r2, r3, lr, r2
 816              	.LVL84:
 257:fb/fb_rgb332.c **** 			p+=framebuffer->cursor_x;
 817              		.loc 2 257 0
 818 0164 B832D1E1 		ldrh	r3, [r1, #40]
 819 0168 0040A0E3 		mov	r4, #0
 820 016c 03B082E0 		add	fp, r2, r3
 821 0170 820000EA 		b	.L106
 822              	.LVL85:
 823              	.L107:
 258:fb/fb_rgb332.c **** 
 259:fb/fb_rgb332.c **** 			for(char_x=0;
 260:fb/fb_rgb332.c **** 			    char_x<fchr->width &&
 261:fb/fb_rgb332.c **** 			    char_x+framebuffer->cursor_x <= x2;
 262:fb/fb_rgb332.c **** 			    char_x++
 263:fb/fb_rgb332.c **** 			){
 264:fb/fb_rgb332.c **** 				/* bitmap coordinates, X= left to right */
 265:fb/fb_rgb332.c **** 				bitmap_x = char_x - fchr->bbox_x;
 266:fb/fb_rgb332.c **** 				/* character coords. Y increases from
 267:fb/fb_rgb332.c **** 				   cursor upwards */
 268:fb/fb_rgb332.c **** 				char_y = framebuffer->cursor_y-y;
 269:fb/fb_rgb332.c **** 				/* bitmap index = height-(bitmap coords)-1 */
 270:fb/fb_rgb332.c **** 				bitmap_y = fchr->bbox_h -
 824              		.loc 2 270 0
 825 0174 BA32D2E1 		ldrh	r3, [r2, #42]
 826 0178 D410D0E1 		ldrsb	r1, [r0, #4]
 827              	.LVL86:
 828 017c 03306EE0 		rsb	r3, lr, r3
 829              		.loc 2 265 0
 830 0180 D320D0E1 		ldrsb	r2, [r0, #3]
 831              		.loc 2 270 0
 832 0184 D2C0D0E1 		ldrsb	ip, [r0, #2]
 833 0188 033061E0 		rsb	r3, r1, r3
 834 018c 0C3063E0 		rsb	r3, r3, ip
 271:fb/fb_rgb332.c **** 					(char_y - fchr->bbox_y) - 1;
 272:fb/fb_rgb332.c **** 
 273:fb/fb_rgb332.c **** 				/* outside pixel data of this
 274:fb/fb_rgb332.c **** 				   character? */
 275:fb/fb_rgb332.c **** 				if(bitmap_x < 0 ||
 835              		.loc 2 275 0
 836 0190 022054E0 		subs	r2, r4, r2
 837              	.LVL87:
 838              		.loc 2 270 0
 839 0194 011043E2 		sub	r1, r3, #1
 840              	.LVL88:
 841              		.loc 2 275 0
 842 0198 7B00004A 		bmi	.L108
 843 019c D130D0E1 		ldrsb	r3, [r0, #1]
 844 01a0 030052E1 		cmp	r2, r3
 845 01a4 0030A0B3 		movlt	r3, #0
 846 01a8 0130A0A3 		movge	r3, #1
 847 01ac A13F93E1 		orrs	r3, r3, r1, lsr #31
 848 01b0 7B00001A 		bne	.L108
 849 01b4 0C0051E1 		cmp	r1, ip
 850 01b8 7B0000AA 		bge	.L108
 276:fb/fb_rgb332.c **** 				   bitmap_x >= fchr->bbox_w ||
 277:fb/fb_rgb332.c **** 				   bitmap_y < 0 ||
 278:fb/fb_rgb332.c **** 				   bitmap_y >= fchr->bbox_h
 279:fb/fb_rgb332.c **** 				)
 280:fb/fb_rgb332.c **** 					goto outside_char_bitmap;
 281:fb/fb_rgb332.c **** 
 282:fb/fb_rgb332.c **** 				/* check bit in pixel data for
 283:fb/fb_rgb332.c **** 				   this character */
 284:fb/fb_rgb332.c **** 				bitmap_offs=bitmap_x/8+bitmap_y*byte_per_line;
 285:fb/fb_rgb332.c **** 				bitmap_bit=7-(bitmap_x%8);
 286:fb/fb_rgb332.c **** 
 287:fb/fb_rgb332.c **** 				/* bit is set  */
 288:fb/fb_rgb332.c **** 				if(fchr->data[bitmap_offs]&(1<<bitmap_bit)){
 851              		.loc 2 288 0
 852 01bc 0CC09DE5 		ldr	ip, [sp, #12]
 853 01c0 C23180E0 		add	r3, r0, r2, asr #3
 854 01c4 9C3123E0 		mla	r3, ip, r1, r3
 855 01c8 1E2112E2 		ands	r2, r2, #-2147483641
 856              	.LVL89:
 857 01cc 01204242 		submi	r2, r2, #1
 858 01d0 822EE041 		mvnmi	r2, r2, asl #29
 859 01d4 A22EE041 		mvnmi	r2, r2, lsr #29
 860 01d8 01208242 		addmi	r2, r2, #1
 861 01dc 0510D3E5 		ldrb	r1, [r3, #5]	@ zero_extendqisi2
 862              	.LVL90:
 863 01e0 073062E2 		rsb	r3, r2, #7
 864 01e4 5133A0E1 		mov	r3, r1, asr r3
 865 01e8 010013E3 		tst	r3, #1
 289:fb/fb_rgb332.c **** 					*p = fgpixel;
 866              		.loc 2 289 0
 867 01ec 04209D15 		ldrne	r2, [sp, #4]
 868              		.loc 2 288 0
 869 01f0 8000001A 		bne	.L124
 870              	.LVL91:
 871              	.L108:
 290:fb/fb_rgb332.c **** 				} else { // unset, or outside bitmap
 291:fb/fb_rgb332.c **** outside_char_bitmap:
 292:fb/fb_rgb332.c **** 					if (!trans)
 872              		.loc 2 292 0
 873 01f4 08C09DE5 		ldr	ip, [sp, #8]
 874 01f8 FE34E0E3 		mvn	r3, #-33554432
 875 01fc 03005CE1 		cmp	ip, r3
 876 0200 8100000A 		beq	.L114
 293:fb/fb_rgb332.c **** 						*p = bgpixel;
 877              		.loc 2 293 0
 878 0204 00209DE5 		ldr	r2, [sp, #0]
 879              	.LVL92:
 880              	.L124:
 881 0208 0B20C4E7 		strb	r2, [r4, fp]
 882              	.LVL93:
 883              	.L114:
 884              		.loc 2 263 0
 885 020c 014084E2 		add	r4, r4, #1
 886              	.LVL94:
 887              	.L106:
 888              		.loc 2 260 0
 889 0210 D030D0E1 		ldrsb	r3, [r0, #0]
 890 0214 030054E1 		cmp	r4, r3
 891 0218 8B0000AA 		bge	.L116
 892 021c 88309FE5 		ldr	r3, .L125
 893 0220 002093E5 		ldr	r2, [r3, #0]
 894              	.LVL95:
 895 0224 B832D2E1 		ldrh	r3, [r2, #40]
 896 0228 033084E0 		add	r3, r4, r3
 897 022c 080053E1 		cmp	r3, r8
 898 0230 5B0000DA 		ble	.L107
 899              	.LVL96:
 900              	.L116:
 901              		.loc 2 255 0
 902 0234 01E08EE2 		add	lr, lr, #1
 903              	.L104:
 904 0238 07005EE1 		cmp	lr, r7
 905 023c 68109FE5 		ldr	r1, .L125
 906              	.LVL97:
 907 0240 510000DA 		ble	.L105
 294:fb/fb_rgb332.c **** 				}
 295:fb/fb_rgb332.c **** 				p++;
 296:fb/fb_rgb332.c **** 			} // for(x...)
 297:fb/fb_rgb332.c **** 		} // for(char_x...)
 298:fb/fb_rgb332.c **** 		framebuffer->cursor_x += char_x;
 908              		.loc 2 298 0
 909 0244 002091E5 		ldr	r2, [r1, #0]
 910              	.LVL98:
 911 0248 B832D2E1 		ldrh	r3, [r2, #40]
 912 024c 043083E0 		add	r3, r3, r4
 913 0250 B832C2E1 		strh	r3, [r2, #40]	@ movhi
 914              		.loc 2 247 0
 915 0254 01A08AE2 		add	sl, sl, #1
 916              	.L98:
 917 0258 0010DAE5 		ldrb	r1, [sl, #0]	@ zero_extendqisi2
 918 025c 000051E3 		cmp	r1, #0
 919 0260 9C00000A 		beq	.L119
 920 0264 40309FE5 		ldr	r3, .L125
 921 0268 003093E5 		ldr	r3, [r3, #0]
 922 026c B832D3E1 		ldrh	r3, [r3, #40]
 923 0270 080053E1 		cmp	r3, r8
 924 0274 410000DA 		ble	.L99
 925              	.L119:
 299:fb/fb_rgb332.c **** 	} // str
 300:fb/fb_rgb332.c **** 
 301:fb/fb_rgb332.c **** 	x2 = framebuffer->cursor_x;
 926              		.loc 2 301 0
 927 0278 2C309FE5 		ldr	r3, .L125
 928 027c 003093E5 		ldr	r3, [r3, #0]
 929 0280 B842D3E1 		ldrh	r4, [r3, #40]
 930              	.LVL99:
 302:fb/fb_rgb332.c **** 	fb_rgb332_update_damage(x1,y1,x2,y2);
 931              		.loc 2 302 0
 932 0284 0518A0E1 		mov	r1, r5, asl #16
 933 0288 0738A0E1 		mov	r3, r7, asl #16
 934 028c 0900A0E1 		mov	r0, r9
 935              	.LVL100:
 936 0290 2118A0E1 		mov	r1, r1, lsr #16
 937 0294 2338A0E1 		mov	r3, r3, lsr #16
 938 0298 0420A0E1 		mov	r2, r4
 939 029c FEFFFFEB 		bl	fb_rgb332_update_damage
 940              	.LVL101:
 303:fb/fb_rgb332.c **** 	return x2-x1;
 941              		.loc 2 303 0
 942 02a0 040069E0 		rsb	r0, r9, r4
 943              	.LVL102:
 944              	.L103:
 945              	.LVL103:
 304:fb/fb_rgb332.c **** }
 946              		.loc 2 304 0
 947 02a4 10D08DE2 		add	sp, sp, #16
 948 02a8 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 949              	.L126:
 950              		.align	2
 951              	.L125:
 952 02ac 00000000 		.word	framebuffer
 953 02b0 00000000 		.word	fb_fonts
 954 02b4 00000000 		.word	fb_rgb332
 955              	.LFE24:
 1146              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fb_rgb332.c
     /tmp/ccVXt2Vm.s:13     .text.fb_limit_fb_range:0000000000000000 fb_limit_fb_range
     /tmp/ccVXt2Vm.s:22     .text.fb_limit_fb_range:0000000000000000 $a
     /tmp/ccVXt2Vm.s:48     .text.fb_limit_fb_range:0000000000000034 $d
     /tmp/ccVXt2Vm.s:54     .text.fb_sanitize_box:0000000000000000 fb_sanitize_box
     /tmp/ccVXt2Vm.s:60     .text.fb_sanitize_box:0000000000000000 $a
     /tmp/ccVXt2Vm.s:101    .text.fb_rgb332_clear:0000000000000000 fb_rgb332_clear
     /tmp/ccVXt2Vm.s:110    .text.fb_rgb332_clear:0000000000000000 $a
     /tmp/ccVXt2Vm.s:158    .text.fb_rgb332_clear:000000000000006c $d
     /tmp/ccVXt2Vm.s:165    .text.fb_rgb332_update_damage:0000000000000000 fb_rgb332_update_damage
     /tmp/ccVXt2Vm.s:171    .text.fb_rgb332_update_damage:0000000000000000 $a
     /tmp/ccVXt2Vm.s:262    .text.fb_rgb332_update_damage:00000000000000d4 $d
     /tmp/ccVXt2Vm.s:268    .text.rgb_to_pixel:0000000000000000 rgb_to_pixel
     /tmp/ccVXt2Vm.s:275    .text.rgb_to_pixel:0000000000000000 $a
     /tmp/ccVXt2Vm.s:303    .text.set_pix:0000000000000000 set_pix
     /tmp/ccVXt2Vm.s:310    .text.set_pix:0000000000000000 $a
     /tmp/ccVXt2Vm.s:334    .text.fb_rgb332_boxto:0000000000000000 fb_rgb332_boxto
     /tmp/ccVXt2Vm.s:340    .text.fb_rgb332_boxto:0000000000000000 $a
     /tmp/ccVXt2Vm.s:470    .text.fb_rgb332_boxto:0000000000000114 $d
     /tmp/ccVXt2Vm.s:478    .text.fb_rgb332_lineto:0000000000000000 fb_rgb332_lineto
     /tmp/ccVXt2Vm.s:484    .text.fb_rgb332_lineto:0000000000000000 $a
     /tmp/ccVXt2Vm.s:627    .text.fb_rgb332_lineto:0000000000000130 $d
     /tmp/ccVXt2Vm.s:635    .text.fb_rgb332_putstr:0000000000000000 fb_rgb332_putstr
     /tmp/ccVXt2Vm.s:641    .text.fb_rgb332_putstr:0000000000000000 $a
     /tmp/ccVXt2Vm.s:952    .text.fb_rgb332_putstr:00000000000002ac $d

UNDEFINED SYMBOLS
framebuffer
fb_rgb332
fb_font_get_char
fb_fonts
