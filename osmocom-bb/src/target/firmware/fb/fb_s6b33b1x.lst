   1              		.file	"fb_s6b33b1x.c"
   9              	.Ltext0:
  10              		.global	fb_rgb332
  11              		.data
  12              		.align	2
  15              	fb_rgb332:
  16 0000 04000000 		.word	fb_s6b33b1x_rgb332
  17              		.align	2
  20              	fb_s6b33b1x_rgb332:
  21 0004 00000000 		.word	fb_s6b33b1x_mem
  22 0008 00000000 		.space	8
  22      00000000 
  23              		.global	framebuffer
  24              		.align	2
  27              	framebuffer:
  28 0010 14000000 		.word	fb_s6b33b1x_framebuffer
  29              		.align	2
  32              	fb_s6b33b1x_framebuffer:
  33 0014 73366233 		.ascii	"s6b33b1x"
  33      33623178 
  34 001c 00000000 		.word	fb_s6b33b1x_init
  35 0020 00000000 		.word	fb_rgb332_clear
  36 0024 00000000 		.space	4
  37 0028 00000000 		.word	fb_rgb332_boxto
  38 002c 00000000 		.word	fb_rgb332_lineto
  39 0030 00000000 		.word	fb_rgb332_putstr
  40 0034 00000000 		.word	fb_s6b33b1x_flush
  41 0038 8000     		.short	128
  42 003a 8000     		.short	128
  43 003c 00000000 		.space	16
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.rodata
  47              	s6b33b1x_initdata:
  48 0000 00       		.byte	0
  49 0001 26       		.byte	38
  50 0002 01       		.byte	1
  51 0003 00       		.byte	0
  52 0004 00       		.byte	0
  53 0005 02       		.byte	2
  54 0006 01       		.byte	1
  55 0007 00       		.byte	0
  56 0008 00       		.byte	0
  57 0009 2C       		.byte	44
  58 000a 00       		.byte	0
  59 000b 50       		.byte	80
  60 000c 00       		.byte	0
  61 000d 02       		.byte	2
  62 000e 01       		.byte	1
  63 000f 01       		.byte	1
  64 0010 00       		.byte	0
  65 0011 26       		.byte	38
  66 0012 01       		.byte	1
  67 0013 01       		.byte	1
  68 0014 00       		.byte	0
  69 0015 26       		.byte	38
  70 0016 01       		.byte	1
  71 0017 09       		.byte	9
  72 0018 00       		.byte	0
  73 0019 26       		.byte	38
  74 001a 01       		.byte	1
  75 001b 0B       		.byte	11
  76 001c 00       		.byte	0
  77 001d 26       		.byte	38
  78 001e 01       		.byte	1
  79 001f 0F       		.byte	15
  80 0020 00       		.byte	0
  81 0021 20       		.byte	32
  82 0022 01       		.byte	1
  83 0023 01       		.byte	1
  84 0024 00       		.byte	0
  85 0025 24       		.byte	36
  86 0026 01       		.byte	1
  87 0027 0A       		.byte	10
  88 0028 00       		.byte	0
  89 0029 2A       		.byte	42
  90 002a 01       		.byte	1
  91 002b 2D       		.byte	45
  92 002c 00       		.byte	0
  93 002d 30       		.byte	48
  94 002e 01       		.byte	1
  95 002f 0B       		.byte	11
  96 0030 00       		.byte	0
  97 0031 10       		.byte	16
  98 0032 01       		.byte	1
  99 0033 03       		.byte	3
 100 0034 00       		.byte	0
 101 0035 34       		.byte	52
 102 0036 01       		.byte	1
 103 0037 88       		.byte	-120
 104 0038 00       		.byte	0
 105 0039 40       		.byte	64
 106 003a 01       		.byte	1
 107 003b 00       		.byte	0
 108 003c 00       		.byte	0
 109 003d 28       		.byte	40
 110 003e 01       		.byte	1
 111 003f 01       		.byte	1
 112 0040 00       		.byte	0
 113 0041 32       		.byte	50
 114 0042 01       		.byte	1
 115 0043 01       		.byte	1
 116 0044 00       		.byte	0
 117 0045 51       		.byte	81
 118 0046 02       		.byte	2
 119 0047 00       		.byte	0
 120              		.section	.text.fb_spca_write,"ax",%progbits
 121              		.align	2
 123              	fb_spca_write:
 124              	.LFB17:
 125              		.file 1 "fb/fb_s6b33b1x.c"
   1:fb/fb_s6b33b1x.c **** /* Framebuffer implementation - combined Sunplus SPCA552E and
   2:fb/fb_s6b33b1x.c ****  * Samsung S6B33B1X LCD driver - as used in the Pirelli DP-L10 */
   3:fb/fb_s6b33b1x.c **** 
   4:fb/fb_s6b33b1x.c **** /* (C) 2012 by Steve Markgraf <steve@steve-m.de>
   5:fb/fb_s6b33b1x.c ****  *
   6:fb/fb_s6b33b1x.c ****  * based on fb_ssd1783.c:
   7:fb/fb_s6b33b1x.c ****  * (C) 2010 by Christian Vogel <vogelchr@vogel.cx>
   8:fb/fb_s6b33b1x.c ****  *
   9:fb/fb_s6b33b1x.c ****  * All Rights Reserved
  10:fb/fb_s6b33b1x.c ****  *
  11:fb/fb_s6b33b1x.c ****  * This program is free software; you can redistribute it and/or modify
  12:fb/fb_s6b33b1x.c ****  * it under the terms of the GNU General Public License as published by
  13:fb/fb_s6b33b1x.c ****  * the Free Software Foundation; either version 2 of the License, or
  14:fb/fb_s6b33b1x.c ****  * (at your option) any later version.
  15:fb/fb_s6b33b1x.c ****  *
  16:fb/fb_s6b33b1x.c ****  * This program is distributed in the hope that it will be useful,
  17:fb/fb_s6b33b1x.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  18:fb/fb_s6b33b1x.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  19:fb/fb_s6b33b1x.c ****  * GNU General Public License for more details.
  20:fb/fb_s6b33b1x.c ****  *
  21:fb/fb_s6b33b1x.c ****  * You should have received a copy of the GNU General Public License along
  22:fb/fb_s6b33b1x.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  23:fb/fb_s6b33b1x.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  24:fb/fb_s6b33b1x.c ****  *
  25:fb/fb_s6b33b1x.c ****  */
  26:fb/fb_s6b33b1x.c **** 
  27:fb/fb_s6b33b1x.c **** #include <fb/framebuffer.h>
  28:fb/fb_s6b33b1x.c **** #include <fb/fb_rgb332.h>
  29:fb/fb_s6b33b1x.c **** 
  30:fb/fb_s6b33b1x.c **** #include <stdint.h>
  31:fb/fb_s6b33b1x.c **** #include <stdio.h>
  32:fb/fb_s6b33b1x.c **** #include <delay.h>
  33:fb/fb_s6b33b1x.c **** #include <memory.h>
  34:fb/fb_s6b33b1x.c **** 
  35:fb/fb_s6b33b1x.c **** #define S6B33B1X_WIDTH		128
  36:fb/fb_s6b33b1x.c **** #define S6B33B1X_HEIGHT		128
  37:fb/fb_s6b33b1x.c **** #define LCD_INVIS_X_PIXELS	4
  38:fb/fb_s6b33b1x.c **** 
  39:fb/fb_s6b33b1x.c **** #define ARMIO_LATCH_OUT		0xfffe4802
  40:fb/fb_s6b33b1x.c **** #define nCS4_ADDR		0x02800000
  41:fb/fb_s6b33b1x.c **** 
  42:fb/fb_s6b33b1x.c **** static uint8_t fb_s6b33b1x_mem[S6B33B1X_WIDTH * S6B33B1X_HEIGHT];
  43:fb/fb_s6b33b1x.c **** 
  44:fb/fb_s6b33b1x.c **** enum s6b33b1x_cmdflag { CMD, DATA, END };
  45:fb/fb_s6b33b1x.c **** 
  46:fb/fb_s6b33b1x.c **** struct s6b33b1x_cmdlist {
  47:fb/fb_s6b33b1x.c **** 	enum s6b33b1x_cmdflag is_cmd:8;	/* 1: is a command, 0: is data, 2: end marker! */
  48:fb/fb_s6b33b1x.c **** 	uint8_t data;			/* 8 bit to send to LC display */
  49:fb/fb_s6b33b1x.c **** } __attribute__((packed));
  50:fb/fb_s6b33b1x.c **** 
  51:fb/fb_s6b33b1x.c **** static const struct s6b33b1x_cmdlist
  52:fb/fb_s6b33b1x.c **** s6b33b1x_initdata[] = {
  53:fb/fb_s6b33b1x.c **** 	{ CMD,  0x26 }, /* CMD   DCDC and AMP ON/OFF set */
  54:fb/fb_s6b33b1x.c **** 	{ DATA, 0x00 }, /* DATA: everything off */
  55:fb/fb_s6b33b1x.c **** 	{ CMD,  0x02 }, /* CMD   Oscillation Mode Set */
  56:fb/fb_s6b33b1x.c **** 	{ DATA, 0x00 }, /* DATA: oscillator off */
  57:fb/fb_s6b33b1x.c **** 	{ CMD,  0x2c }, /* CMD   Standby Mode off */
  58:fb/fb_s6b33b1x.c **** 	{ CMD,  0x50 }, /* CMD   Display off */
  59:fb/fb_s6b33b1x.c **** 	{ CMD,  0x02 }, /* CMD   Oscillation Mode Set */
  60:fb/fb_s6b33b1x.c **** 	{ DATA, 0x01 }, /* DATA: oscillator on */
  61:fb/fb_s6b33b1x.c **** 	{ CMD,  0x26 }, /* CMD   DCDC and AMP ON/OFF set */
  62:fb/fb_s6b33b1x.c **** 	{ DATA, 0x01 }, /* DATA: Booster 1 on */
  63:fb/fb_s6b33b1x.c **** 	{ CMD,  0x26 }, /* CMD   DCDC and AMP ON/OFF set */
  64:fb/fb_s6b33b1x.c **** 	{ DATA, 0x09 }, /* DATA: Booster 1 on, OP-AMP on */
  65:fb/fb_s6b33b1x.c **** 	{ CMD,  0x26 }, /* CMD   DCDC and AMP ON/OFF set */
  66:fb/fb_s6b33b1x.c **** 	{ DATA, 0x0b }, /* DATA: Booster 1 + 2 on, OP-AMP on */
  67:fb/fb_s6b33b1x.c **** 	{ CMD,  0x26 }, /* CMD   DCDC and AMP ON/OFF set */
  68:fb/fb_s6b33b1x.c **** 	{ DATA, 0x0f }, /* DATA: Booster 1 + 2 + 3 on, OP-AMP on */
  69:fb/fb_s6b33b1x.c **** 	{ CMD,  0x20 }, /* CMD   DC-DC Select */
  70:fb/fb_s6b33b1x.c **** 	{ DATA, 0x01 }, /* DATA: step up x1.5 */
  71:fb/fb_s6b33b1x.c **** 	{ CMD,  0x24 }, /* CMD   DCDC Clock Division Set */
  72:fb/fb_s6b33b1x.c **** 	{ DATA, 0x0a }, /* DATA: fPCK = fOSC/6 */
  73:fb/fb_s6b33b1x.c **** 	{ CMD,  0x2a }, /* CMD   Contrast Control */
  74:fb/fb_s6b33b1x.c **** 	{ DATA, 0x2d }, /* DATA: default contrast */
  75:fb/fb_s6b33b1x.c **** 	{ CMD,  0x30 }, /* CMD   Addressing mode set */
  76:fb/fb_s6b33b1x.c **** 	{ DATA, 0x0b }, /* DATA: 65536 color mode */
  77:fb/fb_s6b33b1x.c **** 	{ CMD,  0x10 }, /* CMD   Driver output mode set */
  78:fb/fb_s6b33b1x.c **** 	{ DATA, 0x03 }, /* DATA: Display duty: 1/132 */
  79:fb/fb_s6b33b1x.c **** 	{ CMD,  0x34 }, /* CMD   N-line inversion set */
  80:fb/fb_s6b33b1x.c **** 	{ DATA, 0x88 }, /* DATA: inversion on, one frame, every 8 blocks */
  81:fb/fb_s6b33b1x.c **** 	{ CMD,  0x40 }, /* CMD   Entry mode set */
  82:fb/fb_s6b33b1x.c **** 	{ DATA, 0x00 }, /* DATA: Y address counter mode */
  83:fb/fb_s6b33b1x.c **** 	{ CMD,  0x28 }, /* CMD   Temperature Compensation set */
  84:fb/fb_s6b33b1x.c **** 	{ DATA, 0x01 }, /* DATA: slope -0.05%/degC */
  85:fb/fb_s6b33b1x.c **** 	{ CMD,  0x32 }, /* CMD   ROW vector mode set */
  86:fb/fb_s6b33b1x.c **** 	{ DATA, 0x01 }, /* DATA: every 2 subgroup */
  87:fb/fb_s6b33b1x.c **** 	{ CMD,  0x51 }, /* CMD   Display on */
  88:fb/fb_s6b33b1x.c **** 	{ END,  0x00 }, /* MARKER: end of list */
  89:fb/fb_s6b33b1x.c **** };
  90:fb/fb_s6b33b1x.c **** 
  91:fb/fb_s6b33b1x.c **** static void fb_s6b33b1x_send_cmdlist(const struct s6b33b1x_cmdlist *p)
  92:fb/fb_s6b33b1x.c **** {
  93:fb/fb_s6b33b1x.c **** 	while(p->is_cmd != END){
  94:fb/fb_s6b33b1x.c **** 		writew(p->data, nCS4_ADDR);
  95:fb/fb_s6b33b1x.c **** 		p++;
  96:fb/fb_s6b33b1x.c **** 	}
  97:fb/fb_s6b33b1x.c **** }
  98:fb/fb_s6b33b1x.c **** 
  99:fb/fb_s6b33b1x.c **** static void fb_spca_write(uint16_t addr, uint16_t val)
 100:fb/fb_s6b33b1x.c **** {
 126              		.loc 1 100 0
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              	.LVL0:
 130 0000 0028A0E1 		mov	r2, r0, asl #16
 101:fb/fb_s6b33b1x.c **** 	writew(addr, nCS4_ADDR);
 131              		.loc 1 101 0
 132 0004 0A35A0E3 		mov	r3, #41943040
 133              		.loc 1 100 0
 134 0008 2228A0E1 		mov	r2, r2, lsr #16
 135 000c 10402DE9 		stmfd	sp!, {r4, lr}
 136              	.LCFI0:
 102:fb/fb_s6b33b1x.c **** 	delay_ms(1);
 137              		.loc 1 102 0
 138 0010 0100A0E3 		mov	r0, #1
 139              	.LVL1:
 140              		.loc 1 101 0
 141 0014 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 142              		.loc 1 100 0
 143 0018 0148A0E1 		mov	r4, r1, asl #16
 144              		.loc 1 102 0
 145 001c FEFFFFEB 		bl	delay_ms
 146              	.LVL2:
 103:fb/fb_s6b33b1x.c **** 	writew(val , nCS4_ADDR | 2);
 147              		.loc 1 103 0
 148 0020 08309FE5 		ldr	r3, .L3
 149              		.loc 1 100 0
 150 0024 2448A0E1 		mov	r4, r4, lsr #16
 151              	.LVL3:
 152              		.loc 1 103 0
 153 0028 B040C3E1 		strh	r4, [r3, #0]	@ movhi
 104:fb/fb_s6b33b1x.c **** }
 154              		.loc 1 104 0
 155 002c 1080BDE8 		ldmfd	sp!, {r4, pc}
 156              	.L4:
 157              		.align	2
 158              	.L3:
 159 0030 02008002 		.word	41943042
 160              	.LFE17:
 162              		.section	.rodata
 163              		.align	2
 166              	__FUNCTION__.1640:
 167 0048 66625F73 		.ascii	"fb_s6b33b1x_flush\000"
 167      36623333 
 167      6231785F 
 167      666C7573 
 167      6800
 168              		.section	.rodata.str1.4,"aMS",%progbits,1
 169              		.align	2
 170              	.LC0:
 171 0000 25733A20 		.ascii	"%s: no damage\012\000"
 171      6E6F2064 
 171      616D6167 
 171      650A00
 172              		.section	.text.fb_s6b33b1x_flush,"ax",%progbits
 173              		.align	2
 175              	fb_s6b33b1x_flush:
 176              	.LFB20:
 105:fb/fb_s6b33b1x.c **** 
 106:fb/fb_s6b33b1x.c **** static void fb_spca_init(void)
 107:fb/fb_s6b33b1x.c **** {
 108:fb/fb_s6b33b1x.c **** 	uint16_t reg;
 109:fb/fb_s6b33b1x.c **** 
 110:fb/fb_s6b33b1x.c **** 	/* Initialize Sunplus SPCA552E Media Controller for bypass mode */
 111:fb/fb_s6b33b1x.c **** 	fb_spca_write(0x7e, 0x00);	/* internal register access */
 112:fb/fb_s6b33b1x.c **** 	delay_ms(10);
 113:fb/fb_s6b33b1x.c **** 	fb_spca_write(0x7a, 0x00);	/* keep CPU in reset state */
 114:fb/fb_s6b33b1x.c **** 	delay_ms(10);
 115:fb/fb_s6b33b1x.c **** 	fb_spca_write(0x7f, 0x00);	/* select main page */
 116:fb/fb_s6b33b1x.c **** 	delay_ms(5);
 117:fb/fb_s6b33b1x.c **** 	fb_spca_write(0x72, 0x07);	/* don't reshape timing, 16 bit mode */
 118:fb/fb_s6b33b1x.c **** 	fb_spca_write(0x14, 0x03);
 119:fb/fb_s6b33b1x.c **** 	fb_spca_write(0x7f, 0x00);	/* select main page */
 120:fb/fb_s6b33b1x.c **** 	delay_ms(5);
 121:fb/fb_s6b33b1x.c **** 	fb_spca_write(0x06, 0xff);
 122:fb/fb_s6b33b1x.c **** 	fb_spca_write(0x7f, 0x09);
 123:fb/fb_s6b33b1x.c **** 	fb_spca_write(0x19, 0x08);	/* backlight: 0x08 is on, 0x0c is off */
 124:fb/fb_s6b33b1x.c **** 	fb_spca_write(0x23, 0x18);
 125:fb/fb_s6b33b1x.c **** 
 126:fb/fb_s6b33b1x.c **** 	/* enable bypass mode */
 127:fb/fb_s6b33b1x.c **** 	reg = readw(ARMIO_LATCH_OUT);
 128:fb/fb_s6b33b1x.c **** 	reg |= (1 << 7);
 129:fb/fb_s6b33b1x.c **** 	writew(reg, ARMIO_LATCH_OUT);
 130:fb/fb_s6b33b1x.c **** }
 131:fb/fb_s6b33b1x.c **** 
 132:fb/fb_s6b33b1x.c **** static void fb_s6b33b1x_init(void)
 133:fb/fb_s6b33b1x.c **** {
 134:fb/fb_s6b33b1x.c **** 	printf("%s: initializing LCD.\n",__FUNCTION__);
 135:fb/fb_s6b33b1x.c **** 
 136:fb/fb_s6b33b1x.c **** 	fb_spca_init();
 137:fb/fb_s6b33b1x.c **** 	fb_s6b33b1x_send_cmdlist(s6b33b1x_initdata);
 138:fb/fb_s6b33b1x.c **** }
 139:fb/fb_s6b33b1x.c **** 
 140:fb/fb_s6b33b1x.c **** static void fb_s6b33b1x_flush(void)
 141:fb/fb_s6b33b1x.c **** {
 177              		.loc 1 141 0
 178              		@ args = 0, pretend = 0, frame = 16
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              	.LVL4:
 181 0000 F0472DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 182              	.LCFI1:
 142:fb/fb_s6b33b1x.c **** 	int x,y;
 143:fb/fb_s6b33b1x.c **** 	uint8_t *p;
 144:fb/fb_s6b33b1x.c **** 	struct s6b33b1x_cmdlist prepare_disp_write_cmds[] = {
 145:fb/fb_s6b33b1x.c **** 		{ CMD,  0x42 },			 /*  set column address */
 146:fb/fb_s6b33b1x.c **** 		{ DATA, fb_rgb332->damage_x1 + LCD_INVIS_X_PIXELS },
 147:fb/fb_s6b33b1x.c **** 		{ DATA, fb_rgb332->damage_x2 + LCD_INVIS_X_PIXELS - 1 },
 148:fb/fb_s6b33b1x.c **** 		{ CMD,  0x43 },			 /*  set page address (Y) */
 149:fb/fb_s6b33b1x.c **** 		{ DATA, fb_rgb332->damage_y1 },
 150:fb/fb_s6b33b1x.c **** 		{ DATA, fb_rgb332->damage_y2 - 1 },
 151:fb/fb_s6b33b1x.c **** 		{ END,  0x00 }
 152:fb/fb_s6b33b1x.c **** 	};
 183              		.loc 1 152 0
 184 0004 5C319FE5 		ldr	r3, .L20
 185 0008 005093E5 		ldr	r5, [r3, #0]
 186              		.loc 1 141 0
 187 000c 10D04DE2 		sub	sp, sp, #16
 188              	.LCFI2:
 189              	.LVL5:
 190              		.loc 1 152 0
 191 0010 0420D5E5 		ldrb	r2, [r5, #4]	@ zero_extendqisi2
 192 0014 0810D5E5 		ldrb	r1, [r5, #8]	@ zero_extendqisi2
 193 0018 0AC0D5E5 		ldrb	ip, [r5, #10]	@ zero_extendqisi2
 194 001c 0100A0E3 		mov	r0, #1
 195 0020 4230A0E3 		mov	r3, #66
 196 0024 0640D5E5 		ldrb	r4, [r5, #6]	@ zero_extendqisi2
 197 0028 0330CDE5 		strb	r3, [sp, #3]
 198 002c 003083E0 		add	r3, r3, r0
 199 0030 00E0A0E3 		mov	lr, #0
 200 0034 0930CDE5 		strb	r3, [sp, #9]
 201 0038 042082E2 		add	r2, r2, #4
 202 003c 031081E2 		add	r1, r1, #3
 203 0040 01C04CE2 		sub	ip, ip, #1
 204 0044 0230A0E3 		mov	r3, #2
 205 0048 0520CDE5 		strb	r2, [sp, #5]
 206 004c 0710CDE5 		strb	r1, [sp, #7]
 207 0050 0B40CDE5 		strb	r4, [sp, #11]
 208 0054 0C00CDE5 		strb	r0, [sp, #12]
 209 0058 0DC0CDE5 		strb	ip, [sp, #13]
 210 005c 0E30CDE5 		strb	r3, [sp, #14]
 211 0060 0FE0CDE5 		strb	lr, [sp, #15]
 212 0064 02E0CDE5 		strb	lr, [sp, #2]
 213 0068 0400CDE5 		strb	r0, [sp, #4]
 214 006c 0600CDE5 		strb	r0, [sp, #6]
 215 0070 08E0CDE5 		strb	lr, [sp, #8]
 216 0074 0A00CDE5 		strb	r0, [sp, #10]
 153:fb/fb_s6b33b1x.c **** 
 154:fb/fb_s6b33b1x.c **** 	/* If everything's clean, just return */
 155:fb/fb_s6b33b1x.c **** 	if(fb_rgb332->damage_x1 == fb_rgb332->damage_x2 ||
 217              		.loc 1 155 0
 218 0078 B470D5E1 		ldrh	r7, [r5, #4]
 219 007c B890D5E1 		ldrh	r9, [r5, #8]
 220 0080 090057E1 		cmp	r7, r9
 221 0084 2500000A 		beq	.L6
 222 0088 B600D5E1 		ldrh	r0, [r5, #6]
 223 008c BA80D5E1 		ldrh	r8, [r5, #10]
 224 0090 080050E1 		cmp	r0, r8
 225 0094 03108D10 		addne	r1, sp, r3
 226              	.LVL6:
 227 0098 2D00001A 		bne	.L9
 228              	.L6:
 156:fb/fb_s6b33b1x.c **** 		fb_rgb332->damage_y1 == fb_rgb332->damage_y2) {
 157:fb/fb_s6b33b1x.c **** 			printf("%s: no damage\n",__FUNCTION__);
 229              		.loc 1 157 0
 230 009c C8109FE5 		ldr	r1, .L20+4
 231              	.LVL7:
 232 00a0 C8009FE5 		ldr	r0, .L20+8
 233 00a4 FEFFFFEB 		bl	printf
 234 00a8 560000EA 		b	.L19
 235              	.LVL8:
 236              	.L11:
 237              	.LBB2:
 238              	.LBB3:
 239              		.loc 1 94 0
 240 00ac 0120D1E5 		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 241 00b0 0A35A0E3 		mov	r3, #41943040
 242 00b4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 243              		.loc 1 95 0
 244 00b8 021081E2 		add	r1, r1, #2
 245              	.L9:
 246              		.loc 1 93 0
 247 00bc 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 248 00c0 020053E3 		cmp	r3, #2
 249 00c4 2900001A 		bne	.L11
 250              	.LBE3:
 251              	.LBE2:
 158:fb/fb_s6b33b1x.c **** 			return;
 159:fb/fb_s6b33b1x.c **** 	}
 160:fb/fb_s6b33b1x.c **** 
 161:fb/fb_s6b33b1x.c **** 	fb_s6b33b1x_send_cmdlist(prepare_disp_write_cmds);
 162:fb/fb_s6b33b1x.c **** 
 163:fb/fb_s6b33b1x.c **** 	for(y=fb_rgb332->damage_y1;y<fb_rgb332->damage_y2;y++) {
 164:fb/fb_s6b33b1x.c **** 		p = & fb_rgb332->mem[y * framebuffer->width]; // start of line
 252              		.loc 1 164 0
 253 00c8 A4309FE5 		ldr	r3, .L20+12
 254 00cc 00A093E5 		ldr	sl, [r3, #0]
 255              		.loc 1 163 0
 256 00d0 0060A0E1 		mov	r6, r0
 257              	.LVL9:
 258 00d4 4F0000EA 		b	.L13
 259              	.LVL10:
 260              	.L14:
 261              		.loc 1 164 0
 262 00d8 B432DAE1 		ldrh	r3, [sl, #36]
 263              	.LVL11:
 264 00dc 002095E5 		ldr	r2, [r5, #0]
 265 00e0 962323E0 		mla	r3, r6, r3, r2
 266              	.LVL12:
 165:fb/fb_s6b33b1x.c **** 		p += fb_rgb332->damage_x1; // start of damage area
 166:fb/fb_s6b33b1x.c **** 
 167:fb/fb_s6b33b1x.c **** 		for(x=fb_rgb332->damage_x1; x<fb_rgb332->damage_x2; x++) {
 267              		.loc 1 167 0
 268 00e4 07E0A0E1 		mov	lr, r7
 269 00e8 074083E0 		add	r4, r3, r7
 270 00ec 4A0000EA 		b	.L15
 271              	.LVL13:
 272              	.L16:
 273 00f0 011054E5 		ldrb	r1, [r4, #-1]	@ zero_extendqisi2
 274              	.LVL14:
 275              	.LBB4:
 276              	.LBB5:
 277              	.LBB6:
 278              		.file 2 "include/fb/fb_rgb332.h"
   1:include/fb/fb_rgb332.h **** #ifndef FB_RGB332_H
   2:include/fb/fb_rgb332.h **** #define FB_RGB332_H
   3:include/fb/fb_rgb332.h **** 
   4:include/fb/fb_rgb332.h **** /* RGB framebuffer with 1 byte per pixel, bits mapped as RRRGGGBB */
   5:include/fb/fb_rgb332.h **** 
   6:include/fb/fb_rgb332.h **** struct fb_rgb332 {
   7:include/fb/fb_rgb332.h **** 	uint8_t *mem;			/* set to backingstore memory */
   8:include/fb/fb_rgb332.h **** 	uint16_t damage_x1,damage_y1;	/* current damage window, ul (incl) */
   9:include/fb/fb_rgb332.h **** 	uint16_t damage_x2,damage_y2;	/* current damage window, lr (excl) */
  10:include/fb/fb_rgb332.h **** };
  11:include/fb/fb_rgb332.h **** 
  12:include/fb/fb_rgb332.h **** extern void fb_rgb332_clear();
  13:include/fb/fb_rgb332.h **** 
  14:include/fb/fb_rgb332.h **** /* draw a box from cursor to x,y */
  15:include/fb/fb_rgb332.h **** extern void fb_rgb332_boxto(uint16_t x,uint16_t y);
  16:include/fb/fb_rgb332.h **** /* draw a line from cursor to x,y */
  17:include/fb/fb_rgb332.h **** extern void fb_rgb332_lineto(uint16_t x,uint16_t y);
  18:include/fb/fb_rgb332.h **** 
  19:include/fb/fb_rgb332.h **** /* put string str onto framebuffer with line (bottom
  20:include/fb/fb_rgb332.h ****    left pixel of, e.g. "m") starting at cursor.
  21:include/fb/fb_rgb332.h ****    Maximum width consumed is maxwidth, actual width
  22:include/fb/fb_rgb332.h ****    needed is returned */
  23:include/fb/fb_rgb332.h **** extern int fb_rgb332_putstr(char *str,int maxwidth);
  24:include/fb/fb_rgb332.h **** 
  25:include/fb/fb_rgb332.h **** extern struct fb_rgb332 *fb_rgb332;
  26:include/fb/fb_rgb332.h **** 
  27:include/fb/fb_rgb332.h **** /* this convenience function can be used if you choose to
  28:include/fb/fb_rgb332.h ****  * back a RGB565 display with a RGB332 framebuffer to conserve
  29:include/fb/fb_rgb332.h ****  * ARM memory. It converts a rgb332 value to rgb565 as indicated
  30:include/fb/fb_rgb332.h ****  * in the comments. */
  31:include/fb/fb_rgb332.h **** 
  32:include/fb/fb_rgb332.h **** static inline uint16_t
  33:include/fb/fb_rgb332.h **** rgb332_to_565(uint8_t rgb332){
  34:include/fb/fb_rgb332.h **** 
  35:include/fb/fb_rgb332.h **** 	uint8_t red   =  (rgb332 & 0xe0) >> 5 ; // rrr. .... -> .... .rrr
  36:include/fb/fb_rgb332.h **** 	uint8_t green = ((rgb332 & 0x1c) >> 2); // ...g gg.. -> .... .ggg
 279              		.loc 2 36 0
 280 00f4 1C2001E2 		and	r2, r1, #28
  37:include/fb/fb_rgb332.h **** 	uint8_t blue  =   rgb332 & 0x03;        // .... ..bb -> .... ..bb
 281              		.loc 2 37 0
 282 00f8 03C001E2 		and	ip, r1, #3
 283              		.loc 2 36 0
 284 00fc 2221A0E1 		mov	r2, r2, lsr #2
 285              	.LVL15:
 286              		.loc 2 35 0
 287 0100 A112A0E1 		mov	r1, r1, lsr #5
 288              	.LVL16:
 289              	.LBE6:
 290              	.LBE5:
 168:fb/fb_s6b33b1x.c **** 			uint16_t data = rgb332_to_565(*p++);
 291              		.loc 1 168 0
 292 0104 822182E1 		orr	r2, r2, r2, asl #3
 293              	.LVL17:
 294 0108 A100A0E1 		mov	r0, r1, lsr #1
 295 010c 8C30A0E1 		mov	r3, ip, asl #1
 296              	.LVL18:
 297 0110 010180E1 		orr	r0, r0, r1, asl #2
 298 0114 8222A0E1 		mov	r2, r2, asl #5
 299 0118 8C3183E1 		orr	r3, r3, ip, asl #3
 300 011c 802582E1 		orr	r2, r2, r0, asl #11
 301 0120 AC3083E1 		orr	r3, r3, ip, lsr #1
 302 0124 023083E1 		orr	r3, r3, r2
 303              	.LVL19:
 169:fb/fb_s6b33b1x.c **** 			writew(data , nCS4_ADDR | 2);
 304              		.loc 1 169 0
 305 0128 48209FE5 		ldr	r2, .L20+16
 306 012c B030C2E1 		strh	r3, [r2, #0]	@ movhi
 307              	.LVL20:
 308              	.L15:
 309              	.LBE4:
 310              		.loc 1 167 0
 311 0130 09005EE1 		cmp	lr, r9
 312 0134 014084E2 		add	r4, r4, #1
 313 0138 01E08EE2 		add	lr, lr, #1
 314 013c 3A0000BA 		blt	.L16
 315              		.loc 1 163 0
 316 0140 016086E2 		add	r6, r6, #1
 317              	.L13:
 318 0144 080056E1 		cmp	r6, r8
 319 0148 340000BA 		blt	.L14
 170:fb/fb_s6b33b1x.c **** 		}
 171:fb/fb_s6b33b1x.c **** 	}
 172:fb/fb_s6b33b1x.c **** 
 173:fb/fb_s6b33b1x.c **** 	fb_rgb332->damage_x1 = fb_rgb332->damage_x2 = 0;
 174:fb/fb_s6b33b1x.c **** 	fb_rgb332->damage_y1 = fb_rgb332->damage_y2 = 0;
 320              		.loc 1 174 0
 321 014c 0030A0E3 		mov	r3, #0	@ movhi
 322              	.LVL21:
 323 0150 B630C5E1 		strh	r3, [r5, #6]	@ movhi
 324              		.loc 1 173 0
 325 0154 B830C5E1 		strh	r3, [r5, #8]	@ movhi
 326 0158 B430C5E1 		strh	r3, [r5, #4]	@ movhi
 327              		.loc 1 174 0
 328 015c BA30C5E1 		strh	r3, [r5, #10]	@ movhi
 329              	.L19:
 175:fb/fb_s6b33b1x.c **** }
 330              		.loc 1 175 0
 331 0160 10D08DE2 		add	sp, sp, #16
 332 0164 F087BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 333              	.L21:
 334              		.align	2
 335              	.L20:
 336 0168 00000000 		.word	fb_rgb332
 337 016c 48000000 		.word	__FUNCTION__.1640
 338 0170 00000000 		.word	.LC0
 339 0174 00000000 		.word	framebuffer
 340 0178 02008002 		.word	41943042
 341              	.LFE20:
 343              		.section	.rodata
 344 005a 0000     		.align	2
 347              	__FUNCTION__.1632:
 348 005c 66625F73 		.ascii	"fb_s6b33b1x_init\000"
 348      36623333 
 348      6231785F 
 348      696E6974 
 348      00
 349 006d 000000   		.section	.rodata.str1.4
 350 000f 00       		.align	2
 351              	.LC1:
 352 0010 25733A20 		.ascii	"%s: initializing LCD.\012\000"
 352      696E6974 
 352      69616C69 
 352      7A696E67 
 352      204C4344 
 353 0027 00       		.section	.text.fb_s6b33b1x_init,"ax",%progbits
 354              		.align	2
 356              	fb_s6b33b1x_init:
 357              	.LFB19:
 358              		.loc 1 133 0
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              	.LVL22:
 362 0000 04E02DE5 		str	lr, [sp, #-4]!
 363              	.LCFI3:
 364              		.loc 1 134 0
 365 0004 D4109FE5 		ldr	r1, .L27
 366 0008 D4009FE5 		ldr	r0, .L27+4
 367 000c FEFFFFEB 		bl	printf
 368              	.LBB7:
 369              	.LBB8:
 370              		.loc 1 111 0
 371 0010 0010A0E3 		mov	r1, #0
 372 0014 7E00A0E3 		mov	r0, #126
 373 0018 FEFFFFEB 		bl	fb_spca_write
 374              		.loc 1 112 0
 375 001c 0A00A0E3 		mov	r0, #10
 376 0020 FEFFFFEB 		bl	delay_ms
 377              		.loc 1 113 0
 378 0024 0010A0E3 		mov	r1, #0
 379 0028 7A00A0E3 		mov	r0, #122
 380 002c FEFFFFEB 		bl	fb_spca_write
 381              		.loc 1 114 0
 382 0030 0A00A0E3 		mov	r0, #10
 383 0034 FEFFFFEB 		bl	delay_ms
 384              		.loc 1 115 0
 385 0038 0010A0E3 		mov	r1, #0
 386 003c 7F00A0E3 		mov	r0, #127
 387 0040 FEFFFFEB 		bl	fb_spca_write
 388              		.loc 1 116 0
 389 0044 0500A0E3 		mov	r0, #5
 390 0048 FEFFFFEB 		bl	delay_ms
 391              		.loc 1 117 0
 392 004c 7200A0E3 		mov	r0, #114
 393 0050 0710A0E3 		mov	r1, #7
 394 0054 FEFFFFEB 		bl	fb_spca_write
 395              		.loc 1 118 0
 396 0058 1400A0E3 		mov	r0, #20
 397 005c 0310A0E3 		mov	r1, #3
 398 0060 FEFFFFEB 		bl	fb_spca_write
 399              		.loc 1 119 0
 400 0064 0010A0E3 		mov	r1, #0
 401 0068 7F00A0E3 		mov	r0, #127
 402 006c FEFFFFEB 		bl	fb_spca_write
 403              		.loc 1 120 0
 404 0070 0500A0E3 		mov	r0, #5
 405 0074 FEFFFFEB 		bl	delay_ms
 406              		.loc 1 121 0
 407 0078 0600A0E3 		mov	r0, #6
 408 007c FF10A0E3 		mov	r1, #255
 409 0080 FEFFFFEB 		bl	fb_spca_write
 410              		.loc 1 122 0
 411 0084 7F00A0E3 		mov	r0, #127
 412 0088 0910A0E3 		mov	r1, #9
 413 008c FEFFFFEB 		bl	fb_spca_write
 414              		.loc 1 123 0
 415 0090 1900A0E3 		mov	r0, #25
 416 0094 0810A0E3 		mov	r1, #8
 417 0098 FEFFFFEB 		bl	fb_spca_write
 418              		.loc 1 124 0
 419 009c 1810A0E3 		mov	r1, #24
 420 00a0 2300A0E3 		mov	r0, #35
 421 00a4 FEFFFFEB 		bl	fb_spca_write
 422              		.loc 1 127 0
 423 00a8 38209FE5 		ldr	r2, .L27+8
 424 00ac B030D2E1 		ldrh	r3, [r2, #0]
 425              		.loc 1 129 0
 426 00b0 34109FE5 		ldr	r1, .L27+12
 427              	.LVL23:
 428              		.loc 1 128 0
 429 00b4 803083E3 		orr	r3, r3, #128
 430              	.LVL24:
 431              		.loc 1 129 0
 432 00b8 B030C2E1 		strh	r3, [r2, #0]	@ movhi
 433 00bc 320000EA 		b	.L23
 434              	.LVL25:
 435              	.L24:
 436              	.LBE8:
 437              	.LBE7:
 438              	.LBB9:
 439              	.LBB10:
 440              		.loc 1 94 0
 441 00c0 0120D1E5 		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 442 00c4 0A35A0E3 		mov	r3, #41943040
 443 00c8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 444              		.loc 1 95 0
 445 00cc 021081E2 		add	r1, r1, #2
 446              	.LVL26:
 447              	.L23:
 448              		.loc 1 93 0
 449 00d0 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 450              	.LVL27:
 451 00d4 020053E3 		cmp	r3, #2
 452 00d8 2E00001A 		bne	.L24
 453              	.LBE10:
 454              	.LBE9:
 455              		.loc 1 138 0
 456 00dc 04F09DE4 		ldr	pc, [sp], #4
 457              	.L28:
 458              		.align	2
 459              	.L27:
 460 00e0 5C000000 		.word	__FUNCTION__.1632
 461 00e4 10000000 		.word	.LC1
 462 00e8 0248FEFF 		.word	-112638
 463 00ec 00000000 		.word	s6b33b1x_initdata
 464              	.LFE19:
 466              		.bss
 467              	fb_s6b33b1x_mem:
 468 0000 00000000 		.space	16384
 468      00000000 
 468      00000000 
 468      00000000 
 468      00000000 
 550              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fb_s6b33b1x.c
     /tmp/ccAlrGzF.s:15     .data:0000000000000000 fb_rgb332
     /tmp/ccAlrGzF.s:16     .data:0000000000000000 $d
     /tmp/ccAlrGzF.s:20     .data:0000000000000004 fb_s6b33b1x_rgb332
     /tmp/ccAlrGzF.s:467    .bss:0000000000000000 fb_s6b33b1x_mem
     /tmp/ccAlrGzF.s:27     .data:0000000000000010 framebuffer
     /tmp/ccAlrGzF.s:32     .data:0000000000000014 fb_s6b33b1x_framebuffer
     /tmp/ccAlrGzF.s:356    .text.fb_s6b33b1x_init:0000000000000000 fb_s6b33b1x_init
     /tmp/ccAlrGzF.s:175    .text.fb_s6b33b1x_flush:0000000000000000 fb_s6b33b1x_flush
     /tmp/ccAlrGzF.s:47     .rodata:0000000000000000 s6b33b1x_initdata
     /tmp/ccAlrGzF.s:123    .text.fb_spca_write:0000000000000000 fb_spca_write
     /tmp/ccAlrGzF.s:130    .text.fb_spca_write:0000000000000000 $a
     /tmp/ccAlrGzF.s:159    .text.fb_spca_write:0000000000000030 $d
     /tmp/ccAlrGzF.s:166    .rodata:0000000000000048 __FUNCTION__.1640
     /tmp/ccAlrGzF.s:181    .text.fb_s6b33b1x_flush:0000000000000000 $a
     /tmp/ccAlrGzF.s:336    .text.fb_s6b33b1x_flush:0000000000000168 $d
     /tmp/ccAlrGzF.s:347    .rodata:000000000000005c __FUNCTION__.1632
     /tmp/ccAlrGzF.s:362    .text.fb_s6b33b1x_init:0000000000000000 $a
     /tmp/ccAlrGzF.s:460    .text.fb_s6b33b1x_init:00000000000000e0 $d

UNDEFINED SYMBOLS
fb_rgb332_clear
fb_rgb332_boxto
fb_rgb332_lineto
fb_rgb332_putstr
delay_ms
printf
