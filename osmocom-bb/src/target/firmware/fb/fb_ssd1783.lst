   1              		.file	"fb_ssd1783.c"
   9              	.Ltext0:
  10              		.global	fb_rgb332
  11              		.data
  12              		.align	2
  15              	fb_rgb332:
  16 0000 04000000 		.word	fb_ssd1783_rgb332
  17              		.align	2
  20              	fb_ssd1783_rgb332:
  21 0004 00000000 		.word	fb_ssd1783_mem
  22 0008 00000000 		.space	8
  22      00000000 
  23              		.global	framebuffer
  24              		.align	2
  27              	framebuffer:
  28 0010 14000000 		.word	fb_ssd1783_framebuffer
  29              		.align	2
  32              	fb_ssd1783_framebuffer:
  33 0014 73736431 		.ascii	"ssd1783\000"
  33      37383300 
  34 001c 00000000 		.word	fb_ssd1783_init
  35 0020 00000000 		.word	fb_rgb332_clear
  36 0024 00000000 		.space	4
  37 0028 00000000 		.word	fb_rgb332_boxto
  38 002c 00000000 		.word	fb_rgb332_lineto
  39 0030 00000000 		.word	fb_rgb332_putstr
  40 0034 00000000 		.word	fb_ssd1783_flush
  41 0038 6200     		.short	98
  42 003a 4300     		.short	67
  43 003c 00000000 		.space	16
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.rodata
  47              	ssd1783_initdata:
  48 0000 00       		.byte	0
  49 0001 D1       		.byte	-47
  50 0002 00       		.byte	0
  51 0003 94       		.byte	-108
  52 0004 00       		.byte	0
  53 0005 BB       		.byte	-69
  54 0006 01       		.byte	1
  55 0007 01       		.byte	1
  56 0008 00       		.byte	0
  57 0009 BC       		.byte	-68
  58 000a 01       		.byte	1
  59 000b 00       		.byte	0
  60 000c 01       		.byte	1
  61 000d 00       		.byte	0
  62 000e 01       		.byte	1
  63 000f 01       		.byte	1
  64 0010 00       		.byte	0
  65 0011 CE       		.byte	-50
  66 0012 01       		.byte	1
  67 0013 00       		.byte	0
  68 0014 01       		.byte	1
  69 0015 03       		.byte	3
  70 0016 01       		.byte	1
  71 0017 05       		.byte	5
  72 0018 01       		.byte	1
  73 0019 07       		.byte	7
  74 001a 01       		.byte	1
  75 001b 09       		.byte	9
  76 001c 01       		.byte	1
  77 001d 0B       		.byte	11
  78 001e 01       		.byte	1
  79 001f 0D       		.byte	13
  80 0020 01       		.byte	1
  81 0021 0F       		.byte	15
  82 0022 01       		.byte	1
  83 0023 00       		.byte	0
  84 0024 01       		.byte	1
  85 0025 03       		.byte	3
  86 0026 01       		.byte	1
  87 0027 05       		.byte	5
  88 0028 01       		.byte	1
  89 0029 07       		.byte	7
  90 002a 01       		.byte	1
  91 002b 09       		.byte	9
  92 002c 01       		.byte	1
  93 002d 0B       		.byte	11
  94 002e 01       		.byte	1
  95 002f 0D       		.byte	13
  96 0030 01       		.byte	1
  97 0031 0F       		.byte	15
  98 0032 01       		.byte	1
  99 0033 00       		.byte	0
 100 0034 01       		.byte	1
 101 0035 05       		.byte	5
 102 0036 01       		.byte	1
 103 0037 0A       		.byte	10
 104 0038 01       		.byte	1
 105 0039 0F       		.byte	15
 106 003a 00       		.byte	0
 107 003b CA       		.byte	-54
 108 003c 01       		.byte	1
 109 003d FF       		.byte	-1
 110 003e 01       		.byte	1
 111 003f 10       		.byte	16
 112 0040 01       		.byte	1
 113 0041 01       		.byte	1
 114 0042 00       		.byte	0
 115 0043 AB       		.byte	-85
 116 0044 01       		.byte	1
 117 0045 00       		.byte	0
 118 0046 00       		.byte	0
 119 0047 20       		.byte	32
 120 0048 01       		.byte	1
 121 0049 0B       		.byte	11
 122 004a 00       		.byte	0
 123 004b 81       		.byte	-127
 124 004c 01       		.byte	1
 125 004d 29       		.byte	41
 126 004e 01       		.byte	1
 127 004f 05       		.byte	5
 128 0050 00       		.byte	0
 129 0051 A7       		.byte	-89
 130 0052 00       		.byte	0
 131 0053 82       		.byte	-126
 132 0054 01       		.byte	1
 133 0055 00       		.byte	0
 134 0056 00       		.byte	0
 135 0057 FB       		.byte	-5
 136 0058 01       		.byte	1
 137 0059 03       		.byte	3
 138 005a 00       		.byte	0
 139 005b F2       		.byte	-14
 140 005c 01       		.byte	1
 141 005d 08       		.byte	8
 142 005e 01       		.byte	1
 143 005f 06       		.byte	6
 144 0060 00       		.byte	0
 145 0061 F7       		.byte	-9
 146 0062 01       		.byte	1
 147 0063 28       		.byte	40
 148 0064 01       		.byte	1
 149 0065 8C       		.byte	-116
 150 0066 01       		.byte	1
 151 0067 05       		.byte	5
 152 0068 00       		.byte	0
 153 0069 AF       		.byte	-81
 154 006a 02       		.byte	2
 155 006b 00       		.byte	0
 156              		.section	.text.fb_ssd1783_send_cmdlist,"ax",%progbits
 157              		.align	2
 159              	fb_ssd1783_send_cmdlist:
 160              	.LFB16:
 161              		.file 1 "fb/fb_ssd1783.c"
   1:fb/fb_ssd1783.c **** /* Framebuffer implementation - SSD1783 LCD driver for C155 */
   2:fb/fb_ssd1783.c **** /* Based on ssd1783.c by Steve Markgraf and Harald Welte */
   3:fb/fb_ssd1783.c **** 
   4:fb/fb_ssd1783.c **** /* (C) 2010 by Christian Vogel <vogelchr@vogel.cx>
   5:fb/fb_ssd1783.c ****  *
   6:fb/fb_ssd1783.c ****  * All Rights Reserved
   7:fb/fb_ssd1783.c ****  *
   8:fb/fb_ssd1783.c ****  * This program is free software; you can redistribute it and/or modify
   9:fb/fb_ssd1783.c ****  * it under the terms of the GNU General Public License as published by
  10:fb/fb_ssd1783.c ****  * the Free Software Foundation; either version 2 of the License, or
  11:fb/fb_ssd1783.c ****  * (at your option) any later version.
  12:fb/fb_ssd1783.c ****  *
  13:fb/fb_ssd1783.c ****  * This program is distributed in the hope that it will be useful,
  14:fb/fb_ssd1783.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:fb/fb_ssd1783.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:fb/fb_ssd1783.c ****  * GNU General Public License for more details.
  17:fb/fb_ssd1783.c ****  *
  18:fb/fb_ssd1783.c ****  * You should have received a copy of the GNU General Public License along
  19:fb/fb_ssd1783.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  20:fb/fb_ssd1783.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  21:fb/fb_ssd1783.c ****  *
  22:fb/fb_ssd1783.c ****  */
  23:fb/fb_ssd1783.c **** 
  24:fb/fb_ssd1783.c **** #include <fb/framebuffer.h>
  25:fb/fb_ssd1783.c **** #include <fb/fb_rgb332.h>
  26:fb/fb_ssd1783.c **** 
  27:fb/fb_ssd1783.c **** #include <stdint.h>
  28:fb/fb_ssd1783.c **** #include <stdio.h>
  29:fb/fb_ssd1783.c **** #include <delay.h>
  30:fb/fb_ssd1783.c **** #include <uwire.h>
  31:fb/fb_ssd1783.c **** #include <calypso/clock.h>
  32:fb/fb_ssd1783.c **** 
  33:fb/fb_ssd1783.c **** #define SSD1783_WIDTH		98
  34:fb/fb_ssd1783.c **** #define SSD1783_HEIGHT		67
  35:fb/fb_ssd1783.c **** #define SSD1783_UWIRE_BITLEN 	9
  36:fb/fb_ssd1783.c **** #define SSD1783_DEV_ID		0
  37:fb/fb_ssd1783.c **** 
  38:fb/fb_ssd1783.c **** #define LCD_TOP_FREE_ROWS	3
  39:fb/fb_ssd1783.c **** #define LCD_LEFT_FREE_COLS	0
  40:fb/fb_ssd1783.c **** #define	PIXEL_BYTES		3
  41:fb/fb_ssd1783.c **** #define FONT_HEIGHT		8
  42:fb/fb_ssd1783.c **** #define FONT_WIDTH		8
  43:fb/fb_ssd1783.c **** 
  44:fb/fb_ssd1783.c **** static uint8_t fb_ssd1783_mem[SSD1783_WIDTH * SSD1783_HEIGHT];
  45:fb/fb_ssd1783.c **** 
  46:fb/fb_ssd1783.c **** enum ssd1783_cmdflag { CMD, DATA, END };
  47:fb/fb_ssd1783.c **** 
  48:fb/fb_ssd1783.c **** struct ssd1783_cmdlist {
  49:fb/fb_ssd1783.c **** 	enum ssd1783_cmdflag is_cmd:8;	/* 1: is a command, 0: is data, 2: end marker! */
  50:fb/fb_ssd1783.c **** 	uint8_t data;  			/* 8 bit to send to LC display */
  51:fb/fb_ssd1783.c **** } __attribute__((packed));
  52:fb/fb_ssd1783.c **** 
  53:fb/fb_ssd1783.c **** static const struct ssd1783_cmdlist
  54:fb/fb_ssd1783.c **** ssd1783_initdata[] = {
  55:fb/fb_ssd1783.c **** 	{ CMD,  0xD1 }, /* CMD   set internal oscillator on */
  56:fb/fb_ssd1783.c **** 	{ CMD,  0x94 }, /* CMD   leave sleep mode */
  57:fb/fb_ssd1783.c **** 	{ CMD,  0xbb }, /* CMD   Set COM Output Scan Direction: */
  58:fb/fb_ssd1783.c **** 	{ DATA, 0x01 }, /* DATA: 01: COM0-79, then COM159-80 */
  59:fb/fb_ssd1783.c **** /* -------- DIFFERENT FROM ORIGINAL CODE: -------------- */
  60:fb/fb_ssd1783.c **** /* we use 8bit per pixel packed RGB 332 */
  61:fb/fb_ssd1783.c **** 	{ CMD,  0xbc }, /* CMD   Set Data Output Scan Direction */
  62:fb/fb_ssd1783.c **** 	{ DATA, 0x00 }, /* DATA: column scan, normal rotation, normal display */
  63:fb/fb_ssd1783.c **** 	{ DATA, 0x00 }, /* DATA: RGB color arrangement R G B R G B ... */
  64:fb/fb_ssd1783.c **** /*-->*/ { DATA, 0x01 }, /* DATA: 8 bit per pixel mode MSB <RRRGGGBB> LSB */
  65:fb/fb_ssd1783.c **** /* --------- /DIFFERENT ---------- */
  66:fb/fb_ssd1783.c **** 	{ CMD,  0xce }, /* CMD   Set 256 Color Look Up Table LUT */
  67:fb/fb_ssd1783.c **** 	{ DATA, 0x00 },	/* DATA red 000 */
  68:fb/fb_ssd1783.c **** 	{ DATA, 0x03 },	/* DATA red 001 */
  69:fb/fb_ssd1783.c **** 	{ DATA, 0x05 },	/* DATA red 010 */
  70:fb/fb_ssd1783.c **** 	{ DATA, 0x07 },	/* DATA red 011 */
  71:fb/fb_ssd1783.c **** 	{ DATA, 0x09 },	/* DATA red 100 */
  72:fb/fb_ssd1783.c **** 	{ DATA, 0x0b },	/* DATA red 101 */
  73:fb/fb_ssd1783.c **** 	{ DATA, 0x0d },	/* DATA red 110 */
  74:fb/fb_ssd1783.c **** 	{ DATA, 0x0f },	/* DATA red 111 */
  75:fb/fb_ssd1783.c **** 	{ DATA, 0x00 },	/* DATA green 000 */
  76:fb/fb_ssd1783.c **** 	{ DATA, 0x03 },	/* DATA green 001 */
  77:fb/fb_ssd1783.c **** 	{ DATA, 0x05 },	/* DATA green 010 */
  78:fb/fb_ssd1783.c **** 	{ DATA, 0x07 },	/* DATA green 011 */
  79:fb/fb_ssd1783.c **** 	{ DATA, 0x09 },	/* DATA green 100 */
  80:fb/fb_ssd1783.c **** 	{ DATA, 0x0b },	/* DATA green 101 */
  81:fb/fb_ssd1783.c **** 	{ DATA, 0x0d },	/* DATA green 110 */
  82:fb/fb_ssd1783.c **** 	{ DATA, 0x0f },	/* DATA green 111 */
  83:fb/fb_ssd1783.c **** 	{ DATA, 0x00 },	/* DATA blue 00 */
  84:fb/fb_ssd1783.c **** 	{ DATA, 0x05 },	/* DATA blue 01 */
  85:fb/fb_ssd1783.c **** 	{ DATA, 0x0a },	/* DATA blue 10 */
  86:fb/fb_ssd1783.c **** 	{ DATA, 0x0f },	/* DATA blue 11 */
  87:fb/fb_ssd1783.c **** 	{ CMD,  0xca }, /* CMD   Set Display Control - Driver Duty Selection */
  88:fb/fb_ssd1783.c **** 	{ DATA, 0xff }, // can't find description of the values in the original
  89:fb/fb_ssd1783.c **** 	{ DATA, 0x10 }, // display/ssd1783.c in my datasheet :-(
  90:fb/fb_ssd1783.c **** 	{ DATA, 0x01 }, //
  91:fb/fb_ssd1783.c **** 	{ CMD,  0xab }, /* CMD   Set Scroll Start */
  92:fb/fb_ssd1783.c **** 	{ DATA, 0x00 }, /* DATA: Starting address at block 0 */
  93:fb/fb_ssd1783.c **** 	{ CMD,  0x20 }, /* CMD   Set power control register */
  94:fb/fb_ssd1783.c **** 	{ DATA, 0x0b }, /* DATA: booster 6x, reference gen. & int regulator */
  95:fb/fb_ssd1783.c **** 	{ CMD,  0x81 }, /* CMD   Contrast Lvl & Int. Regul. Resistor Ratio */
  96:fb/fb_ssd1783.c **** 	{ DATA, 0x29 }, /* DATA: contrast = 0x29 */
  97:fb/fb_ssd1783.c **** 	{ DATA, 0x05 }, /* DATA: 0x05 = 0b101 -> 1+R2/R1 = 11.37 */
  98:fb/fb_ssd1783.c **** 	{ CMD,  0xa7 }, /* CMD   Invert Display */
  99:fb/fb_ssd1783.c **** 	{ CMD,  0x82 }, /* CMD   Set Temperature Compensation Coefficient */
 100:fb/fb_ssd1783.c **** 	{ DATA, 0x00 }, /* DATA: Gradient is -0.10 % / degC */
 101:fb/fb_ssd1783.c **** 	{ CMD,  0xfb }, /* CMD   Set Biasing Ratio */
 102:fb/fb_ssd1783.c **** 	{ DATA, 0x03 }, /* DATA: 1/10 bias */
 103:fb/fb_ssd1783.c **** 	{ CMD,  0xf2 }, /* CMD   Set Frame Frequency and N-line inversion */
 104:fb/fb_ssd1783.c **** 	{ DATA, 0x08 }, /* DATA: 75 Hz (POR) */
 105:fb/fb_ssd1783.c **** 	{ DATA, 0x06 }, /* DATA: n-line inversion: 6 lines */
 106:fb/fb_ssd1783.c **** 	{ CMD,  0xf7 }, /* CMD   Select PWM/FRC Select Full Col./8col mode */
 107:fb/fb_ssd1783.c **** 	{ DATA, 0x28 }, /* DATA: always 0x28 */
 108:fb/fb_ssd1783.c **** 	{ DATA, 0x8c }, /* DATA: 4bit PWM + 2 bit FRC */
 109:fb/fb_ssd1783.c **** 	{ DATA, 0x05 }, /* DATA: full color mode */
 110:fb/fb_ssd1783.c **** 	{ CMD,  0xaf }, /* CMD   Display On */
 111:fb/fb_ssd1783.c **** 	{ END,  0x00 }, /* MARKER: end of list */
 112:fb/fb_ssd1783.c **** };
 113:fb/fb_ssd1783.c **** 
 114:fb/fb_ssd1783.c **** static void
 115:fb/fb_ssd1783.c **** fb_ssd1783_send_cmdlist(const struct ssd1783_cmdlist *p){
 162              		.loc 1 115 0
 163              		@ args = 0, pretend = 0, frame = 4
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL0:
 166 0000 10402DE9 		stmfd	sp!, {r4, lr}
 167              	.LCFI0:
 168 0004 0040A0E1 		mov	r4, r0
 169 0008 04D04DE2 		sub	sp, sp, #4
 170              	.LCFI1:
 171              	.LVL1:
 172 000c 090000EA 		b	.L2
 173              	.LVL2:
 174              	.L3:
 175              	.LBB2:
 116:fb/fb_ssd1783.c **** 	int i=0;
 117:fb/fb_ssd1783.c **** 	while(p->is_cmd != END){
 118:fb/fb_ssd1783.c **** 		uint16_t sendcmd = p->data;
 176              		.loc 1 118 0
 177 0010 01C0D4E5 		ldrb	ip, [r4, #1]	@ zero_extendqisi2
 119:fb/fb_ssd1783.c **** 		if(p->is_cmd == DATA)
 178              		.loc 1 119 0
 179 0014 01005EE3 		cmp	lr, #1
 120:fb/fb_ssd1783.c **** 			sendcmd |= 0x0100; /* 9th bit is cmd/data flag */
 180              		.loc 1 120 0
 181 0018 01EC8CE3 		orr	lr, ip, #256
 182              		.loc 1 118 0
 183 001c B2C0CDE1 		strh	ip, [sp, #2]	@ movhi
 121:fb/fb_ssd1783.c **** 		uwire_xfer(SSD1783_DEV_ID, SSD1783_UWIRE_BITLEN, &sendcmd, NULL);
 122:fb/fb_ssd1783.c **** 		p++;
 184              		.loc 1 122 0
 185 0020 024084E2 		add	r4, r4, #2
 186              		.loc 1 120 0
 187 0024 B2E0CD01 		streqh	lr, [sp, #2]	@ movhi
 188              		.loc 1 121 0
 189 0028 FEFFFFEB 		bl	uwire_xfer
 190              	.LVL3:
 191              	.L2:
 192              	.LBE2:
 193              		.loc 1 117 0
 194 002c 00E0D4E5 		ldrb	lr, [r4, #0]	@ zero_extendqisi2
 195              	.LBB3:
 196              		.loc 1 121 0
 197 0030 0000A0E3 		mov	r0, #0
 198              	.LBE3:
 199              		.loc 1 117 0
 200 0034 02005EE3 		cmp	lr, #2
 201              	.LBB4:
 202              		.loc 1 121 0
 203 0038 0910A0E3 		mov	r1, #9
 204 003c 02208DE2 		add	r2, sp, #2
 205 0040 0030A0E1 		mov	r3, r0
 206              	.LBE4:
 207              		.loc 1 117 0
 208 0044 0200001A 		bne	.L3
 123:fb/fb_ssd1783.c **** 		i++;
 124:fb/fb_ssd1783.c **** 	}
 125:fb/fb_ssd1783.c **** }
 209              		.loc 1 125 0
 210 0048 04D08DE2 		add	sp, sp, #4
 211 004c 1080BDE8 		ldmfd	sp!, {r4, pc}
 212              	.LFE16:
 214              		.section	.rodata
 215              		.align	2
 218              	__FUNCTION__.1688:
 219 006c 66625F73 		.ascii	"fb_ssd1783_init\000"
 219      73643137 
 219      38335F69 
 219      6E697400 
 220              		.section	.rodata.str1.4,"aMS",%progbits,1
 221              		.align	2
 222              	.LC0:
 223 0000 25733A20 		.ascii	"%s: initializing LCD.\012\000"
 223      696E6974 
 223      69616C69 
 223      7A696E67 
 223      204C4344 
 224              		.section	.text.fb_ssd1783_init,"ax",%progbits
 225              		.align	2
 227              	fb_ssd1783_init:
 228              	.LFB17:
 126:fb/fb_ssd1783.c **** 
 127:fb/fb_ssd1783.c **** static void
 128:fb/fb_ssd1783.c **** fb_ssd1783_init(void){
 229              		.loc 1 128 0
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              	.LVL4:
 233 0000 04E02DE5 		str	lr, [sp, #-4]!
 234              	.LCFI2:
 129:fb/fb_ssd1783.c **** 	printf("%s: initializing LCD.\n",__FUNCTION__);
 235              		.loc 1 129 0
 236 0004 30109FE5 		ldr	r1, .L10
 237 0008 30009FE5 		ldr	r0, .L10+4
 238 000c FEFFFFEB 		bl	printf
 130:fb/fb_ssd1783.c **** 	calypso_reset_set(RESET_EXT, 0);
 239              		.loc 1 130 0
 240 0010 0010A0E3 		mov	r1, #0
 241 0014 0400A0E3 		mov	r0, #4
 242 0018 FEFFFFEB 		bl	calypso_reset_set
 131:fb/fb_ssd1783.c **** 	delay_ms(5);
 243              		.loc 1 131 0
 244 001c 0500A0E3 		mov	r0, #5
 245 0020 FEFFFFEB 		bl	delay_ms
 132:fb/fb_ssd1783.c **** 	uwire_init();
 246              		.loc 1 132 0
 247 0024 FEFFFFEB 		bl	uwire_init
 133:fb/fb_ssd1783.c **** 	delay_ms(5);
 248              		.loc 1 133 0
 249 0028 0500A0E3 		mov	r0, #5
 250 002c FEFFFFEB 		bl	delay_ms
 134:fb/fb_ssd1783.c **** 	fb_ssd1783_send_cmdlist(ssd1783_initdata);
 251              		.loc 1 134 0
 252 0030 0C009FE5 		ldr	r0, .L10+8
 135:fb/fb_ssd1783.c **** }
 253              		.loc 1 135 0
 254 0034 04E09DE4 		ldr	lr, [sp], #4
 255              		.loc 1 134 0
 256 0038 FEFFFFEA 		b	fb_ssd1783_send_cmdlist
 257              	.L11:
 258              		.align	2
 259              	.L10:
 260 003c 6C000000 		.word	__FUNCTION__.1688
 261 0040 00000000 		.word	.LC0
 262 0044 00000000 		.word	ssd1783_initdata
 263              	.LFE17:
 265              		.section	.rodata
 266              		.align	2
 269              	__FUNCTION__.1713:
 270 007c 66625F73 		.ascii	"fb_ssd1783_flush\000"
 270      73643137 
 270      38335F66 
 270      6C757368 
 270      00
 273              	C.16.1734:
 274 008d 00       		.byte	0
 275 008e 25       		.byte	37
 276 008f 02       		.byte	2
 277 0090 00       		.byte	0
 278 0091 000000   		.section	.rodata.str1.4
 279 0017 00       		.align	2
 280              	.LC1:
 281 0018 25733A20 		.ascii	"%s: no damage\012\000"
 281      6E6F2064 
 281      616D6167 
 281      650A00
 282 0027 00       		.section	.text.fb_ssd1783_flush,"ax",%progbits
 283              		.align	2
 285              	fb_ssd1783_flush:
 286              	.LFB19:
 136:fb/fb_ssd1783.c **** 
 137:fb/fb_ssd1783.c **** /* somehow the palette is messed up, RRR seems to have the
 138:fb/fb_ssd1783.c ****    bits reversed!  R0 R1 R2 G G G B B ---> R2 R1 R0 G G G B B */
 139:fb/fb_ssd1783.c **** static uint8_t fix_rrr(uint8_t v){
 140:fb/fb_ssd1783.c **** 	return (v & 0x5f) | (v & 0x80) >> 2 | (v & 0x20) << 2;
 141:fb/fb_ssd1783.c **** }
 142:fb/fb_ssd1783.c **** 
 143:fb/fb_ssd1783.c **** static void
 144:fb/fb_ssd1783.c **** fb_ssd1783_flush(void){
 287              		.loc 1 144 0
 288              		@ args = 0, pretend = 0, frame = 24
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290              	.LVL5:
 291 0000 F0452DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 292              	.LCFI3:
 145:fb/fb_ssd1783.c **** 	int x,y;
 146:fb/fb_ssd1783.c **** 	uint8_t *p;
 147:fb/fb_ssd1783.c **** 	struct ssd1783_cmdlist prepare_disp_write_cmds[] = {
 148:fb/fb_ssd1783.c **** 		{ CMD,  0x15 },			 /*  set column address */
 149:fb/fb_ssd1783.c **** 		{ DATA, fb_rgb332->damage_x1 },
 150:fb/fb_ssd1783.c **** 		{ DATA, fb_rgb332->damage_x2-1 },
 151:fb/fb_ssd1783.c **** 		{ CMD,  0x75 },			 /*  set page address (Y) */
 152:fb/fb_ssd1783.c **** 		{ DATA, fb_rgb332->damage_y1 },
 153:fb/fb_ssd1783.c **** 		{ DATA, fb_rgb332->damage_y2-1 },
 154:fb/fb_ssd1783.c **** 		{ CMD,  0x5c },			 /* enter write display ram mode */
 155:fb/fb_ssd1783.c **** 		{ END,  0x00 }
 156:fb/fb_ssd1783.c **** 	};
 293              		.loc 1 156 0
 294 0004 78A19FE5 		ldr	sl, .L24
 295 0008 00809AE5 		ldr	r8, [sl, #0]
 296              		.loc 1 144 0
 297 000c 18D04DE2 		sub	sp, sp, #24
 298              	.LCFI4:
 299              	.LVL6:
 300              		.loc 1 156 0
 301 0010 1530A0E3 		mov	r3, #21
 302 0014 08C0D8E5 		ldrb	ip, [r8, #8]	@ zero_extendqisi2
 303 0018 0A40D8E5 		ldrb	r4, [r8, #10]	@ zero_extendqisi2
 304 001c 0460D8E5 		ldrb	r6, [r8, #4]	@ zero_extendqisi2
 305 0020 0670D8E5 		ldrb	r7, [r8, #6]	@ zero_extendqisi2
 306 0024 0330CDE5 		strb	r3, [sp, #3]
 307 0028 603083E2 		add	r3, r3, #96
 308 002c 0930CDE5 		strb	r3, [sp, #9]
 309 0030 5C30A0E3 		mov	r3, #92
 310 0034 01E0A0E3 		mov	lr, #1
 311 0038 0050A0E3 		mov	r5, #0
 312 003c 01C04CE2 		sub	ip, ip, #1
 157:fb/fb_ssd1783.c **** 	struct ssd1783_cmdlist nop[] = {
 158:fb/fb_ssd1783.c **** 		{ CMD, 0x25 }, // NOP command
 159:fb/fb_ssd1783.c **** 		{ END, 0x00 }
 160:fb/fb_ssd1783.c **** 	};
 313              		.loc 1 160 0
 314 0040 0420A0E3 		mov	r2, #4
 315              		.loc 1 156 0
 316 0044 0F30CDE5 		strb	r3, [sp, #15]
 317 0048 014044E2 		sub	r4, r4, #1
 318 004c 0230A0E3 		mov	r3, #2
 319              		.loc 1 160 0
 320 0050 12008DE2 		add	r0, sp, #18
 321 0054 2C119FE5 		ldr	r1, .L24+4
 322              		.loc 1 156 0
 323 0058 1030CDE5 		strb	r3, [sp, #16]
 324 005c 0560CDE5 		strb	r6, [sp, #5]
 325 0060 07C0CDE5 		strb	ip, [sp, #7]
 326 0064 0B70CDE5 		strb	r7, [sp, #11]
 327 0068 0CE0CDE5 		strb	lr, [sp, #12]
 328 006c 0D40CDE5 		strb	r4, [sp, #13]
 329 0070 1150CDE5 		strb	r5, [sp, #17]
 330 0074 0250CDE5 		strb	r5, [sp, #2]
 331 0078 04E0CDE5 		strb	lr, [sp, #4]
 332 007c 06E0CDE5 		strb	lr, [sp, #6]
 333 0080 0850CDE5 		strb	r5, [sp, #8]
 334 0084 0AE0CDE5 		strb	lr, [sp, #10]
 335 0088 0E50CDE5 		strb	r5, [sp, #14]
 336              		.loc 1 160 0
 337 008c FEFFFFEB 		bl	memcpy
 161:fb/fb_ssd1783.c **** 
 162:fb/fb_ssd1783.c **** 	/* If everything's clean, just return */
 163:fb/fb_ssd1783.c **** 	if(fb_rgb332->damage_x1 == fb_rgb332->damage_x2 ||
 338              		.loc 1 163 0
 339 0090 B420D8E1 		ldrh	r2, [r8, #4]
 340 0094 B830D8E1 		ldrh	r3, [r8, #8]
 341 0098 030052E1 		cmp	r2, r3
 342 009c 2A00000A 		beq	.L13
 343 00a0 BA20D8E1 		ldrh	r2, [r8, #10]
 344 00a4 B630D8E1 		ldrh	r3, [r8, #6]
 345 00a8 020053E1 		cmp	r3, r2
 346 00ac 2E00001A 		bne	.L15
 347              	.L13:
 164:fb/fb_ssd1783.c **** 		fb_rgb332->damage_y1 == fb_rgb332->damage_y2){
 165:fb/fb_ssd1783.c **** 			printf("%s: no damage\n",__FUNCTION__);
 348              		.loc 1 165 0
 349 00b0 D4109FE5 		ldr	r1, .L24+8
 350 00b4 D4009FE5 		ldr	r0, .L24+12
 351 00b8 FEFFFFEB 		bl	printf
 352 00bc 5D0000EA 		b	.L23
 353              	.L15:
 166:fb/fb_ssd1783.c **** 			return;
 167:fb/fb_ssd1783.c **** 	}
 168:fb/fb_ssd1783.c **** 
 169:fb/fb_ssd1783.c **** 	fb_ssd1783_send_cmdlist(prepare_disp_write_cmds);
 354              		.loc 1 169 0
 355 00c0 02008DE2 		add	r0, sp, #2
 356 00c4 FEFFFFEB 		bl	fb_ssd1783_send_cmdlist
 170:fb/fb_ssd1783.c **** 
 171:fb/fb_ssd1783.c **** 	for(y=fb_rgb332->damage_y1;y<fb_rgb332->damage_y2;y++){
 357              		.loc 1 171 0
 358 00c8 00309AE5 		ldr	r3, [sl, #0]
 359 00cc B670D3E1 		ldrh	r7, [r3, #6]
 360              	.LVL7:
 361 00d0 500000EA 		b	.L17
 362              	.LVL8:
 363              	.L18:
 172:fb/fb_ssd1783.c **** 		p = & fb_rgb332->mem[y * framebuffer->width]; // start of line
 364              		.loc 1 172 0
 365 00d4 B8309FE5 		ldr	r3, .L24+16
 366 00d8 003093E5 		ldr	r3, [r3, #0]
 367 00dc B422D3E1 		ldrh	r2, [r3, #36]
 368 00e0 003091E5 		ldr	r3, [r1, #0]
 369 00e4 923723E0 		mla	r3, r2, r7, r3
 370              	.LVL9:
 173:fb/fb_ssd1783.c **** 		p += fb_rgb332->damage_x1; // start of damage area
 371              		.loc 1 173 0
 372 00e8 B450D1E1 		ldrh	r5, [r1, #4]
 174:fb/fb_ssd1783.c **** 
 175:fb/fb_ssd1783.c **** 		for(x=fb_rgb332->damage_x1;x<fb_rgb332->damage_x2;x++){
 373              		.loc 1 175 0
 374 00ec 056083E0 		add	r6, r3, r5
 375 00f0 440000EA 		b	.L19
 376              	.LVL10:
 377              	.L20:
 378 00f4 01C056E5 		ldrb	ip, [r6, #-1]	@ zero_extendqisi2
 379              	.LBB5:
 176:fb/fb_ssd1783.c **** 			uint16_t data = 0x0100 | fix_rrr(*p++); // dummy data
 380              		.loc 1 176 0
 381 00f8 5FE00CE2 		and	lr, ip, #95
 382 00fc 80400CE2 		and	r4, ip, #128
 383 0100 24E18EE1 		orr	lr, lr, r4, lsr #2
 384 0104 20C00CE2 		and	ip, ip, #32
 385 0108 0CE18EE1 		orr	lr, lr, ip, asl #2
 386 010c 01EC8EE3 		orr	lr, lr, #256
 387 0110 B2E062E1 		strh	lr, [r2, #-2]!	@ movhi
 177:fb/fb_ssd1783.c **** 			uwire_xfer(SSD1783_DEV_ID, SSD1783_UWIRE_BITLEN,
 388              		.loc 1 177 0
 389 0114 FEFFFFEB 		bl	uwire_xfer
 390              	.LVL11:
 391              	.L19:
 392              	.LBE5:
 393              		.loc 1 175 0
 394 0118 64C09FE5 		ldr	ip, .L24
 395 011c 00C09CE5 		ldr	ip, [ip, #0]
 396 0120 B8C0DCE1 		ldrh	ip, [ip, #8]
 397              	.LBB6:
 398              		.loc 1 177 0
 399 0124 0000A0E3 		mov	r0, #0
 400              	.LBE6:
 401              		.loc 1 175 0
 402 0128 0C0055E1 		cmp	r5, ip
 403              	.LBB7:
 404              		.loc 1 176 0
 405 012c 18208DE2 		add	r2, sp, #24
 406              		.loc 1 177 0
 407 0130 0910A0E3 		mov	r1, #9
 408 0134 0030A0E1 		mov	r3, r0
 409              	.LVL12:
 410              	.LBE7:
 411              		.loc 1 175 0
 412 0138 015085E2 		add	r5, r5, #1
 413 013c 016086E2 		add	r6, r6, #1
 414 0140 3B0000BA 		blt	.L20
 415              		.loc 1 171 0
 416 0144 017087E2 		add	r7, r7, #1
 417              	.L17:
 418 0148 34409FE5 		ldr	r4, .L24
 419 014c 001094E5 		ldr	r1, [r4, #0]
 420 0150 BA30D1E1 		ldrh	r3, [r1, #10]
 421 0154 030057E1 		cmp	r7, r3
 422 0158 330000BA 		blt	.L18
 178:fb/fb_ssd1783.c **** 					&data, NULL);
 179:fb/fb_ssd1783.c **** 		}
 180:fb/fb_ssd1783.c **** 	}
 181:fb/fb_ssd1783.c **** 	fb_ssd1783_send_cmdlist(nop);
 423              		.loc 1 181 0
 424 015c 12008DE2 		add	r0, sp, #18
 425 0160 FEFFFFEB 		bl	fb_ssd1783_send_cmdlist
 182:fb/fb_ssd1783.c **** 
 183:fb/fb_ssd1783.c **** 	fb_rgb332->damage_x1 = fb_rgb332->damage_x2 = 0;
 426              		.loc 1 183 0
 427 0164 003094E5 		ldr	r3, [r4, #0]
 184:fb/fb_ssd1783.c **** 	fb_rgb332->damage_y1 = fb_rgb332->damage_y2 = 0;
 428              		.loc 1 184 0
 429 0168 0020A0E3 		mov	r2, #0	@ movhi
 430 016c B620C3E1 		strh	r2, [r3, #6]	@ movhi
 431              		.loc 1 183 0
 432 0170 B820C3E1 		strh	r2, [r3, #8]	@ movhi
 433 0174 B420C3E1 		strh	r2, [r3, #4]	@ movhi
 434              		.loc 1 184 0
 435 0178 BA20C3E1 		strh	r2, [r3, #10]	@ movhi
 436              	.L23:
 185:fb/fb_ssd1783.c **** }
 437              		.loc 1 185 0
 438 017c 18D08DE2 		add	sp, sp, #24
 439 0180 F085BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
 440              	.L25:
 441              		.align	2
 442              	.L24:
 443 0184 00000000 		.word	fb_rgb332
 444 0188 8D000000 		.word	C.16.1734
 445 018c 7C000000 		.word	__FUNCTION__.1713
 446 0190 18000000 		.word	.LC1
 447 0194 00000000 		.word	framebuffer
 448              	.LFE19:
 450              		.bss
 451              	fb_ssd1783_mem:
 452 0000 00000000 		.space	6566
 452      00000000 
 452      00000000 
 452      00000000 
 452      00000000 
 537              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fb_ssd1783.c
     /tmp/ccNx0WHF.s:15     .data:0000000000000000 fb_rgb332
     /tmp/ccNx0WHF.s:16     .data:0000000000000000 $d
     /tmp/ccNx0WHF.s:20     .data:0000000000000004 fb_ssd1783_rgb332
     /tmp/ccNx0WHF.s:451    .bss:0000000000000000 fb_ssd1783_mem
     /tmp/ccNx0WHF.s:27     .data:0000000000000010 framebuffer
     /tmp/ccNx0WHF.s:32     .data:0000000000000014 fb_ssd1783_framebuffer
     /tmp/ccNx0WHF.s:227    .text.fb_ssd1783_init:0000000000000000 fb_ssd1783_init
     /tmp/ccNx0WHF.s:285    .text.fb_ssd1783_flush:0000000000000000 fb_ssd1783_flush
     /tmp/ccNx0WHF.s:47     .rodata:0000000000000000 ssd1783_initdata
     /tmp/ccNx0WHF.s:159    .text.fb_ssd1783_send_cmdlist:0000000000000000 fb_ssd1783_send_cmdlist
     /tmp/ccNx0WHF.s:166    .text.fb_ssd1783_send_cmdlist:0000000000000000 $a
     /tmp/ccNx0WHF.s:218    .rodata:000000000000006c __FUNCTION__.1688
     /tmp/ccNx0WHF.s:233    .text.fb_ssd1783_init:0000000000000000 $a
     /tmp/ccNx0WHF.s:260    .text.fb_ssd1783_init:000000000000003c $d
     /tmp/ccNx0WHF.s:269    .rodata:000000000000007c __FUNCTION__.1713
     /tmp/ccNx0WHF.s:273    .rodata:000000000000008d C.16.1734
     /tmp/ccNx0WHF.s:291    .text.fb_ssd1783_flush:0000000000000000 $a
     /tmp/ccNx0WHF.s:443    .text.fb_ssd1783_flush:0000000000000184 $d

UNDEFINED SYMBOLS
fb_rgb332_clear
fb_rgb332_boxto
fb_rgb332_lineto
fb_rgb332_putstr
uwire_xfer
printf
calypso_reset_set
delay_ms
uwire_init
memcpy
