   1              		.file	"console.c"
   9              	.Ltext0:
  10              		.section	.text.cons_bind_uart,"ax",%progbits
  11              		.align	2
  12              		.global	cons_bind_uart
  14              	cons_bind_uart:
  15              	.LFB2:
  16              		.file 1 "lib/console.c"
   1:lib/console.c **** /* Ringbuffer based serial console layer, imported from OpenPCD */
   2:lib/console.c **** 
   3:lib/console.c **** /* (C) 2006-2010 by Harald Welte <laforge@gnumonks.org>
   4:lib/console.c ****  *
   5:lib/console.c ****  * All Rights Reserved
   6:lib/console.c ****  *
   7:lib/console.c ****  * This program is free software; you can redistribute it and/or modify
   8:lib/console.c ****  * it under the terms of the GNU General Public License as published by
   9:lib/console.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:lib/console.c ****  * (at your option) any later version.
  11:lib/console.c ****  *
  12:lib/console.c ****  * This program is distributed in the hope that it will be useful,
  13:lib/console.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:lib/console.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:lib/console.c ****  * GNU General Public License for more details.
  16:lib/console.c ****  *
  17:lib/console.c ****  * You should have received a copy of the GNU General Public License along
  18:lib/console.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:lib/console.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:lib/console.c ****  *
  21:lib/console.c ****  */
  22:lib/console.c **** 
  23:lib/console.c **** #include <stdint.h>
  24:lib/console.c **** #include <string.h>
  25:lib/console.c **** #include <console.h>
  26:lib/console.c **** #include <uart.h>
  27:lib/console.c **** 
  28:lib/console.c **** #include <asm/system.h>
  29:lib/console.c **** 
  30:lib/console.c **** struct cons {
  31:lib/console.c **** 	char buf[CONS_RB_SIZE];
  32:lib/console.c **** 	char *next_inbyte;
  33:lib/console.c **** 	char *next_outbyte;
  34:lib/console.c **** 	int initialized;
  35:lib/console.c **** 	int uart_id;
  36:lib/console.c **** };
  37:lib/console.c **** static struct cons cons;
  38:lib/console.c **** 
  39:lib/console.c **** void cons_bind_uart(int uart)
  40:lib/console.c **** {
  17              		.loc 1 40 0
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
  41:lib/console.c **** 	cons.uart_id = uart;
  22              		.loc 1 41 0
  23 0000 08209FE5 		ldr	r2, .L3
  24 0004 08309FE5 		ldr	r3, .L3+4
  25              		.loc 1 40 0
  26              		@ lr needed for prologue
  27              		.loc 1 41 0
  28 0008 030082E7 		str	r0, [r2, r3]
  42:lib/console.c **** }
  29              		.loc 1 42 0
  30 000c 1EFF2FE1 		bx	lr
  31              	.L4:
  32              		.align	2
  33              	.L3:
  34 0010 00000000 		.word	cons
  35 0014 0C100000 		.word	4108
  36              	.LFE2:
  38              		.section	.text.cons_get_uart,"ax",%progbits
  39              		.align	2
  40              		.global	cons_get_uart
  42              	cons_get_uart:
  43              	.LFB3:
  43:lib/console.c **** 
  44:lib/console.c **** int cons_get_uart(void)
  45:lib/console.c **** {
  44              		.loc 1 45 0
  45              		@ args = 0, pretend = 0, frame = 0
  46              		@ frame_needed = 0, uses_anonymous_args = 0
  47              		@ link register save eliminated.
  48              	.LVL1:
  46:lib/console.c **** 	return cons.uart_id;
  47:lib/console.c **** }
  49              		.loc 1 47 0
  50 0000 08209FE5 		ldr	r2, .L7
  51 0004 08309FE5 		ldr	r3, .L7+4
  52 0008 030092E7 		ldr	r0, [r2, r3]
  53              		.loc 1 45 0
  54              		@ lr needed for prologue
  55              		.loc 1 47 0
  56 000c 1EFF2FE1 		bx	lr
  57              	.L8:
  58              		.align	2
  59              	.L7:
  60 0010 00000000 		.word	cons
  61 0014 0C100000 		.word	4108
  62              	.LFE3:
  64              		.section	.text.cons_init,"ax",%progbits
  65              		.align	2
  66              		.global	cons_init
  68              	cons_init:
  69              	.LFB4:
  48:lib/console.c **** 
  49:lib/console.c **** void cons_init(void)
  50:lib/console.c **** {
  70              		.loc 1 50 0
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              	.LVL2:
  74 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
  75              	.LCFI0:
  51:lib/console.c **** 	memset(cons.buf, 0, sizeof(cons.buf));
  76              		.loc 1 51 0
  77 0004 2C409FE5 		ldr	r4, .L11
  78 0008 015AA0E3 		mov	r5, #4096
  79 000c 0520A0E1 		mov	r2, r5
  80 0010 0400A0E1 		mov	r0, r4
  81 0014 0010A0E3 		mov	r1, #0
  82 0018 FEFFFFEB 		bl	memset
  52:lib/console.c **** 	cons.next_inbyte = &cons.buf[0];
  53:lib/console.c **** 	cons.next_outbyte = &cons.buf[0];
  54:lib/console.c **** 	cons.initialized = 1;
  83              		.loc 1 54 0
  84 001c 18309FE5 		ldr	r3, .L11+4
  85 0020 0120A0E3 		mov	r2, #1
  86 0024 032084E7 		str	r2, [r4, r3]
  87              		.loc 1 53 0
  88 0028 043043E2 		sub	r3, r3, #4
  89              		.loc 1 52 0
  90 002c 054084E7 		str	r4, [r4, r5]
  91              		.loc 1 53 0
  92 0030 034084E7 		str	r4, [r4, r3]
  55:lib/console.c **** }
  93              		.loc 1 55 0
  94 0034 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
  95              	.L12:
  96              		.align	2
  97              	.L11:
  98 0038 00000000 		.word	cons
  99 003c 08100000 		.word	4104
 100              	.LFE4:
 102              		.section	.text.cons_rb_pull,"ax",%progbits
 103              		.align	2
 105              	cons_rb_pull:
 106              	.LFB6:
  56:lib/console.c **** 
  57:lib/console.c **** /* determine how many bytes are left in the ringbuffer without overwriting
  58:lib/console.c ****    bytes that haven't been written to the console yet */
  59:lib/console.c **** static int __cons_rb_space(void)
  60:lib/console.c **** {
  61:lib/console.c **** 	if (cons.next_inbyte == cons.next_outbyte)
  62:lib/console.c **** 		return sizeof(cons.buf)-1;
  63:lib/console.c **** 	else if (cons.next_outbyte > cons.next_inbyte)
  64:lib/console.c **** 		return (cons.next_outbyte - cons.next_inbyte) -1;
  65:lib/console.c **** 	else
  66:lib/console.c **** 		return sizeof(cons.buf) - 1 - (cons.next_inbyte - cons.next_outbyte);
  67:lib/console.c **** }
  68:lib/console.c **** 
  69:lib/console.c **** /* pull one char out of debug ring buffer */
  70:lib/console.c **** static int cons_rb_pull(char *ret)
  71:lib/console.c **** {
 107              		.loc 1 71 0
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              	.LVL3:
 111 0000 10402DE9 		stmfd	sp!, {r4, lr}
 112              	.LCFI1:
 113              	.LBB2:
  72:lib/console.c **** 	unsigned long flags;
  73:lib/console.c **** 
  74:lib/console.c **** 	local_irq_save(flags);
 114              		.loc 1 74 0
 115 0004 00C00FE1 		mrs	ip, cpsr		@ local_irq_save
 116 0008 80308CE3 		orr	r3, ip, #128
 117 000c 03F021E1 		msr	cpsr_c, r3
 118              	.LVL4:
 119              	.LBE2:
  75:lib/console.c **** 
  76:lib/console.c **** 	if (cons.next_outbyte == cons.next_inbyte) {
 120              		.loc 1 76 0
 121 0010 4C209FE5 		ldr	r2, .L20
 122 0014 4CE09FE5 		ldr	lr, .L20+4
 123 0018 013AA0E3 		mov	r3, #4096
 124              	.LVL5:
 125 001c 033092E7 		ldr	r3, [r2, r3]
 126 0020 0E1092E7 		ldr	r1, [r2, lr]
 127 0024 030051E1 		cmp	r1, r3
  77:lib/console.c **** 		local_irq_restore(flags);
  78:lib/console.c **** 		return -1;
  79:lib/console.c **** 	}
  80:lib/console.c **** 
  81:lib/console.c **** 	*ret = *cons.next_outbyte;
  82:lib/console.c **** 
  83:lib/console.c **** 	cons.next_outbyte++;
  84:lib/console.c **** 	if (cons.next_outbyte >= &cons.buf[0]+sizeof(cons.buf)) {
 128              		.loc 1 84 0
 129 0028 014A82E2 		add	r4, r2, #4096
 130              		.loc 1 76 0
 131 002c 0D00001A 		bne	.L14
 132              		.loc 1 77 0
 133 0030 0CF021E1 		msr	cpsr_c, ip		@ local_irq_restore
 134              	
 135 0034 0000E0E3 		mvn	r0, #0
 136              	.LVL6:
 137 0038 1080BDE8 		ldmfd	sp!, {r4, pc}
 138              	.LVL7:
 139              	.L14:
 140              		.loc 1 81 0
 141 003c 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 142 0040 0030C0E5 		strb	r3, [r0, #0]
 143              		.loc 1 83 0
 144 0044 0E3092E7 		ldr	r3, [r2, lr]
 145 0048 013083E2 		add	r3, r3, #1
 146              		.loc 1 84 0
 147 004c 040053E1 		cmp	r3, r4
 148              		.loc 1 83 0
 149 0050 0E3082E7 		str	r3, [r2, lr]
  85:lib/console.c **** 		cons.next_outbyte = &cons.buf[0];
 150              		.loc 1 85 0
 151 0054 0E208227 		strcs	r2, [r2, lr]
  86:lib/console.c **** 	}
  87:lib/console.c **** #if 0
  88:lib/console.c **** 	 else if (cons.next_outbyte > &cons.buf[0]+sizeof(cons.buf)) {
  89:lib/console.c **** 		cons.next_outbyte -= sizeof(cons.buf);
  90:lib/console.c **** 	}
  91:lib/console.c **** #endif
  92:lib/console.c **** 
  93:lib/console.c **** 	local_irq_restore(flags);
 152              		.loc 1 93 0
 153 0058 0CF021E1 		msr	cpsr_c, ip		@ local_irq_restore
 154              	
 155 005c 0000A0E3 		mov	r0, #0
 156              	.LVL8:
  94:lib/console.c **** 
  95:lib/console.c **** 	return 0;
  96:lib/console.c **** }
 157              		.loc 1 96 0
 158 0060 1080BDE8 		ldmfd	sp!, {r4, pc}
 159              	.L21:
 160              		.align	2
 161              	.L20:
 162 0064 00000000 		.word	cons
 163 0068 04100000 		.word	4100
 164              	.LFE6:
 166              		.section	.text.cons_rb_flush,"ax",%progbits
 167              		.align	2
 168              		.global	cons_rb_flush
 170              	cons_rb_flush:
 171              	.LFB9:
  97:lib/console.c **** 
  98:lib/console.c **** /* returns if everything was flushed (1) or if there's more to flush (0) */
  99:lib/console.c **** static void __rb_flush_wait(void)
 100:lib/console.c **** {
 101:lib/console.c **** 	char ch;
 102:lib/console.c **** 	while (cons_rb_pull(&ch) >= 0)
 103:lib/console.c **** 		uart_putchar_wait(cons.uart_id, ch);
 104:lib/console.c **** }
 105:lib/console.c **** 
 106:lib/console.c **** /* returns if everything was flushed (1) or if there's more to flush (0) */
 107:lib/console.c **** static int __rb_flush(void)
 108:lib/console.c **** {
 109:lib/console.c **** 	while (!uart_tx_busy(cons.uart_id)) {
 110:lib/console.c **** 		char ch;
 111:lib/console.c **** 		if (cons_rb_pull(&ch) < 0) {
 112:lib/console.c **** 			/* no more data to write, disable interest in Tx FIFO interrupts */
 113:lib/console.c **** 			return 1;
 114:lib/console.c **** 		}
 115:lib/console.c **** 		uart_putchar_nb(cons.uart_id, ch);
 116:lib/console.c **** 	}
 117:lib/console.c **** 
 118:lib/console.c **** 	/* if we reach here, UART Tx FIFO is busy again */
 119:lib/console.c **** 	return 0;
 120:lib/console.c **** }
 121:lib/console.c **** 
 122:lib/console.c **** /* flush pending data from debug ring buffer to serial port */
 123:lib/console.c **** int cons_rb_flush(void)
 124:lib/console.c **** {
 172              		.loc 1 124 0
 173              		@ args = 0, pretend = 0, frame = 4
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL9:
 176 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 177              	.LCFI2:
 178 0004 04D04DE2 		sub	sp, sp, #4
 179              	.LCFI3:
 180              	.LVL10:
 181 0008 080000EA 		b	.L23
 182              	.LVL11:
 183              	.L24:
 184              	.LBB3:
 185              	.LBB4:
 186              	.LBB5:
 187              		.loc 1 111 0
 188 000c FEFFFFEB 		bl	cons_rb_pull
 189 0010 000050E3 		cmp	r0, #0
 190 0014 0100A0B3 		movlt	r0, #1
 191 0018 100000BA 		blt	.L27
 192              	.L25:
 193              		.loc 1 115 0
 194 001c 0400D5E7 		ldrb	r0, [r5, r4]	@ zero_extendqisi2
 195 0020 0310DDE5 		ldrb	r1, [sp, #3]	@ zero_extendqisi2
 196 0024 FEFFFFEB 		bl	uart_putchar_nb
 197              	.L23:
 198              	.LBE5:
 199              		.loc 1 109 0
 200 0028 20509FE5 		ldr	r5, .L30
 201 002c 20409FE5 		ldr	r4, .L30+4
 202 0030 0400D5E7 		ldrb	r0, [r5, r4]	@ zero_extendqisi2
 203 0034 FEFFFFEB 		bl	uart_tx_busy
 204 0038 000050E3 		cmp	r0, #0
 205              	.LBB6:
 206              		.loc 1 111 0
 207 003c 03008DE2 		add	r0, sp, #3
 208              	.LBE6:
 209              		.loc 1 109 0
 210 0040 0100000A 		beq	.L24
 211 0044 0000A0E3 		mov	r0, #0
 212              	.L27:
 213              	.LBE4:
 214              	.LBE3:
 125:lib/console.c **** 	return __rb_flush();
 126:lib/console.c **** }
 215              		.loc 1 126 0
 216 0048 04D08DE2 		add	sp, sp, #4
 217 004c 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 218              	.L31:
 219              		.align	2
 220              	.L30:
 221 0050 00000000 		.word	cons
 222 0054 0C100000 		.word	4108
 223              	.LFE9:
 225              		.section	.text.__cons_rb_append,"ax",%progbits
 226              		.align	2
 228              	__cons_rb_append:
 229              	.LFB10:
 127:lib/console.c **** 
 128:lib/console.c **** /* Append bytes to ring buffer, not more than we have left! */
 129:lib/console.c **** static void __cons_rb_append(const char *data, int len)
 130:lib/console.c **** {
 230              		.loc 1 130 0
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              	.LVL12:
 234 0000 F0452DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 235              	.LCFI4:
 131:lib/console.c **** 	if (cons.next_inbyte + len >= &cons.buf[0]+sizeof(cons.buf)) {
 236              		.loc 1 131 0
 237 0004 5C809FE5 		ldr	r8, .L36
 238 0008 01AAA0E3 		mov	sl, #4096
 239 000c 0A3098E7 		ldr	r3, [r8, sl]
 240 0010 0A7088E0 		add	r7, r8, sl
 241 0014 012083E0 		add	r2, r3, r1
 242              		.loc 1 130 0
 243 0018 0040A0E1 		mov	r4, r0
 244              	.LBB7:
 132:lib/console.c **** 		int before_tail = (&cons.buf[0]+sizeof(cons.buf)) - cons.next_inbyte;
 245              		.loc 1 132 0
 246 001c 075063E0 		rsb	r5, r3, r7
 247              	.LVL13:
 248              	.LBE7:
 249              		.loc 1 131 0
 250 0020 070052E1 		cmp	r2, r7
 251              		.loc 1 130 0
 252 0024 0160A0E1 		mov	r6, r1
 253              	.LBB8:
 133:lib/console.c **** 		/* copy the first part before we wrap */
 134:lib/console.c **** 		memcpy(cons.next_inbyte, data, before_tail);
 254              		.loc 1 134 0
 255 0028 0520A0E1 		mov	r2, r5
 256 002c 0300A0E1 		mov	r0, r3
 257              	.LVL14:
 258 0030 0410A0E1 		mov	r1, r4
 259              	.LVL15:
 260              	.LBE8:
 261              		.loc 1 131 0
 262 0034 1000003A 		bcc	.L33
 263              	.LVL16:
 264              	.LBB9:
 265              		.loc 1 134 0
 266 0038 FEFFFFEB 		bl	memcpy
 267              	.LVL17:
 135:lib/console.c **** 		data += before_tail;
 136:lib/console.c **** 		len -= before_tail;
 137:lib/console.c **** 		/* reset the buffer */
 138:lib/console.c **** 		cons.next_inbyte = &cons.buf[0];
 268              		.loc 1 138 0
 269 003c 0A8088E7 		str	r8, [r8, sl]
 270              		.loc 1 136 0
 271 0040 066065E0 		rsb	r6, r5, r6
 272              		.loc 1 135 0
 273 0044 054084E0 		add	r4, r4, r5
 274              	.LVL18:
 275              	.L33:
 276              	.LBE9:
 139:lib/console.c **** 	}
 140:lib/console.c **** 	memcpy(cons.next_inbyte, data, len);
 277              		.loc 1 140 0
 278 0048 0410A0E1 		mov	r1, r4
 279 004c 000097E5 		ldr	r0, [r7, #0]
 280 0050 0620A0E1 		mov	r2, r6
 281 0054 FEFFFFEB 		bl	memcpy
 141:lib/console.c **** 	cons.next_inbyte += len;
 282              		.loc 1 141 0
 283 0058 003097E5 		ldr	r3, [r7, #0]
 284 005c 063083E0 		add	r3, r3, r6
 285 0060 0A3088E7 		str	r3, [r8, sl]
 142:lib/console.c **** }
 286              		.loc 1 142 0
 287 0064 F085BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
 288              	.L37:
 289              		.align	2
 290              	.L36:
 291 0068 00000000 		.word	cons
 292              	.LFE10:
 294              		.section	.text.cons_rb_append,"ax",%progbits
 295              		.align	2
 296              		.global	cons_rb_append
 298              	cons_rb_append:
 299              	.LFB11:
 143:lib/console.c **** 
 144:lib/console.c **** /* append bytes to the ringbuffer, do one wrap */
 145:lib/console.c **** int cons_rb_append(const char *data, int len)
 146:lib/console.c **** {
 300              		.loc 1 146 0
 301              		@ args = 0, pretend = 0, frame = 4
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              	.LVL19:
 304 0000 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 305              	.LCFI5:
 147:lib/console.c **** 	unsigned long flags;
 148:lib/console.c **** 	int bytes_left;
 149:lib/console.c **** 	const char *data_cur;
 150:lib/console.c **** 
 151:lib/console.c **** 	/* we will never be able to write more than the console buffer */
 152:lib/console.c **** 	if (len > (int) sizeof(cons.buf))
 306              		.loc 1 152 0
 307 0004 010A51E3 		cmp	r1, #4096
 308 0008 0150A0B1 		movlt	r5, r1
 309 000c 015AA0A3 		movge	r5, #4096
 310              		.loc 1 146 0
 311 0010 04D04DE2 		sub	sp, sp, #4
 312              	.LCFI6:
 313              	.LVL20:
 314              		.loc 1 146 0
 315 0014 0060A0E1 		mov	r6, r0
 316              	.LBB10:
 153:lib/console.c **** 		len = sizeof(cons.buf);
 154:lib/console.c **** 
 155:lib/console.c **** 	local_irq_save(flags);
 317              		.loc 1 155 0
 318 0018 00700FE1 		mrs	r7, cpsr		@ local_irq_save
 319 001c 803087E3 		orr	r3, r7, #128
 320 0020 03F021E1 		msr	cpsr_c, r3
 321              	.LVL21:
 322              	.LBE10:
 323              	.LBB11:
 324              	.LBB12:
 325              		.loc 1 61 0
 326 0024 A8209FE5 		ldr	r2, .L53
 327 0028 A8309FE5 		ldr	r3, .L53+4
 328              	.LVL22:
 329 002c 031092E7 		ldr	r1, [r2, r3]
 330              	.LVL23:
 331 0030 013AA0E3 		mov	r3, #4096
 332 0034 033092E7 		ldr	r3, [r2, r3]
 333 0038 010053E1 		cmp	r3, r1
 334 003c 98409F05 		ldreq	r4, .L53+8
 335              	.LVL24:
 336 0040 1500000A 		beq	.L43
 337              	.LVL25:
 338              		.loc 1 63 0
 339 0044 030051E1 		cmp	r1, r3
 340              		.loc 1 66 0
 341 0048 03306190 		rsbls	r3, r1, r3
 342              		.loc 1 64 0
 343 004c 01306380 		rsbhi	r3, r3, r1
 344              		.loc 1 66 0
 345 0050 FF4E6392 		rsbls	r4, r3, #4080
 346              		.loc 1 64 0
 347 0054 01404382 		subhi	r4, r3, #1
 348              		.loc 1 66 0
 349 0058 0F408492 		addls	r4, r4, #15
 350              	.L43:
 351              	.LBE12:
 352              	.LBE11:
 156:lib/console.c **** 
 157:lib/console.c **** 	bytes_left = __cons_rb_space();
 158:lib/console.c **** 	data_cur = data;
 159:lib/console.c **** 
 160:lib/console.c **** 	if (len > bytes_left) {
 353              		.loc 1 160 0
 354 005c 040055E1 		cmp	r5, r4
 355 0060 0600A0D1 		movle	r0, r6
 356              	.LVL26:
 357 0064 270000DA 		ble	.L48
 161:lib/console.c **** 		/* append what we can */
 162:lib/console.c **** 		__cons_rb_append(data_cur, bytes_left);
 358              		.loc 1 162 0
 359 0068 0600A0E1 		mov	r0, r6
 360              	.LVL27:
 361 006c 0410A0E1 		mov	r1, r4
 362 0070 FEFFFFEB 		bl	__cons_rb_append
 363 0074 210000EA 		b	.L49
 364              	.LVL28:
 365              	.L50:
 366              	.LBB13:
 367              	.LBB14:
 368              		.loc 1 103 0
 369 0078 54209FE5 		ldr	r2, .L53
 370 007c 5C309FE5 		ldr	r3, .L53+12
 371 0080 0310DDE5 		ldrb	r1, [sp, #3]	@ zero_extendqisi2
 372 0084 0300D2E7 		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 373 0088 FEFFFFEB 		bl	uart_putchar_wait
 374              	.L49:
 375              		.loc 1 102 0
 376 008c 03008DE2 		add	r0, sp, #3
 377 0090 FEFFFFEB 		bl	cons_rb_pull
 378 0094 000050E3 		cmp	r0, #0
 379 0098 1C0000AA 		bge	.L50
 380              	.LBE14:
 381              	.LBE13:
 163:lib/console.c **** 		/* busy-wait for all characters to be transmitted */
 164:lib/console.c **** 		__rb_flush_wait();
 165:lib/console.c **** 		/* fill it with the remaining bytes */
 166:lib/console.c **** 		len -= bytes_left;
 167:lib/console.c **** 		data_cur += bytes_left;
 382              		.loc 1 167 0
 383 009c 040086E0 		add	r0, r6, r4
 384              	.LVL29:
 385              		.loc 1 166 0
 386 00a0 055064E0 		rsb	r5, r4, r5
 387              	.L48:
 168:lib/console.c **** 	}
 169:lib/console.c **** 	__cons_rb_append(data_cur, len);
 388              		.loc 1 169 0
 389 00a4 0510A0E1 		mov	r1, r5
 390 00a8 FEFFFFEB 		bl	__cons_rb_append
 391              	.LVL30:
 170:lib/console.c **** 
 171:lib/console.c **** 	/* we want to get Tx FIFO interrupts */
 172:lib/console.c **** 	uart_irq_enable(cons.uart_id, UART_IRQ_TX_EMPTY, 1);
 392              		.loc 1 172 0
 393 00ac 2C309FE5 		ldr	r3, .L53+12
 394 00b0 1C209FE5 		ldr	r2, .L53
 395 00b4 0010A0E3 		mov	r1, #0
 396 00b8 0300D2E7 		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 397 00bc 0120A0E3 		mov	r2, #1
 398 00c0 FEFFFFEB 		bl	uart_irq_enable
 173:lib/console.c **** 
 174:lib/console.c **** 	local_irq_restore(flags);
 399              		.loc 1 174 0
 400 00c4 07F021E1 		msr	cpsr_c, r7		@ local_irq_restore
 401              	
 175:lib/console.c **** 
 176:lib/console.c **** 	return len;
 177:lib/console.c **** }
 402              		.loc 1 177 0
 403 00c8 0500A0E1 		mov	r0, r5
 404 00cc 04D08DE2 		add	sp, sp, #4
 405 00d0 F080BDE8 		ldmfd	sp!, {r4, r5, r6, r7, pc}
 406              	.L54:
 407              		.align	2
 408              	.L53:
 409 00d4 00000000 		.word	cons
 410 00d8 04100000 		.word	4100
 411 00dc FF0F0000 		.word	4095
 412 00e0 0C100000 		.word	4108
 413              	.LFE11:
 415              		.section	.text.cons_puts,"ax",%progbits
 416              		.align	2
 417              		.global	cons_puts
 419              	cons_puts:
 420              	.LFB12:
 178:lib/console.c **** 
 179:lib/console.c **** int cons_puts(const char *s)
 180:lib/console.c **** {
 421              		.loc 1 180 0
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424              	.LVL31:
 425 0000 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 426              	.LCFI7:
 181:lib/console.c **** 	if (cons.initialized) {
 427              		.loc 1 181 0
 428 0004 58209FE5 		ldr	r2, .L63
 429 0008 58309FE5 		ldr	r3, .L63+4
 430 000c 034092E7 		ldr	r4, [r2, r3]
 431 0010 000054E3 		cmp	r4, #0
 432              		.loc 1 180 0
 433 0014 0060A0E1 		mov	r6, r0
 434              		.loc 1 181 0
 435 0018 0A00000A 		beq	.L56
 436              	.LVL32:
 182:lib/console.c **** 		return cons_rb_append(s, strlen(s));
 437              		.loc 1 182 0
 438 001c FEFFFFEB 		bl	strlen
 439 0020 0010A0E1 		mov	r1, r0
 440 0024 0600A0E1 		mov	r0, r6
 183:lib/console.c **** 	} else {
 184:lib/console.c **** 		/* if the console is not active yet, we need to fall back */
 185:lib/console.c **** 		int i = strlen(s);
 186:lib/console.c **** 		while (i--)
 187:lib/console.c **** 			uart_putchar_wait(cons.uart_id, *s++);
 188:lib/console.c **** 		return i;
 189:lib/console.c **** 	}
 190:lib/console.c **** }
 441              		.loc 1 190 0
 442 0028 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 443              		.loc 1 182 0
 444 002c FEFFFFEA 		b	cons_rb_append
 445              	.LVL33:
 446              	.L56:
 447              	.LBB15:
 448              		.loc 1 185 0
 449 0030 FEFFFFEB 		bl	strlen
 450 0034 0050A0E1 		mov	r5, r0
 451 0038 130000EA 		b	.L58
 452              	.L59:
 453              		.loc 1 187 0
 454 003c 20209FE5 		ldr	r2, .L63
 455 0040 24309FE5 		ldr	r3, .L63+8
 456 0044 0610D4E7 		ldrb	r1, [r4, r6]	@ zero_extendqisi2
 457 0048 0300D2E7 		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 458 004c 014084E2 		add	r4, r4, #1
 459 0050 FEFFFFEB 		bl	uart_putchar_wait
 460              	.L58:
 461              		.loc 1 186 0
 462 0054 050054E1 		cmp	r4, r5
 463 0058 0D00001A 		bne	.L59
 464              	.LBE15:
 465              		.loc 1 190 0
 466 005c 0000E0E3 		mvn	r0, #0
 467 0060 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 468              	.L64:
 469              		.align	2
 470              	.L63:
 471 0064 00000000 		.word	cons
 472 0068 08100000 		.word	4104
 473 006c 0C100000 		.word	4108
 474              	.LFE12:
 476              		.section	.text.cons_putchar,"ax",%progbits
 477              		.align	2
 478              		.global	cons_putchar
 480              	cons_putchar:
 481              	.LFB13:
 191:lib/console.c **** 
 192:lib/console.c **** int cons_putchar(char c)
 193:lib/console.c **** {
 482              		.loc 1 193 0
 483              		@ args = 0, pretend = 0, frame = 4
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485              	.LVL34:
 486 0000 10402DE9 		stmfd	sp!, {r4, lr}
 487              	.LCFI8:
 194:lib/console.c **** 	if (cons.initialized)
 488              		.loc 1 194 0
 489 0004 40209FE5 		ldr	r2, .L70
 490 0008 40309FE5 		ldr	r3, .L70+4
 491 000c 034092E7 		ldr	r4, [r2, r3]
 492              		.loc 1 193 0
 493 0010 04D04DE2 		sub	sp, sp, #4
 494              	.LCFI9:
 495              	.LVL35:
 496              		.loc 1 194 0
 497 0014 000054E3 		cmp	r4, #0
 498              		.loc 1 193 0
 499 0018 0000CDE5 		strb	r0, [sp, #0]
 195:lib/console.c **** 		return cons_rb_append(&c, 1);
 500              		.loc 1 195 0
 501 001c 0110A0E3 		mov	r1, #1
 502 0020 0D00A0E1 		mov	r0, sp
 503              	.LVL36:
 504              		.loc 1 194 0
 505 0024 0A00000A 		beq	.L66
 506              		.loc 1 195 0
 507 0028 FEFFFFEB 		bl	cons_rb_append
 508 002c 0F0000EA 		b	.L68
 509              	.L66:
 196:lib/console.c **** 	else {
 197:lib/console.c **** 		/* if the console is not active yet, we need to fall back */
 198:lib/console.c **** 		uart_putchar_wait(cons.uart_id, c);
 510              		.loc 1 198 0
 511 0030 1C309FE5 		ldr	r3, .L70+8
 512 0034 0010DDE5 		ldrb	r1, [sp, #0]	@ zero_extendqisi2
 513 0038 0300D2E7 		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 514 003c FEFFFFEB 		bl	uart_putchar_wait
 515 0040 0400A0E1 		mov	r0, r4
 516              	.L68:
 199:lib/console.c **** 		return 0;
 200:lib/console.c **** 	}
 201:lib/console.c **** }
 517              		.loc 1 201 0
 518 0044 04D08DE2 		add	sp, sp, #4
 519 0048 1080BDE8 		ldmfd	sp!, {r4, pc}
 520              	.L71:
 521              		.align	2
 522              	.L70:
 523 004c 00000000 		.word	cons
 524 0050 08100000 		.word	4104
 525 0054 0C100000 		.word	4108
 526              	.LFE13:
 528              		.bss
 529              		.align	2
 530              	cons:
 531 0000 00000000 		.space	4112
 531      00000000 
 531      00000000 
 531      00000000 
 531      00000000 
 712              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/cciYTbTo.s:14     .text.cons_bind_uart:0000000000000000 cons_bind_uart
     /tmp/cciYTbTo.s:23     .text.cons_bind_uart:0000000000000000 $a
     /tmp/cciYTbTo.s:34     .text.cons_bind_uart:0000000000000010 $d
     /tmp/cciYTbTo.s:530    .bss:0000000000000000 cons
     /tmp/cciYTbTo.s:42     .text.cons_get_uart:0000000000000000 cons_get_uart
     /tmp/cciYTbTo.s:50     .text.cons_get_uart:0000000000000000 $a
     /tmp/cciYTbTo.s:60     .text.cons_get_uart:0000000000000010 $d
     /tmp/cciYTbTo.s:68     .text.cons_init:0000000000000000 cons_init
     /tmp/cciYTbTo.s:74     .text.cons_init:0000000000000000 $a
     /tmp/cciYTbTo.s:98     .text.cons_init:0000000000000038 $d
     /tmp/cciYTbTo.s:105    .text.cons_rb_pull:0000000000000000 cons_rb_pull
     /tmp/cciYTbTo.s:111    .text.cons_rb_pull:0000000000000000 $a
     /tmp/cciYTbTo.s:162    .text.cons_rb_pull:0000000000000064 $d
     /tmp/cciYTbTo.s:170    .text.cons_rb_flush:0000000000000000 cons_rb_flush
     /tmp/cciYTbTo.s:176    .text.cons_rb_flush:0000000000000000 $a
     /tmp/cciYTbTo.s:221    .text.cons_rb_flush:0000000000000050 $d
     /tmp/cciYTbTo.s:228    .text.__cons_rb_append:0000000000000000 __cons_rb_append
     /tmp/cciYTbTo.s:234    .text.__cons_rb_append:0000000000000000 $a
     /tmp/cciYTbTo.s:291    .text.__cons_rb_append:0000000000000068 $d
     /tmp/cciYTbTo.s:298    .text.cons_rb_append:0000000000000000 cons_rb_append
     /tmp/cciYTbTo.s:304    .text.cons_rb_append:0000000000000000 $a
     /tmp/cciYTbTo.s:409    .text.cons_rb_append:00000000000000d4 $d
     /tmp/cciYTbTo.s:419    .text.cons_puts:0000000000000000 cons_puts
     /tmp/cciYTbTo.s:425    .text.cons_puts:0000000000000000 $a
     /tmp/cciYTbTo.s:471    .text.cons_puts:0000000000000064 $d
     /tmp/cciYTbTo.s:480    .text.cons_putchar:0000000000000000 cons_putchar
     /tmp/cciYTbTo.s:486    .text.cons_putchar:0000000000000000 $a
     /tmp/cciYTbTo.s:523    .text.cons_putchar:000000000000004c $d

UNDEFINED SYMBOLS
memset
uart_putchar_nb
uart_tx_busy
memcpy
uart_putchar_wait
uart_irq_enable
strlen
