   1              	# 1 "lib/lib1funcs.S"
   2              	# 1 "<built-in>"
   1              	/*
   0              	
   0              	
   2              	 * linux/arch/arm/lib/lib1funcs.S: Optimized ARM division routines
   3              	 *
   4              	 * Author: Nicolas Pitre <nico@cam.org>
   5              	 *   - contributed to gcc-3.4 on Sep 30, 2003
   6              	 *   - adapted for the Linux kernel on Oct 2, 2003
   7              	 */
   8              	
   9              	/* Copyright 1995, 1996, 1998, 1999, 2000, 2003 Free Software Foundation, Inc.
  10              	
  11              	This file is free software; you can redistribute it and/or modify it
  12              	under the terms of the GNU General Public License as published by the
  13              	Free Software Foundation; either version 2, or (at your option) any
  14              	later version.
  15              	
  16              	In addition to the permissions in the GNU General Public License, the
  17              	Free Software Foundation gives you unlimited permission to link the
  18              	compiled version of this file into combinations with other programs,
  19              	and to distribute those combinations without any restriction coming
  20              	from the use of this file.  (The General Public License restrictions
  21              	do apply in other respects; for example, they cover modification of
  22              	the file, and distribution when not linked into a combine
  23              	executable.)
  24              	
  25              	This file is distributed in the hope that it will be useful, but
  26              	WITHOUT ANY WARRANTY; without even the implied warranty of
  27              	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  28              	General Public License for more details.
  29              	
  30              	You should have received a copy of the GNU General Public License
  31              	along with this program; see the file COPYING.  If not, write to
  32              	the Free Software Foundation, 59 Temple Place - Suite 330,
  33              	Boston, MA 02111-1307, USA.  */
  34              	
  35              	
  36              	#include <asm/linkage.h>
   1              	#ifndef __ASM_LINKAGE_H
   2              	#define __ASM_LINKAGE_H
   3              	
   4              	/* asm-arm/linkage.h */
   5              	
   6              	#define __ALIGN .align 0
   7              	#define __ALIGN_STR ".align 0"
   8              	
   9              	/* linux/linkage.h */
  10              	
  11              	#define ALIGN __ALIGN
  12              	
  13              	#define ENTRY(name) \
  14              	  .globl name; \
  15              	  ALIGN; \
  16              	  name:
  17              	
  18              	#endif
  19              	...
  37              	#include <asm/assembler.h>
   1              	/*
   2              	 *  linux/include/asm-arm/assembler.h
   3              	 *
   4              	 *  Copyright (C) 1996-2000 Russell King
   5              	 *
   6              	 * This program is free software; you can redistribute it and/or modify
   7              	 * it under the terms of the GNU General Public License version 2 as
   8              	 * published by the Free Software Foundation.
   9              	 *
  10              	 *  This file contains arm architecture specific defines
  11              	 *  for the different processors.
  12              	 *
  13              	 *  Do not include any C declarations in this file - it is included by
  14              	 *  assembler source.
  15              	 */
  16              	#ifndef __ASSEMBLY__
  17              	#error "Only include this from assembly code"
  18              	#endif
  19              	
  20              	#include <asm/ptrace.h>
   1              	/*
   2              	 *  linux/include/asm-arm/ptrace.h
   3              	 *
   4              	 *  Copyright (C) 1996-2003 Russell King
   5              	 *
   6              	 * This program is free software; you can redistribute it and/or modify
   7              	 * it under the terms of the GNU General Public License version 2 as
   8              	 * published by the Free Software Foundation.
   9              	 */
  10              	#ifndef __ASM_ARM_PTRACE_H
  11              	#define __ASM_ARM_PTRACE_H
  12              	
  13              	/*
  14              	 * PSR bits
  15              	 */
  16              	#define USR26_MODE	0x00000000
  17              	#define FIQ26_MODE	0x00000001
  18              	#define IRQ26_MODE	0x00000002
  19              	#define SVC26_MODE	0x00000003
  20              	#define USR_MODE	0x00000010
  21              	#define FIQ_MODE	0x00000011
  21              	
  22              	/*
  23              	 * Endian independent macros for shifting bytes within registers.
  24              	 */
  25              	#ifndef __ARMEB__
  26              	#define pull            lsr
  27              	#define push            lsl
  28              	#define get_byte_0      lsl #0
  29              	#define get_byte_1	lsr #8
  30              	#define get_byte_2	lsr #16
  31              	#define get_byte_3	lsr #24
  32              	#define put_byte_0      lsl #0
  33              	#define put_byte_1	lsl #8
  34              	#define put_byte_2	lsl #16
  35              	#define put_byte_3	lsl #24
  36              	#else
  37              	#define pull            lsl
  38              	#define push            lsr
  39              	#define get_byte_0	lsr #24
  40              	#define get_byte_1	lsr #16
  41              	#define get_byte_2	lsr #8
  42              	#define get_byte_3      lsl #0
  43              	#define put_byte_0	lsl #24
  44              	#define put_byte_1	lsl #16
  45              	#define put_byte_2	lsl #8
  46              	#define put_byte_3      lsl #0
  47              	#endif
  48              	
  49              	#define PLD(code...)
  50              	
  51              	#define MODE_USR	USR_MODE
  52              	#define MODE_FIQ	FIQ_MODE
  53              	#define MODE_IRQ	IRQ_MODE
  54              	#define MODE_SVC	SVC_MODE
  55              	
  56              	#define DEFAULT_FIQ	MODE_FIQ
  57              	
  58              	/*
  59              	 * LOADREGS - ldm with PC in register list (eg, ldmfd sp!, {pc})
  60              	 */
  61              	#ifdef __STDC__
  62              	#define LOADREGS(cond, base, reglist...)\
  63              		ldm##cond	base,reglist
  64              	#else
  65              	#define LOADREGS(cond, base, reglist...)\
  66              		ldm/**/cond	base,reglist
  67              	#endif
  68              	
  69              	/*
  70              	 * Build a return instruction for this processor type.
  71              	 */
  72              	#define RETINSTR(instr, regs...)\
  73              		instr	regs
  74              	
  75              	/*
  76              	 * Enable and disable interrupts
  77              	 */
  78              		.macro	disable_irq
  79              		msr	cpsr_c, #PSR_I_BIT | SVC_MODE
  80              		.endm
  81              	
  82              		.macro	enable_irq
  83              		msr	cpsr_c, #SVC_MODE
  84              		.endm
  85              	
  86              	/*
  87              	 * Save the current IRQ state and disable IRQs.  Note that this macro
  88              	 * assumes FIQs are enabled, and that the processor is in SVC mode.
  89              	 */
  90              		.macro	save_and_disable_irqs, oldcpsr
  91              		mrs	\oldcpsr, cpsr
  92              		disable_irq
  93              		.endm
  94              	
  95              	/*
  96              	 * Restore interrupt state previously stored in a register.  We don't
  97              	 * guarantee that this will preserve the flags.
  98              	 */
  99              		.macro	restore_irqs, oldcpsr
 100              		msr	cpsr_c, \oldcpsr
 101              		.endm
 102              	
 103              	/*
 104              	 * These two are used to save LR/restore PC over a user-based access.
 105              	 * The old 26-bit architecture requires that we do.  On 32-bit
 106              	 * architecture, we can safely ignore this requirement.
 107              	 */
 108              		.macro	save_lr
 109              		.endm
 110              	
 111              		.macro	restore_pc
 112              		mov	pc, lr
 113              		.endm
 114              	...
  38              	
  39              	
  40              	.macro ARM_DIV_BODY dividend, divisor, result, curbit
  41              	
  42              	#if __LINUX_ARM_ARCH__ >= 5
  43              	
  44              		clz	\curbit, \divisor
  45              		clz	\result, \dividend
  46              		sub	\result, \curbit, \result
  47              		mov	\curbit, #1
  48              		mov	\divisor, \divisor, lsl \result
  49              		mov	\curbit, \curbit, lsl \result
  50              		mov	\result, #0
  51              		
  52              	#else
  53              	
  54              		@ Initially shift the divisor left 3 bits if possible,
  55              		@ set curbit accordingly.  This allows for curbit to be located
  56              		@ at the left end of each 4 bit nibbles in the division loop
  57              		@ to save one loop in most cases.
  58              		tst	\divisor, #0xe0000000
  59              		moveq	\divisor, \divisor, lsl #3
  60              		moveq	\curbit, #8
  61              		movne	\curbit, #1
  62              	
  63              		@ Unless the divisor is very big, shift it up in multiples of
  64              		@ four bits, since this is the amount of unwinding in the main
  65              		@ division loop.  Continue shifting until the divisor is 
  66              		@ larger than the dividend.
  67              	1:	cmp	\divisor, #0x10000000
  68              		cmplo	\divisor, \dividend
  69              		movlo	\divisor, \divisor, lsl #4
  70              		movlo	\curbit, \curbit, lsl #4
  71              		blo	1b
  72              	
  73              		@ For very big divisors, we must shift it a bit at a time, or
  74              		@ we will be in danger of overflowing.
  75              	1:	cmp	\divisor, #0x80000000
  76              		cmplo	\divisor, \dividend
  77              		movlo	\divisor, \divisor, lsl #1
  78              		movlo	\curbit, \curbit, lsl #1
  79              		blo	1b
  80              	
  81              		mov	\result, #0
  82              	
  83              	#endif
  84              	
  85              		@ Division loop
  86              	1:	cmp	\dividend, \divisor
  87              		subhs	\dividend, \dividend, \divisor
  88              		orrhs	\result,   \result,   \curbit
  89              		cmp	\dividend, \divisor,  lsr #1
  90              		subhs	\dividend, \dividend, \divisor, lsr #1
  91              		orrhs	\result,   \result,   \curbit,  lsr #1
  92              		cmp	\dividend, \divisor,  lsr #2
  93              		subhs	\dividend, \dividend, \divisor, lsr #2
  94              		orrhs	\result,   \result,   \curbit,  lsr #2
  95              		cmp	\dividend, \divisor,  lsr #3
  96              		subhs	\dividend, \dividend, \divisor, lsr #3
  97              		orrhs	\result,   \result,   \curbit,  lsr #3
  98              		cmp	\dividend, #0			@ Early termination?
  99              		movnes	\curbit,   \curbit,  lsr #4	@ No, any more bits to do?
 100              		movne	\divisor,  \divisor, lsr #4
 101              		bne	1b
 102              	
 103              	.endm
 104              	
 105              	
 106              	.macro ARM_DIV2_ORDER divisor, order
 107              	
 108              	#if __LINUX_ARM_ARCH__ >= 5
 109              	
 110              		clz	\order, \divisor
 111              		rsb	\order, \order, #31
 112              	
 113              	#else
 114              	
 115              		cmp	\divisor, #(1 << 16)
 116              		movhs	\divisor, \divisor, lsr #16
 117              		movhs	\order, #16
 118              		movlo	\order, #0
 119              	
 120              		cmp	\divisor, #(1 << 8)
 121              		movhs	\divisor, \divisor, lsr #8
 122              		addhs	\order, \order, #8
 123              	
 124              		cmp	\divisor, #(1 << 4)
 125              		movhs	\divisor, \divisor, lsr #4
 126              		addhs	\order, \order, #4
 127              	
 128              		cmp	\divisor, #(1 << 2)
 129              		addhi	\order, \order, #3
 130              		addls	\order, \order, \divisor, lsr #1
 131              	
 132              	#endif
 133              	
 134              	.endm
 135              	
 136              	
 137              	.macro ARM_MOD_BODY dividend, divisor, order, spare
 138              	
 139              	#if __LINUX_ARM_ARCH__ >= 5
 140              	
 141              		clz	\order, \divisor
 142              		clz	\spare, \dividend
 143              		sub	\order, \order, \spare
 144              		mov	\divisor, \divisor, lsl \order
 145              	
 146              	#else
 147              	
 148              		mov	\order, #0
 149              	
 150              		@ Unless the divisor is very big, shift it up in multiples of
 151              		@ four bits, since this is the amount of unwinding in the main
 152              		@ division loop.  Continue shifting until the divisor is 
 153              		@ larger than the dividend.
 154              	1:	cmp	\divisor, #0x10000000
 155              		cmplo	\divisor, \dividend
 156              		movlo	\divisor, \divisor, lsl #4
 157              		addlo	\order, \order, #4
 158              		blo	1b
 159              	
 160              		@ For very big divisors, we must shift it a bit at a time, or
 161              		@ we will be in danger of overflowing.
 162              	1:	cmp	\divisor, #0x80000000
 163              		cmplo	\divisor, \dividend
 164              		movlo	\divisor, \divisor, lsl #1
 165              		addlo	\order, \order, #1
 166              		blo	1b
 167              	
 168              	#endif
 169              	
 170              		@ Perform all needed substractions to keep only the reminder.
 171              		@ Do comparisons in batch of 4 first.
 172              		subs	\order, \order, #3		@ yes, 3 is intended here
 173              		blt	2f
 174              	
 175              	1:	cmp	\dividend, \divisor
 176              		subhs	\dividend, \dividend, \divisor
 177              		cmp	\dividend, \divisor,  lsr #1
 178              		subhs	\dividend, \dividend, \divisor, lsr #1
 179              		cmp	\dividend, \divisor,  lsr #2
 180              		subhs	\dividend, \dividend, \divisor, lsr #2
 181              		cmp	\dividend, \divisor,  lsr #3
 182              		subhs	\dividend, \dividend, \divisor, lsr #3
 183              		cmp	\dividend, #1
 184              		mov	\divisor, \divisor, lsr #4
 185              		subges	\order, \order, #4
 186 0000 012051E2 		bge	1b
 187 0004 0EF0A001 	
 188 0008 EE00003A 		tst	\order, #3
 189 000c 010050E1 		teqne	\dividend, #0
 190 0010 2600009A 		beq	5f
 191 0014 020011E1 	
 192 0018 2900000A 		@ Either 1, 2 or 3 comparison/substractions are left.
 193              	2:	cmn	\order, #2
 194              		blt	4f
 195              		beq	3f
 196 0098 0200A0E1 		cmp	\dividend, \divisor
 197 009c 0EF0A0E1 		subhs	\dividend, \dividend, \divisor
 198              		mov	\divisor,  \divisor,  lsr #1
 199 00a0 0100A003 	3:	cmp	\dividend, \divisor
 200 00a4 0000A013 		subhs	\dividend, \dividend, \divisor
 201 00a8 0EF0A0E1 		mov	\divisor,  \divisor,  lsr #1
 202              	4:	cmp	\dividend, \divisor
 203              		subhs	\dividend, \dividend, \divisor
 204              	5:
 205 00e0 3002A0E1 	.endm
 206 00e4 0EF0A0E1 	
 207              	
 208              	ENTRY(__udivsi3)
 209              	ENTRY(__aeabi_uidiv)
 210              	
 211 00e8 012051E2 		subs	r2, r1, #1
 212 00ec EE00003A 		moveq	pc, lr
 213 00f0 01005011 		bcc	Ldiv0
 214 00f4 0000A003 		cmp	r0, r1
 215 00f8 02001181 		bls	11f
 216 00fc 02000000 		tst	r1, r2
 217 0100 0EF0A091 		beq	12f
 218              	
 219              		ARM_DIV_BODY r0, r1, r2, r3
 220              	
 221 01a0 0EF0A0E1 		mov	r0, r2
 222              		mov	pc, lr
 223              	
 224              	11:	moveq	r0, #1
 225              		movne	r0, #0
 226              		mov	pc, lr
 227 01a4 000051E3 	
 228 01a8 01C020E0 	12:	ARM_DIV2_ORDER r1, r2
 229 01ac EE00000A 	
 230 01b0 00106142 		mov	r0, r0, lsr r2
 231 01b4 012051E2 		mov	pc, lr
 232 01b8 9500000A 	
 233 01bc 0030B0E1 	
 234 01c0 00306042 	ENTRY(__umodsi3)
 235 01c4 010053E1 	
 236 01c8 9800009A 		subs	r2, r1, #1			@ compare divisor with 1
 237 01cc 020011E1 		bcc	Ldiv0
 238 01d0 9C00000A 		cmpne	r0, r1				@ compare dividend with divisor
 239              		moveq   r0, #0
 240              		tsthi	r1, r2				@ see if divisor is power of 2
 241              		andeq	r0, r0, r2
 242 0250 00005CE3 		movls	pc, lr
 243 0254 00006042 	
 244 0258 0EF0A0E1 		ARM_MOD_BODY r0, r1, r2, r3
 245              	
 246 025c 00003CE1 		mov	pc, lr
 247 0260 00006042 	
 248 0264 0EF0A0E1 	
 249              	ENTRY(__divsi3)
 250 0268 0000A033 	ENTRY(__aeabi_idiv)
 251 026c CC0FA001 	
 252 0270 01008003 		cmp	r1, #0
 253 0274 0EF0A0E1 		eor	ip, r0, r1			@ save the sign of the result.
 254              		beq	Ldiv0
 255              		rsbmi	r1, r1, #0			@ loops below use unsigned.
 256              		subs	r2, r1, #1			@ division by 1 or -1 ?
 257 02ac 00005CE3 		beq	10f
 258 02b0 3302A0E1 		movs	r3, r0
 259 02b4 00006042 		rsbmi	r3, r0, #0			@ positive dividend value
 260 02b8 0EF0A0E1 		cmp	r3, r1
 261              		bls	11f
 262              		tst	r1, r2				@ divisor is power of 2 ?
 263              		beq	12f
 264              	
 265 02bc 000051E3 		ARM_DIV_BODY r3, r1, r0, r2
 266 02c0 EE00000A 	
 267 02c4 00106142 		cmp	ip, #0
 268 02c8 00C0B0E1 		rsbmi	r0, r0, #0
 269 02cc 00006042 		mov	pc, lr
 270 02d0 012051E2 	
 271 02d4 01005011 	10:	teq	ip, r0				@ same sign ?
 272 02d8 0000A003 		rsbmi	r0, r0, #0
 273 02dc 02001181 		mov	pc, lr
 274 02e0 02000000 	
 275 02e4 DF00009A 	11:	movlo	r0, #0
 276              		moveq	r0, ip, asr #31
 277              		orreq	r0, r0, #1
 278              		mov	pc, lr
 279 0384 00005CE3 	
 280 0388 00006042 	12:	ARM_DIV2_ORDER r1, r2
 281 038c 0EF0A0E1 	
 282              		cmp	ip, #0
 283              		mov	r0, r3, lsr r2
 284              		rsbmi	r0, r0, #0
 285 0390 03502DE9 		mov	pc, lr
 286 0394 FEFFFFEB 	
 287 0398 0650BDE8 	
 288 039c 900203E0 	ENTRY(__modsi3)
 289 03a0 031041E0 	
 290 03a4 0EF0A0E1 		cmp	r1, #0
 291              		beq	Ldiv0
 292              		rsbmi	r1, r1, #0			@ loops below use unsigned.
 293              		movs	ip, r0				@ preserve sign of dividend
 294 03a8 03502DE9 		rsbmi	r0, r0, #0			@ if negative make positive
 295 03ac FEFFFFEB 		subs	r2, r1, #1			@ compare divisor with 1
 296 03b0 0650BDE8 		cmpne	r0, r1				@ compare dividend with divisor
 297 03b4 900203E0 		moveq	r0, #0
 298 03b8 031041E0 		tsthi	r1, r2				@ see if divisor is power of 2
 299 03bc 0EF0A0E1 		andeq	r0, r0, r2
 300              		bls	10f
 301              	
 302              		ARM_MOD_BODY r0, r1, r2, r3
 303 03c0 08E02DE5 	
 304 03c4 FEFFFFEB 	10:	cmp	ip, #0
 305 03c8 0000A0E3 		rsbmi	r0, r0, #0
 306 03cc 08F09DE4 		mov	pc, lr
 307              	
 308              	ENTRY(__aeabi_uidivmod)
 309 03d0 0EF0A0E1 	
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lib/lib1funcs.S
     lib/lib1funcs.S:183    .text:0000000000000000 __udivsi3
     lib/lib1funcs.S:184    .text:0000000000000000 __aeabi_uidiv
     lib/lib1funcs.S:186    .text:0000000000000000 $a
     lib/lib1funcs.S:301    .text:00000000000003c0 Ldiv0
     lib/lib1funcs.S:209    .text:00000000000000e8 __umodsi3
     lib/lib1funcs.S:224    .text:00000000000001a4 __divsi3
     lib/lib1funcs.S:225    .text:00000000000001a4 __aeabi_idiv
     lib/lib1funcs.S:263    .text:00000000000002bc __modsi3
     lib/lib1funcs.S:283    .text:0000000000000390 __aeabi_uidivmod
     lib/lib1funcs.S:292    .text:00000000000003a8 __aeabi_idivmod
     lib/lib1funcs.S:308    .text:00000000000003d0 __div0

NO UNDEFINED SYMBOLS
