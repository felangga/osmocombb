   1              		.file	"vsprintf.c"
   9              	.Ltext0:
  10              		.section	.text.skip_atoi,"ax",%progbits
  11              		.align	2
  13              	skip_atoi:
  14              	.LFB8:
  15              		.file 1 "lib/vsprintf.c"
   1:lib/vsprintf.c **** /*
   2:lib/vsprintf.c ****  *  linux/lib/vsprintf.c
   3:lib/vsprintf.c ****  *
   4:lib/vsprintf.c ****  *  Copyright (C) 1991, 1992  Linus Torvalds
   5:lib/vsprintf.c ****  */
   6:lib/vsprintf.c **** 
   7:lib/vsprintf.c **** /* vsprintf.c -- Lars Wirzenius & Linus Torvalds. */
   8:lib/vsprintf.c **** /*
   9:lib/vsprintf.c ****  * Wirzenius wrote this portably, Torvalds fucked it up :-)
  10:lib/vsprintf.c ****  */
  11:lib/vsprintf.c **** 
  12:lib/vsprintf.c **** /* 
  13:lib/vsprintf.c ****  * Fri Jul 13 2001 Crutcher Dunnavant <crutcher+kernel@datastacks.com>
  14:lib/vsprintf.c ****  * - changed to provide snprintf and vsnprintf functions
  15:lib/vsprintf.c ****  * So Feb  1 16:51:32 CET 2004 Juergen Quade <quade@hsnr.de>
  16:lib/vsprintf.c ****  * - scnprintf and vscnprintf
  17:lib/vsprintf.c ****  */
  18:lib/vsprintf.c **** 
  19:lib/vsprintf.c **** #include <stdio.h>
  20:lib/vsprintf.c **** #include <limits.h>
  21:lib/vsprintf.c **** #include <stdarg.h>
  22:lib/vsprintf.c **** #include <sys/types.h>
  23:lib/vsprintf.c **** #include <string.h>
  24:lib/vsprintf.c **** #include <ctype.h>
  25:lib/vsprintf.c **** 
  26:lib/vsprintf.c **** #include <asm/div64.h>
  27:lib/vsprintf.c **** 
  28:lib/vsprintf.c **** /**
  29:lib/vsprintf.c ****  * strtoul - convert a string to an unsigned long
  30:lib/vsprintf.c ****  * @cp: The start of the string
  31:lib/vsprintf.c ****  * @endp: A pointer to the end of the parsed string will be placed here
  32:lib/vsprintf.c ****  * @base: The number base to use
  33:lib/vsprintf.c ****  */
  34:lib/vsprintf.c **** unsigned long strtoul(const char *cp,char **endp,unsigned int base)
  35:lib/vsprintf.c **** {
  36:lib/vsprintf.c **** 	unsigned long result = 0,value;
  37:lib/vsprintf.c **** 
  38:lib/vsprintf.c **** 	if (!base) {
  39:lib/vsprintf.c **** 		base = 10;
  40:lib/vsprintf.c **** 		if (*cp == '0') {
  41:lib/vsprintf.c **** 			base = 8;
  42:lib/vsprintf.c **** 			cp++;
  43:lib/vsprintf.c **** 			if ((toupper(*cp) == 'X') && isxdigit(cp[1])) {
  44:lib/vsprintf.c **** 				cp++;
  45:lib/vsprintf.c **** 				base = 16;
  46:lib/vsprintf.c **** 			}
  47:lib/vsprintf.c **** 		}
  48:lib/vsprintf.c **** 	} else if (base == 16) {
  49:lib/vsprintf.c **** 		if (cp[0] == '0' && toupper(cp[1]) == 'X')
  50:lib/vsprintf.c **** 			cp += 2;
  51:lib/vsprintf.c **** 	}
  52:lib/vsprintf.c **** 	while (isxdigit(*cp) &&
  53:lib/vsprintf.c **** 	       (value = isdigit(*cp) ? *cp-'0' : toupper(*cp)-'A'+10) < base) {
  54:lib/vsprintf.c **** 		result = result*base + value;
  55:lib/vsprintf.c **** 		cp++;
  56:lib/vsprintf.c **** 	}
  57:lib/vsprintf.c **** 	if (endp)
  58:lib/vsprintf.c **** 		*endp = (char *)cp;
  59:lib/vsprintf.c **** 	return result;
  60:lib/vsprintf.c **** }
  61:lib/vsprintf.c **** 
  62:lib/vsprintf.c **** 
  63:lib/vsprintf.c **** /**
  64:lib/vsprintf.c ****  * strtol - convert a string to a signed long
  65:lib/vsprintf.c ****  * @cp: The start of the string
  66:lib/vsprintf.c ****  * @endp: A pointer to the end of the parsed string will be placed here
  67:lib/vsprintf.c ****  * @base: The number base to use
  68:lib/vsprintf.c ****  */
  69:lib/vsprintf.c **** long strtol(const char *cp,char **endp,unsigned int base)
  70:lib/vsprintf.c **** {
  71:lib/vsprintf.c **** 	if(*cp=='-')
  72:lib/vsprintf.c **** 		return -strtoul(cp+1,endp,base);
  73:lib/vsprintf.c **** 	return strtoul(cp,endp,base);
  74:lib/vsprintf.c **** }
  75:lib/vsprintf.c **** 
  76:lib/vsprintf.c **** 
  77:lib/vsprintf.c **** /**
  78:lib/vsprintf.c ****  * strtoull - convert a string to an unsigned long long
  79:lib/vsprintf.c ****  * @cp: The start of the string
  80:lib/vsprintf.c ****  * @endp: A pointer to the end of the parsed string will be placed here
  81:lib/vsprintf.c ****  * @base: The number base to use
  82:lib/vsprintf.c ****  */
  83:lib/vsprintf.c **** unsigned long long strtoull(const char *cp,char **endp,unsigned int base)
  84:lib/vsprintf.c **** {
  85:lib/vsprintf.c **** 	unsigned long long result = 0,value;
  86:lib/vsprintf.c **** 
  87:lib/vsprintf.c **** 	if (!base) {
  88:lib/vsprintf.c **** 		base = 10;
  89:lib/vsprintf.c **** 		if (*cp == '0') {
  90:lib/vsprintf.c **** 			base = 8;
  91:lib/vsprintf.c **** 			cp++;
  92:lib/vsprintf.c **** 			if ((toupper(*cp) == 'X') && isxdigit(cp[1])) {
  93:lib/vsprintf.c **** 				cp++;
  94:lib/vsprintf.c **** 				base = 16;
  95:lib/vsprintf.c **** 			}
  96:lib/vsprintf.c **** 		}
  97:lib/vsprintf.c **** 	} else if (base == 16) {
  98:lib/vsprintf.c **** 		if (cp[0] == '0' && toupper(cp[1]) == 'X')
  99:lib/vsprintf.c **** 			cp += 2;
 100:lib/vsprintf.c **** 	}
 101:lib/vsprintf.c **** 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
 102:lib/vsprintf.c **** 	    ? toupper(*cp) : *cp)-'A'+10) < base) {
 103:lib/vsprintf.c **** 		result = result*base + value;
 104:lib/vsprintf.c **** 		cp++;
 105:lib/vsprintf.c **** 	}
 106:lib/vsprintf.c **** 	if (endp)
 107:lib/vsprintf.c **** 		*endp = (char *)cp;
 108:lib/vsprintf.c **** 	return result;
 109:lib/vsprintf.c **** }
 110:lib/vsprintf.c **** 
 111:lib/vsprintf.c **** 
 112:lib/vsprintf.c **** /**
 113:lib/vsprintf.c ****  * strtoll - convert a string to a signed long long
 114:lib/vsprintf.c ****  * @cp: The start of the string
 115:lib/vsprintf.c ****  * @endp: A pointer to the end of the parsed string will be placed here
 116:lib/vsprintf.c ****  * @base: The number base to use
 117:lib/vsprintf.c ****  */
 118:lib/vsprintf.c **** long long strtoll(const char *cp,char **endp,unsigned int base)
 119:lib/vsprintf.c **** {
 120:lib/vsprintf.c **** 	if(*cp=='-')
 121:lib/vsprintf.c **** 		return -strtoull(cp+1,endp,base);
 122:lib/vsprintf.c **** 	return strtoull(cp,endp,base);
 123:lib/vsprintf.c **** }
 124:lib/vsprintf.c **** 
 125:lib/vsprintf.c **** static int skip_atoi(const char **s)
 126:lib/vsprintf.c **** {
  16              		.loc 1 126 0
  17              		@ args = 0, pretend = 0, frame = 0
  18              		@ frame_needed = 0, uses_anonymous_args = 0
  19              	.LVL0:
  20 0000 04E02DE5 		str	lr, [sp, #-4]!
  21              	.LCFI0:
  22              		.loc 1 126 0
  23 0004 00C0A0E3 		mov	ip, #0
  24              	.LVL1:
  25 0008 00E0A0E1 		mov	lr, r0
  26 000c 060000EA 		b	.L2
  27              	.LVL2:
  28              	.L3:
 127:lib/vsprintf.c **** 	int i=0;
 128:lib/vsprintf.c **** 
 129:lib/vsprintf.c **** 	while (isdigit(**s))
 130:lib/vsprintf.c **** 		i = i*10 + *((*s)++) - '0';
  29              		.loc 1 130 0
  30 0010 0A30A0E3 		mov	r3, #10
  31 0014 9C0323E0 		mla	r3, ip, r3, r0
  32 0018 00108EE5 		str	r1, [lr, #0]
  33 001c 30C043E2 		sub	ip, r3, #48
  34              	.LVL3:
  35              	.L2:
  36              		.loc 1 129 0
  37 0020 00309EE5 		ldr	r3, [lr, #0]
  38 0024 18209FE5 		ldr	r2, .L6
  39 0028 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
  40 002c 0020D2E7 		ldrb	r2, [r2, r0]	@ zero_extendqisi2
  41 0030 040012E3 		tst	r2, #4
  42              		.loc 1 130 0
  43 0034 011083E2 		add	r1, r3, #1
  44              		.loc 1 129 0
  45 0038 0200001A 		bne	.L3
 131:lib/vsprintf.c **** 	return i;
 132:lib/vsprintf.c **** }
  46              		.loc 1 132 0
  47 003c 0C00A0E1 		mov	r0, ip
  48 0040 04F09DE4 		ldr	pc, [sp], #4
  49              	.L7:
  50              		.align	2
  51              	.L6:
  52 0044 00000000 		.word	_ctype
  53              	.LFE8:
  55              		.section	.rodata
  56              		.align	2
  59              	large_digits.1360:
  60 0000 30313233 		.ascii	"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\000"
  60      34353637 
  60      38394142 
  60      43444546 
  60      4748494A 
  61 0025 000000   		.align	2
  64              	small_digits.1359:
  65 0028 30313233 		.ascii	"0123456789abcdefghijklmnopqrstuvwxyz\000"
  65      34353637 
  65      38396162 
  65      63646566 
  65      6768696A 
  66 004d 000000   		.section	.text.number,"ax",%progbits
  67              		.align	2
  69              	number:
  70              	.LFB9:
 133:lib/vsprintf.c **** 
 134:lib/vsprintf.c **** #define ZEROPAD	1		/* pad with zero */
 135:lib/vsprintf.c **** #define SIGN	2		/* unsigned/signed long */
 136:lib/vsprintf.c **** #define PLUS	4		/* show plus */
 137:lib/vsprintf.c **** #define SPACE	8		/* space if plus */
 138:lib/vsprintf.c **** #define LEFT	16		/* left justified */
 139:lib/vsprintf.c **** #define SPECIAL	32		/* 0x */
 140:lib/vsprintf.c **** #define LARGE	64		/* use 'ABCDEF' instead of 'abcdef' */
 141:lib/vsprintf.c **** 
 142:lib/vsprintf.c **** static char * number(char * buf, char * end, unsigned long long num, int base, int size, int precis
 143:lib/vsprintf.c **** {
  71              		.loc 1 143 0
  72              		@ args = 16, pretend = 0, frame = 84
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              	.LVL4:
  75 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  76              	.LCFI1:
  77 0004 54D04DE2 		sub	sp, sp, #84
  78              	.LCFI2:
  79              	.LVL5:
  80              		.loc 1 143 0
  81 0008 84A09DE5 		ldr	sl, [sp, #132]
 144:lib/vsprintf.c **** 	char c,sign,tmp[66];
 145:lib/vsprintf.c **** 	const char *digits;
 146:lib/vsprintf.c **** 	static const char small_digits[] = "0123456789abcdefghijklmnopqrstuvwxyz";
 147:lib/vsprintf.c **** 	static const char large_digits[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 148:lib/vsprintf.c **** 	int i;
 149:lib/vsprintf.c **** 
 150:lib/vsprintf.c **** 	digits = (type & LARGE) ? large_digits : small_digits;
  82              		.loc 1 150 0
  83 000c 84E29FE5 		ldr	lr, .L87
  84 0010 84C29FE5 		ldr	ip, .L87+4
  85              		.loc 1 143 0
  86 0014 0260A0E1 		mov	r6, r2
 151:lib/vsprintf.c **** 	if (type & LEFT)
 152:lib/vsprintf.c **** 		type &= ~ZEROPAD;
 153:lib/vsprintf.c **** 	if (base < 2 || base > 36)
  87              		.loc 1 153 0
  88 0018 78209DE5 		ldr	r2, [sp, #120]
  89              	.LVL6:
  90              		.loc 1 150 0
  91 001c 40001AE3 		tst	sl, #64
  92 0020 0CE0A011 		movne	lr, ip
  93              	.LVL7:
  94              		.loc 1 143 0
  95 0024 0370A0E1 		mov	r7, r3
  96              		.loc 1 151 0
  97 0028 10001AE3 		tst	sl, #16
  98              		.loc 1 153 0
  99 002c 023042E2 		sub	r3, r2, #2
 100              	.LVL8:
 101              		.loc 1 152 0
 102 0030 01A0CA13 		bicne	sl, sl, #1
 103              		.loc 1 153 0
 104 0034 220053E3 		cmp	r3, #34
 105              		.loc 1 143 0
 106 0038 0050A0E1 		mov	r5, r0
 107              		.loc 1 150 0
 108 003c 0CE08DE5 		str	lr, [sp, #12]
 109              	.LVL9:
 110              		.loc 1 143 0
 111 0040 0190A0E1 		mov	r9, r1
 112 0044 7C809DE5 		ldr	r8, [sp, #124]
 113              		.loc 1 153 0
 114 0048 0050A083 		movhi	r5, #0
 115 004c A100008A 		bhi	.L16
 116              	.LVL10:
 154:lib/vsprintf.c **** 		return NULL;
 155:lib/vsprintf.c **** 	c = (type & ZEROPAD) ? '0' : ' ';
 117              		.loc 1 155 0
 118 0050 01001AE3 		tst	sl, #1
 119 0054 2030A003 		moveq	r3, #32
 120 0058 3030A013 		movne	r3, #48
 156:lib/vsprintf.c **** 	sign = 0;
 157:lib/vsprintf.c **** 	if (type & SIGN) {
 121              		.loc 1 157 0
 122 005c 02001AE3 		tst	sl, #2
 123              		.loc 1 155 0
 124 0060 04308DE5 		str	r3, [sp, #4]
 125              	.LVL11:
 126              		.loc 1 157 0
 127 0064 2900000A 		beq	.L20
 158:lib/vsprintf.c **** 		if ((signed long long) num < 0) {
 128              		.loc 1 158 0
 129 0068 000057E3 		cmp	r7, #0
 130 006c 1F0000AA 		bge	.L22
 159:lib/vsprintf.c **** 			sign = '-';
 160:lib/vsprintf.c **** 			num = - (signed long long) num;
 131              		.loc 1 160 0
 132 0070 006076E2 		rsbs	r6, r6, #0
 133 0074 0070E7E2 		rsc	r7, r7, #0
 161:lib/vsprintf.c **** 			size--;
 134              		.loc 1 161 0
 135 0078 018048E2 		sub	r8, r8, #1
 136 007c 2D20A0E3 		mov	r2, #45
 137 0080 270000EA 		b	.L85
 138              	.L22:
 162:lib/vsprintf.c **** 		} else if (type & PLUS) {
 139              		.loc 1 162 0
 140 0084 04001AE3 		tst	sl, #4
 163:lib/vsprintf.c **** 			sign = '+';
 164:lib/vsprintf.c **** 			size--;
 141              		.loc 1 164 0
 142 0088 01804812 		subne	r8, r8, #1
 143 008c 2B30A013 		movne	r3, #43
 144              		.loc 1 162 0
 145 0090 2A00001A 		bne	.L86
 165:lib/vsprintf.c **** 		} else if (type & SPACE) {
 146              		.loc 1 165 0
 147 0094 08001AE3 		tst	sl, #8
 148 0098 2900000A 		beq	.L20
 166:lib/vsprintf.c **** 			sign = ' ';
 167:lib/vsprintf.c **** 			size--;
 149              		.loc 1 167 0
 150 009c 018048E2 		sub	r8, r8, #1
 151 00a0 2020A0E3 		mov	r2, #32
 152              	.L85:
 153 00a4 08208DE5 		str	r2, [sp, #8]
 154              	.LVL12:
 155 00a8 2B0000EA 		b	.L25
 156              	.LVL13:
 157              	.L20:
 158 00ac 0030A0E3 		mov	r3, #0
 159              	.L86:
 160 00b0 08308DE5 		str	r3, [sp, #8]
 161              	.LVL14:
 162              	.L25:
 168:lib/vsprintf.c **** 		}
 169:lib/vsprintf.c **** 	}
 170:lib/vsprintf.c **** 	if (type & SPECIAL) {
 163              		.loc 1 170 0
 164 00b4 AA32A0E1 		mov	r3, sl, lsr #5
 165 00b8 013013E2 		ands	r3, r3, #1
 166 00bc 00308DE5 		str	r3, [sp, #0]
 167 00c0 3600000A 		beq	.L29
 171:lib/vsprintf.c **** 		if (base == 16)
 168              		.loc 1 171 0
 169 00c4 78209DE5 		ldr	r2, [sp, #120]
 170 00c8 100052E3 		cmp	r2, #16
 172:lib/vsprintf.c **** 			size -= 2;
 171              		.loc 1 172 0
 172 00cc 02804802 		subeq	r8, r8, #2
 173              		.loc 1 171 0
 174 00d0 3600000A 		beq	.L29
 173:lib/vsprintf.c **** 		else if (base == 8)
 175              		.loc 1 173 0
 176 00d4 78309DE5 		ldr	r3, [sp, #120]
 177 00d8 080053E3 		cmp	r3, #8
 174:lib/vsprintf.c **** 			size--;
 178              		.loc 1 174 0
 179 00dc 01804802 		subeq	r8, r8, #1
 180              	.L29:
 175:lib/vsprintf.c **** 	}
 176:lib/vsprintf.c **** 	i = 0;
 177:lib/vsprintf.c **** 	if (num == 0)
 181              		.loc 1 177 0
 182 00e0 072096E1 		orrs	r2, r6, r7
 178:lib/vsprintf.c **** 		tmp[i++]='0';
 183              		.loc 1 178 0
 184 00e4 3030A003 		moveq	r3, #48
 185 00e8 01B0A003 		moveq	fp, #1
 186              	.LVL15:
 187 00ec 1230CD05 		streqb	r3, [sp, #18]
 188              		.loc 1 177 0
 189 00f0 4900000A 		beq	.L36
 190              		.loc 1 178 0
 191 00f4 00B0A0E3 		mov	fp, #0
 192              	.L37:
 193              	.LBB2:
 179:lib/vsprintf.c **** 	else while (num != 0)
 180:lib/vsprintf.c **** 		tmp[i++] = digits[do_div(num,base)];
 194              		.loc 1 180 0
 195 00f8 0600A0E1 		mov	r0, r6
 196              	.LVL16:
 197 00fc 0710A0E1 		mov	r1, r7
 198              	.LVL17:
 199 0100 78409DE5 		ldr	r4, [sp, #120]
 200              	.LVL18:
 201              		.ifnc r1,r1 ; .err ; .endif
 202              		.ifnc r2,r2 ; .err ; .endif
 203              		.ifnc r0,r0 ; .err ; .endif
 204              		.ifnc r4,r4 ; .err ; .endif
 205 0104 FEFFFFEB 		bl	__do_div64
 206              	.LVL19:
 207 0108 0370A0E1 		mov	r7, r3
 208              	.LBE2:
 209 010c 0C309DE5 		ldr	r3, [sp, #12]
 210              	.LVL20:
 211              	.LBB3:
 212 0110 0260A0E1 		mov	r6, r2
 213              	.LBE3:
 214 0114 0120D3E7 		ldrb	r2, [r3, r1]	@ zero_extendqisi2
 215              	.LVL21:
 216              		.loc 1 179 0
 217 0118 073096E1 		orrs	r3, r6, r7
 218              		.loc 1 180 0
 219 011c 12308DE2 		add	r3, sp, #18
 220 0120 0320CBE7 		strb	r2, [fp, r3]
 221 0124 01B08BE2 		add	fp, fp, #1
 222              		.loc 1 179 0
 223 0128 3C00001A 		bne	.L37
 224              	.LVL22:
 225              	.L36:
 181:lib/vsprintf.c **** 	if (i > precision)
 226              		.loc 1 181 0
 227 012c 80209DE5 		ldr	r2, [sp, #128]
 228 0130 0B0052E1 		cmp	r2, fp
 229 0134 0B20A0B1 		movlt	r2, fp
 182:lib/vsprintf.c **** 		precision = i;
 183:lib/vsprintf.c **** 	size -= precision;
 230              		.loc 1 183 0
 231 0138 080062E0 		rsb	r0, r2, r8
 232              	.LVL23:
 184:lib/vsprintf.c **** 	if (!(type&(ZEROPAD+LEFT))) {
 233              		.loc 1 184 0
 234 013c 11001AE3 		tst	sl, #17
 235              		.loc 1 181 0
 236 0140 80208DE5 		str	r2, [sp, #128]
 237              		.loc 1 184 0
 238 0144 0020A001 		moveq	r2, r0
 239 0148 5700000A 		beq	.L42
 240 014c 5A0000EA 		b	.L40
 241              	.L43:
 185:lib/vsprintf.c **** 		while(size-->0) {
 186:lib/vsprintf.c **** 			if (buf <= end)
 242              		.loc 1 186 0
 243 0150 090055E1 		cmp	r5, r9
 187:lib/vsprintf.c **** 				*buf = ' ';
 244              		.loc 1 187 0
 245 0154 2030A093 		movls	r3, #32
 246 0158 0030C595 		strlsb	r3, [r5, #0]
 188:lib/vsprintf.c **** 			++buf;
 247              		.loc 1 188 0
 248 015c 012042E2 		sub	r2, r2, #1
 249 0160 015085E2 		add	r5, r5, #1
 250              	.L42:
 251              		.loc 1 185 0
 252 0164 000052E3 		cmp	r2, #0
 253 0168 520000CA 		bgt	.L43
 254 016c 010042E2 		sub	r0, r2, #1
 255              	.L40:
 189:lib/vsprintf.c **** 		}
 190:lib/vsprintf.c **** 	}
 191:lib/vsprintf.c **** 	if (sign) {
 256              		.loc 1 191 0
 257 0170 08309DE5 		ldr	r3, [sp, #8]
 258 0174 000053E3 		cmp	r3, #0
 259 0178 6000000A 		beq	.L47
 192:lib/vsprintf.c **** 		if (buf <= end)
 260              		.loc 1 192 0
 261 017c 090055E1 		cmp	r5, r9
 193:lib/vsprintf.c **** 			*buf = sign;
 262              		.loc 1 193 0
 263 0180 0030C595 		strlsb	r3, [r5, #0]
 194:lib/vsprintf.c **** 		++buf;
 264              		.loc 1 194 0
 265 0184 015085E2 		add	r5, r5, #1
 266              	.L47:
 195:lib/vsprintf.c **** 	}
 196:lib/vsprintf.c **** 	if (type & SPECIAL) {
 267              		.loc 1 196 0
 268 0188 00209DE5 		ldr	r2, [sp, #0]
 269 018c 000052E3 		cmp	r2, #0
 270 0190 7700000A 		beq	.L51
 197:lib/vsprintf.c **** 		if (base==8) {
 271              		.loc 1 197 0
 272 0194 78309DE5 		ldr	r3, [sp, #120]
 273 0198 080053E3 		cmp	r3, #8
 274 019c 6B00001A 		bne	.L53
 198:lib/vsprintf.c **** 			if (buf <= end)
 275              		.loc 1 198 0
 276 01a0 090055E1 		cmp	r5, r9
 199:lib/vsprintf.c **** 				*buf = '0';
 277              		.loc 1 199 0
 278 01a4 28308392 		addls	r3, r3, #40
 279 01a8 0030C595 		strlsb	r3, [r5, #0]
 200:lib/vsprintf.c **** 			++buf;
 280              		.loc 1 200 0
 281 01ac 015085E2 		add	r5, r5, #1
 282 01b0 770000EA 		b	.L51
 283              	.L53:
 201:lib/vsprintf.c **** 		} else if (base==16) {
 284              		.loc 1 201 0
 285 01b4 78209DE5 		ldr	r2, [sp, #120]
 286 01b8 100052E3 		cmp	r2, #16
 287 01bc 7700001A 		bne	.L51
 202:lib/vsprintf.c **** 			if (buf <= end)
 288              		.loc 1 202 0
 289 01c0 090055E1 		cmp	r5, r9
 203:lib/vsprintf.c **** 				*buf = '0';
 290              		.loc 1 203 0
 291 01c4 3030A093 		movls	r3, #48
 292 01c8 0030C595 		strlsb	r3, [r5, #0]
 204:lib/vsprintf.c **** 			++buf;
 293              		.loc 1 204 0
 294 01cc 013085E2 		add	r3, r5, #1
 295              	.LVL24:
 205:lib/vsprintf.c **** 			if (buf <= end)
 296              		.loc 1 205 0
 297 01d0 090053E1 		cmp	r3, r9
 206:lib/vsprintf.c **** 				*buf = digits[33];
 298              		.loc 1 206 0
 299 01d4 0C209D95 		ldrls	r2, [sp, #12]
 300 01d8 2130D295 		ldrlsb	r3, [r2, #33]	@ zero_extendqisi2
 301              	.LVL25:
 302 01dc 0130C595 		strlsb	r3, [r5, #1]
 207:lib/vsprintf.c **** 			++buf;
 303              		.loc 1 207 0
 304 01e0 025085E2 		add	r5, r5, #2
 305              	.L51:
 208:lib/vsprintf.c **** 		}
 209:lib/vsprintf.c **** 	}
 210:lib/vsprintf.c **** 	if (!(type & LEFT)) {
 306              		.loc 1 210 0
 307 01e4 10001AE3 		tst	sl, #16
 308 01e8 0030A001 		moveq	r3, r0
 309 01ec 8100000A 		beq	.L65
 310              	.L63:
 311 01f0 80209DE5 		ldr	r2, [sp, #128]
 312 01f4 890000EA 		b	.L64
 313              	.L66:
 211:lib/vsprintf.c **** 		while (size-- > 0) {
 212:lib/vsprintf.c **** 			if (buf <= end)
 314              		.loc 1 212 0
 315 01f8 090055E1 		cmp	r5, r9
 213:lib/vsprintf.c **** 				*buf = c;
 316              		.loc 1 213 0
 317 01fc 04209D95 		ldrls	r2, [sp, #4]
 214:lib/vsprintf.c **** 			++buf;
 318              		.loc 1 214 0
 319 0200 013043E2 		sub	r3, r3, #1
 320              		.loc 1 213 0
 321 0204 0020C595 		strlsb	r2, [r5, #0]
 322              		.loc 1 214 0
 323 0208 015085E2 		add	r5, r5, #1
 324              	.L65:
 325              		.loc 1 211 0
 326 020c 000053E3 		cmp	r3, #0
 327 0210 7C0000CA 		bgt	.L66
 328 0214 010043E2 		sub	r0, r3, #1
 329 0218 7A0000EA 		b	.L63
 330              	.L70:
 215:lib/vsprintf.c **** 		}
 216:lib/vsprintf.c **** 	}
 217:lib/vsprintf.c **** 	while (i < precision--) {
 218:lib/vsprintf.c **** 		if (buf <= end)
 331              		.loc 1 218 0
 332 021c 090055E1 		cmp	r5, r9
 219:lib/vsprintf.c **** 			*buf = '0';
 333              		.loc 1 219 0
 334 0220 3030A093 		movls	r3, #48
 335 0224 0030C595 		strlsb	r3, [r5, #0]
 220:lib/vsprintf.c **** 		++buf;
 336              		.loc 1 220 0
 337 0228 015085E2 		add	r5, r5, #1
 338              	.L64:
 339              		.loc 1 217 0
 340 022c 02005BE1 		cmp	fp, r2
 341              		.loc 1 220 0
 342 0230 012042E2 		sub	r2, r2, #1
 343              		.loc 1 217 0
 344 0234 850000BA 		blt	.L70
 345 0238 12308DE2 		add	r3, sp, #18
 346 023c 0B20A0E1 		mov	r2, fp
 347              	.LVL26:
 348 0240 0B1083E0 		add	r1, r3, fp
 349              	.LVL27:
 350 0244 950000EA 		b	.L74
 351              	.L75:
 221:lib/vsprintf.c **** 	}
 222:lib/vsprintf.c **** 	while (i-- > 0) {
 223:lib/vsprintf.c **** 		if (buf <= end)
 352              		.loc 1 223 0
 353 0248 090055E1 		cmp	r5, r9
 224:lib/vsprintf.c **** 			*buf = tmp[i];
 354              		.loc 1 224 0
 355 024c 01305195 		ldrlsb	r3, [r1, #-1]	@ zero_extendqisi2
 225:lib/vsprintf.c **** 		++buf;
 356              		.loc 1 225 0
 357 0250 011041E2 		sub	r1, r1, #1
 358              		.loc 1 224 0
 359 0254 0030C595 		strlsb	r3, [r5, #0]
 360              		.loc 1 225 0
 361 0258 015085E2 		add	r5, r5, #1
 362              	.L74:
 363              		.loc 1 222 0
 364 025c 000052E3 		cmp	r2, #0
 365              		.loc 1 225 0
 366 0260 012042E2 		sub	r2, r2, #1
 367              		.loc 1 222 0
 368 0264 900000CA 		bgt	.L75
 369 0268 0020A0E1 		mov	r2, r0
 370 026c 9E0000EA 		b	.L79
 371              	.L80:
 226:lib/vsprintf.c **** 	}
 227:lib/vsprintf.c **** 	while (size-- > 0) {
 228:lib/vsprintf.c **** 		if (buf <= end)
 372              		.loc 1 228 0
 373 0270 090055E1 		cmp	r5, r9
 229:lib/vsprintf.c **** 			*buf = ' ';
 374              		.loc 1 229 0
 375 0274 2030A093 		movls	r3, #32
 376 0278 0030C595 		strlsb	r3, [r5, #0]
 230:lib/vsprintf.c **** 		++buf;
 377              		.loc 1 230 0
 378 027c 015085E2 		add	r5, r5, #1
 379              	.L79:
 380              		.loc 1 227 0
 381 0280 000052E3 		cmp	r2, #0
 382              		.loc 1 230 0
 383 0284 012042E2 		sub	r2, r2, #1
 384              		.loc 1 227 0
 385 0288 9A0000CA 		bgt	.L80
 386              	.LVL28:
 387              	.L16:
 231:lib/vsprintf.c **** 	}
 232:lib/vsprintf.c **** 	return buf;
 233:lib/vsprintf.c **** }
 388              		.loc 1 233 0
 389 028c 0500A0E1 		mov	r0, r5
 390              	.LVL29:
 391 0290 54D08DE2 		add	sp, sp, #84
 392 0294 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 393              	.L88:
 394              		.align	2
 395              	.L87:
 396 0298 28000000 		.word	small_digits.1359
 397 029c 00000000 		.word	large_digits.1360
 398              	.LFE9:
 400              		.section	.text.vsnprintf,"ax",%progbits
 401              		.align	2
 402              		.global	vsnprintf
 404              	vsnprintf:
 405              	.LFB10:
 234:lib/vsprintf.c **** 
 235:lib/vsprintf.c **** /**
 236:lib/vsprintf.c ****  * vsnprintf - Format a string and place it in a buffer
 237:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 238:lib/vsprintf.c ****  * @size: The size of the buffer, including the trailing null space
 239:lib/vsprintf.c ****  * @fmt: The format string to use
 240:lib/vsprintf.c ****  * @args: Arguments for the format string
 241:lib/vsprintf.c ****  *
 242:lib/vsprintf.c ****  * The return value is the number of characters which would
 243:lib/vsprintf.c ****  * be generated for the given input, excluding the trailing
 244:lib/vsprintf.c ****  * '\0', as per ISO C99. If you want to have the exact
 245:lib/vsprintf.c ****  * number of characters written into @buf as return value
 246:lib/vsprintf.c ****  * (not including the trailing '\0'), use vscnprintf. If the
 247:lib/vsprintf.c ****  * return is greater than or equal to @size, the resulting
 248:lib/vsprintf.c ****  * string is truncated.
 249:lib/vsprintf.c ****  *
 250:lib/vsprintf.c ****  * Call this function if you are already dealing with a va_list.
 251:lib/vsprintf.c ****  * You probably want snprintf instead.
 252:lib/vsprintf.c ****  */
 253:lib/vsprintf.c **** int vsnprintf(char *buf, size_t size, const char *fmt, va_list args)
 254:lib/vsprintf.c **** {
 406              		.loc 1 254 0
 407              		@ args = 0, pretend = 0, frame = 4
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              	.LVL30:
 410 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 411              	.LCFI3:
 255:lib/vsprintf.c **** 	int len;
 256:lib/vsprintf.c **** 	unsigned long long num;
 257:lib/vsprintf.c **** 	int i, base;
 258:lib/vsprintf.c **** 	char *str, *end, c;
 259:lib/vsprintf.c **** 	const char *s;
 260:lib/vsprintf.c **** 
 261:lib/vsprintf.c **** 	int flags;		/* flags to number() */
 262:lib/vsprintf.c **** 
 263:lib/vsprintf.c **** 	int field_width;	/* width of output field */
 264:lib/vsprintf.c **** 	int precision;		/* min. # of digits for integers; max
 265:lib/vsprintf.c **** 				   number of chars for from string */
 266:lib/vsprintf.c **** 	int qualifier;		/* 'h', 'l', or 'L' for integer fields */
 267:lib/vsprintf.c **** 				/* 'z' support added 23/7/1999 S.H.    */
 268:lib/vsprintf.c **** 				/* 'z' changed to 'Z' --davidm 1/25/99 */
 269:lib/vsprintf.c **** 				/* 't' added for ptrdiff_t */
 270:lib/vsprintf.c **** 
 271:lib/vsprintf.c **** 	/* Reject out-of-range values early */
 272:lib/vsprintf.c **** 	if ((int) size < 0) {
 412              		.loc 1 272 0
 413 0004 00B051E2 		subs	fp, r1, #0
 414              		.loc 1 254 0
 415 0008 14D04DE2 		sub	sp, sp, #20
 416              	.LCFI4:
 417              	.LVL31:
 418              		.loc 1 254 0
 419 000c 0090A0E1 		mov	r9, r0
 420 0010 10208DE5 		str	r2, [sp, #16]
 421 0014 0350A0E1 		mov	r5, r3
 422              		.loc 1 272 0
 423 0018 0000A0B3 		movlt	r0, #0
 424              	.LVL32:
 425 001c 4B0100BA 		blt	.L92
 426              	.LVL33:
 273:lib/vsprintf.c **** 		return 0;
 274:lib/vsprintf.c **** 	}
 275:lib/vsprintf.c **** 
 276:lib/vsprintf.c **** 	str = buf;
 277:lib/vsprintf.c **** 	end = buf + size - 1;
 427              		.loc 1 277 0
 428 0020 0B3089E0 		add	r3, r9, fp
 429 0024 018043E2 		sub	r8, r3, #1
 430              	.LVL34:
 278:lib/vsprintf.c **** 
 279:lib/vsprintf.c **** 	if (end < buf - 1) {
 431              		.loc 1 279 0
 432 0028 013049E2 		sub	r3, r9, #1
 433 002c 030058E1 		cmp	r8, r3
 280:lib/vsprintf.c **** 		end = ((void *) -1);
 281:lib/vsprintf.c **** 		size = end - buf + 1;
 434              		.loc 1 281 0
 435 0030 00B06932 		rsbcc	fp, r9, #0
 436 0034 0080E033 		mvncc	r8, #0
 437              		.loc 1 279 0
 438 0038 0940A0E1 		mov	r4, r9
 439              	.LVL35:
 440 003c 410100EA 		b	.L95
 441              	.LVL36:
 442              	.L96:
 282:lib/vsprintf.c **** 	}
 283:lib/vsprintf.c **** 
 284:lib/vsprintf.c **** 	for (; *fmt ; ++fmt) {
 285:lib/vsprintf.c **** 		if (*fmt != '%') {
 443              		.loc 1 285 0
 444 0040 250053E3 		cmp	r3, #37
 445 0044 0070A003 		moveq	r7, #0
 446 0048 EA00001A 		bne	.L135
 447              	.L225:
 286:lib/vsprintf.c **** 			if (str <= end)
 287:lib/vsprintf.c **** 				*str = *fmt;
 288:lib/vsprintf.c **** 			++str;
 289:lib/vsprintf.c **** 			continue;
 290:lib/vsprintf.c **** 		}
 291:lib/vsprintf.c **** 
 292:lib/vsprintf.c **** 		/* process flags */
 293:lib/vsprintf.c **** 		flags = 0;
 294:lib/vsprintf.c **** 		repeat:
 295:lib/vsprintf.c **** 			++fmt;		/* this also skips first '%' */
 448              		.loc 1 295 0
 449 004c 10109DE5 		ldr	r1, [sp, #16]
 450              	.LVL37:
 451 0050 013081E2 		add	r3, r1, #1
 452 0054 10308DE5 		str	r3, [sp, #16]
 296:lib/vsprintf.c **** 			switch (*fmt) {
 453              		.loc 1 296 0
 454 0058 0120D1E5 		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 455              	.LVL38:
 456 005c 2B0052E3 		cmp	r2, #43
 457 0060 2400000A 		beq	.L106
 458 0064 1D00008A 		bhi	.L109
 459 0068 200052E3 		cmp	r2, #32
 460 006c 2600000A 		beq	.L104
 461 0070 230052E3 		cmp	r2, #35
 462 0074 2C00001A 		bne	.L103
 463 0078 280000EA 		b	.L105
 464              	.L109:
 465 007c 2D0052E3 		cmp	r2, #45
 466 0080 2200000A 		beq	.L107
 467 0084 300052E3 		cmp	r2, #48
 468 0088 2C00001A 		bne	.L103
 469 008c 2A0000EA 		b	.L108
 470              	.L107:
 297:lib/vsprintf.c **** 				case '-': flags |= LEFT; goto repeat;
 471              		.loc 1 297 0
 472 0090 107087E3 		orr	r7, r7, #16
 473 0094 110000EA 		b	.L225
 474              	.L106:
 298:lib/vsprintf.c **** 				case '+': flags |= PLUS; goto repeat;
 475              		.loc 1 298 0
 476 0098 047087E3 		orr	r7, r7, #4
 477 009c 110000EA 		b	.L225
 478              	.L104:
 299:lib/vsprintf.c **** 				case ' ': flags |= SPACE; goto repeat;
 479              		.loc 1 299 0
 480 00a0 087087E3 		orr	r7, r7, #8
 481 00a4 110000EA 		b	.L225
 482              	.L105:
 300:lib/vsprintf.c **** 				case '#': flags |= SPECIAL; goto repeat;
 483              		.loc 1 300 0
 484 00a8 207087E3 		orr	r7, r7, #32
 485 00ac 110000EA 		b	.L225
 486              	.L108:
 301:lib/vsprintf.c **** 				case '0': flags |= ZEROPAD; goto repeat;
 487              		.loc 1 301 0
 488 00b0 017087E3 		orr	r7, r7, #1
 489 00b4 110000EA 		b	.L225
 490              	.L103:
 302:lib/vsprintf.c **** 			}
 303:lib/vsprintf.c **** 
 304:lib/vsprintf.c **** 		/* get field width */
 305:lib/vsprintf.c **** 		field_width = -1;
 306:lib/vsprintf.c **** 		if (isdigit(*fmt))
 491              		.loc 1 306 0
 492 00b8 7C349FE5 		ldr	r3, .L226
 493 00bc 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 494 00c0 040013E3 		tst	r3, #4
 495 00c4 3400000A 		beq	.L110
 307:lib/vsprintf.c **** 			field_width = skip_atoi(&fmt);
 496              		.loc 1 307 0
 497 00c8 10008DE2 		add	r0, sp, #16
 498 00cc FEFFFFEB 		bl	skip_atoi
 499              	.LVL39:
 500 00d0 0060A0E1 		mov	r6, r0
 501 00d4 3F0000EA 		b	.L112
 502              	.LVL40:
 503              	.L110:
 308:lib/vsprintf.c **** 		else if (*fmt == '*') {
 504              		.loc 1 308 0
 505 00d8 2A0052E3 		cmp	r2, #42
 506 00dc 0060E013 		mvnne	r6, #0
 507 00e0 3F00001A 		bne	.L112
 508              	.LVL41:
 309:lib/vsprintf.c **** 			++fmt;
 310:lib/vsprintf.c **** 			/* it's the next argument */
 311:lib/vsprintf.c **** 			field_width = va_arg(args, int);
 509              		.loc 1 311 0
 510 00e4 006095E5 		ldr	r6, [r5, #0]
 511              		.loc 1 309 0
 512 00e8 023081E2 		add	r3, r1, #2
 312:lib/vsprintf.c **** 			if (field_width < 0) {
 513              		.loc 1 312 0
 514 00ec 000056E3 		cmp	r6, #0
 515              		.loc 1 309 0
 516 00f0 10308DE5 		str	r3, [sp, #16]
 517              		.loc 1 311 0
 518 00f4 043085E2 		add	r3, r5, #4
 519              	.LVL42:
 313:lib/vsprintf.c **** 				field_width = -field_width;
 520              		.loc 1 313 0
 521 00f8 006066B2 		rsblt	r6, r6, #0
 314:lib/vsprintf.c **** 				flags |= LEFT;
 522              		.loc 1 314 0
 523 00fc 107087B3 		orrlt	r7, r7, #16
 524 0100 0350A0E1 		mov	r5, r3
 525              	.LVL43:
 526              	.L112:
 315:lib/vsprintf.c **** 			}
 316:lib/vsprintf.c **** 		}
 317:lib/vsprintf.c **** 
 318:lib/vsprintf.c **** 		/* get the precision */
 319:lib/vsprintf.c **** 		precision = -1;
 320:lib/vsprintf.c **** 		if (*fmt == '.') {
 527              		.loc 1 320 0
 528 0104 10209DE5 		ldr	r2, [sp, #16]
 529 0108 0030D2E5 		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 530              	.LVL44:
 531 010c 2E0053E3 		cmp	r3, #46
 532 0110 00E0E013 		mvnne	lr, #0
 533 0114 5700001A 		bne	.L119
 321:lib/vsprintf.c **** 			++fmt;	
 534              		.loc 1 321 0
 535 0118 013082E2 		add	r3, r2, #1
 536 011c 10308DE5 		str	r3, [sp, #16]
 322:lib/vsprintf.c **** 			if (isdigit(*fmt))
 537              		.loc 1 322 0
 538 0120 14349FE5 		ldr	r3, .L226
 539 0124 0110D2E5 		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 540 0128 0130D3E7 		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 541 012c 040013E3 		tst	r3, #4
 542 0130 4F00000A 		beq	.L120
 323:lib/vsprintf.c **** 				precision = skip_atoi(&fmt);
 543              		.loc 1 323 0
 544 0134 10008DE2 		add	r0, sp, #16
 545 0138 FEFFFFEB 		bl	skip_atoi
 546              	.LVL45:
 547 013c 00E0A0E1 		mov	lr, r0
 548              	.LVL46:
 549 0140 540000EA 		b	.L122
 550              	.LVL47:
 551              	.L120:
 324:lib/vsprintf.c **** 			else if (*fmt == '*') {
 552              		.loc 1 324 0
 553 0144 2A0051E3 		cmp	r1, #42
 554 0148 5600001A 		bne	.L123
 325:lib/vsprintf.c **** 				++fmt;
 555              		.loc 1 325 0
 556 014c 023082E2 		add	r3, r2, #2
 557 0150 10308DE5 		str	r3, [sp, #16]
 558              	.LVL48:
 326:lib/vsprintf.c **** 				/* it's the next argument */
 327:lib/vsprintf.c **** 				precision = va_arg(args, int);
 559              		.loc 1 327 0
 560 0154 04E095E4 		ldr	lr, [r5], #4
 561              	.LVL49:
 562              	.L122:
 328:lib/vsprintf.c **** 			}
 329:lib/vsprintf.c **** 			if (precision < 0)
 563              		.loc 1 329 0
 564 0158 00005EE3 		cmp	lr, #0
 565 015c 570000AA 		bge	.L119
 566              	.L123:
 567 0160 00E0A0E3 		mov	lr, #0
 568              	.L119:
 330:lib/vsprintf.c **** 				precision = 0;
 331:lib/vsprintf.c **** 		}
 332:lib/vsprintf.c **** 
 333:lib/vsprintf.c **** 		/* get the conversion qualifier */
 334:lib/vsprintf.c **** 		qualifier = -1;
 335:lib/vsprintf.c **** 		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
 569              		.loc 1 335 0
 570 0164 10109DE5 		ldr	r1, [sp, #16]
 571 0168 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 572 016c 6C0052E3 		cmp	r2, #108
 573 0170 0030A013 		movne	r3, #0
 574 0174 0130A003 		moveq	r3, #1
 575 0178 6C0052E3 		cmp	r2, #108
 576 017c 68005213 		cmpne	r2, #104
 577 0180 6800000A 		beq	.L125
 578 0184 4C0052E3 		cmp	r2, #76
 579 0188 6800000A 		beq	.L125
 580 018c 5A0052E3 		cmp	r2, #90
 581 0190 6800000A 		beq	.L125
 582 0194 7A0052E3 		cmp	r2, #122
 583 0198 6800000A 		beq	.L125
 584 019c 740052E3 		cmp	r2, #116
 585 01a0 0020E013 		mvnne	r2, #0
 586              	.LVL50:
 587 01a4 7100001A 		bne	.L131
 588              	.L125:
 336:lib/vsprintf.c **** 		    *fmt =='Z' || *fmt == 'z' || *fmt == 't') {
 337:lib/vsprintf.c **** 			qualifier = *fmt;
 338:lib/vsprintf.c **** 			++fmt;
 339:lib/vsprintf.c **** 			if (qualifier == 'l' && *fmt == 'l') {
 589              		.loc 1 339 0
 590 01a8 000053E3 		cmp	r3, #0
 591              		.loc 1 338 0
 592 01ac 013081E2 		add	r3, r1, #1
 593 01b0 10308DE5 		str	r3, [sp, #16]
 594              		.loc 1 339 0
 595 01b4 7100000A 		beq	.L131
 596 01b8 0130D1E5 		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 597 01bc 6C0053E3 		cmp	r3, #108
 340:lib/vsprintf.c **** 				qualifier = 'L';
 341:lib/vsprintf.c **** 				++fmt;
 598              		.loc 1 341 0
 599 01c0 02308102 		addeq	r3, r1, #2
 600 01c4 10308D05 		streq	r3, [sp, #16]
 601 01c8 4C20A003 		moveq	r2, #76
 602              	.L131:
 342:lib/vsprintf.c **** 			}
 343:lib/vsprintf.c **** 		}
 344:lib/vsprintf.c **** 
 345:lib/vsprintf.c **** 		/* default base */
 346:lib/vsprintf.c **** 		base = 10;
 347:lib/vsprintf.c **** 
 348:lib/vsprintf.c **** 		switch (*fmt) {
 603              		.loc 1 348 0
 604 01cc 10309DE5 		ldr	r3, [sp, #16]
 605 01d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 606 01d4 6E0053E3 		cmp	r3, #110
 607 01d8 DF00000A 		beq	.L139
 608 01dc 8300008A 		bhi	.L145
 609 01e0 630053E3 		cmp	r3, #99
 610 01e4 9000000A 		beq	.L137
 611 01e8 7E00008A 		bhi	.L146
 612 01ec 250053E3 		cmp	r3, #37
 613 01f0 EA00000A 		beq	.L135
 614 01f4 580053E3 		cmp	r3, #88
 615 01f8 F500001A 		bne	.L134
 616 01fc F00000EA 		b	.L136
 617              	.L146:
 618 0200 640053E3 		cmp	r3, #100
 619 0204 F300000A 		beq	.L138
 620 0208 690053E3 		cmp	r3, #105
 621 020c F500001A 		bne	.L134
 622 0210 F30000EA 		b	.L138
 623              	.L145:
 624 0214 730053E3 		cmp	r3, #115
 625 0218 A800000A 		beq	.L142
 626 021c 8B00008A 		bhi	.L147
 627 0220 6F0053E3 		cmp	r3, #111
 628 0224 EE00000A 		beq	.L140
 629 0228 700053E3 		cmp	r3, #112
 630 022c F500001A 		bne	.L134
 631 0230 CF0000EA 		b	.L141
 632              	.L147:
 633 0234 750053E3 		cmp	r3, #117
 634 0238 0501000A 		beq	.L143
 635 023c 780053E3 		cmp	r3, #120
 636 0240 F500001A 		bne	.L134
 637 0244 F10000EA 		b	.L219
 638              	.L137:
 349:lib/vsprintf.c **** 			case 'c':
 350:lib/vsprintf.c **** 				if (!(flags & LEFT)) {
 639              		.loc 1 350 0
 640 0248 100017E3 		tst	r7, #16
 641 024c 9700000A 		beq	.L216
 642 0250 9A0000EA 		b	.L150
 643              	.L151:
 351:lib/vsprintf.c **** 					while (--field_width > 0) {
 352:lib/vsprintf.c **** 						if (str <= end)
 644              		.loc 1 352 0
 645 0254 080054E1 		cmp	r4, r8
 353:lib/vsprintf.c **** 							*str = ' ';
 646              		.loc 1 353 0
 647 0258 2030A093 		movls	r3, #32
 648 025c 0030C495 		strlsb	r3, [r4, #0]
 354:lib/vsprintf.c **** 						++str;
 649              		.loc 1 354 0
 650 0260 014084E2 		add	r4, r4, #1
 651              	.L216:
 652              		.loc 1 351 0
 653 0264 016046E2 		sub	r6, r6, #1
 654 0268 000056E3 		cmp	r6, #0
 655 026c 930000CA 		bgt	.L151
 656              	.L150:
 355:lib/vsprintf.c **** 					}
 356:lib/vsprintf.c **** 				}
 357:lib/vsprintf.c **** 				c = (unsigned char) va_arg(args, int);
 358:lib/vsprintf.c **** 				if (str <= end)
 657              		.loc 1 358 0
 658 0270 080054E1 		cmp	r4, r8
 659              	.LVL51:
 660              		.loc 1 357 0
 661 0274 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 662              	.LVL52:
 663 0278 042085E2 		add	r2, r5, #4
 664              	.LVL53:
 665              		.loc 1 358 0
 666 027c A300008A 		bhi	.L158
 667 0280 A20000EA 		b	.L223
 668              	.L157:
 359:lib/vsprintf.c **** 					*str = c;
 360:lib/vsprintf.c **** 				++str;
 361:lib/vsprintf.c **** 				while (--field_width > 0) {
 362:lib/vsprintf.c **** 					if (str <= end)
 669              		.loc 1 362 0
 670 0284 080054E1 		cmp	r4, r8
 671 0288 A300008A 		bhi	.L158
 363:lib/vsprintf.c **** 						*str = ' ';
 672              		.loc 1 363 0
 673 028c 2030A0E3 		mov	r3, #32
 674              	.LVL54:
 675              	.L223:
 676              	.LVL55:
 677 0290 0030C4E5 		strb	r3, [r4, #0]
 678              	.LVL56:
 679              	.L158:
 680              		.loc 1 361 0
 681 0294 016046E2 		sub	r6, r6, #1
 682 0298 000056E3 		cmp	r6, #0
 364:lib/vsprintf.c **** 					++str;
 683              		.loc 1 364 0
 684 029c 014084E2 		add	r4, r4, #1
 685              		.loc 1 361 0
 686 02a0 9F0000CA 		bgt	.L157
 687 02a4 CD0000EA 		b	.L222
 688              	.LVL57:
 689              	.L142:
 690              	.LVL58:
 365:lib/vsprintf.c **** 				}
 366:lib/vsprintf.c **** 				continue;
 367:lib/vsprintf.c **** 
 368:lib/vsprintf.c **** 			case 's':
 369:lib/vsprintf.c **** 				s = va_arg(args, char *);
 691              		.loc 1 369 0
 692 02a8 00A095E5 		ldr	sl, [r5, #0]
 370:lib/vsprintf.c **** 
 371:lib/vsprintf.c **** 				len = strnlen(s, precision);
 693              		.loc 1 371 0
 694 02ac 0E10A0E1 		mov	r1, lr
 695 02b0 0A00A0E1 		mov	r0, sl
 696 02b4 FEFFFFEB 		bl	strnlen
 697              	.LVL59:
 372:lib/vsprintf.c **** 
 373:lib/vsprintf.c **** 				if (!(flags & LEFT)) {
 698              		.loc 1 373 0
 699 02b8 100017E3 		tst	r7, #16
 700              		.loc 1 371 0
 701 02bc 00C0A0E1 		mov	ip, r0
 702              	.LVL60:
 703              		.loc 1 369 0
 704 02c0 042085E2 		add	r2, r5, #4
 705              	.LVL61:
 706              		.loc 1 373 0
 707 02c4 0600A001 		moveq	r0, r6
 708 02c8 B700000A 		beq	.L163
 709 02cc BA0000EA 		b	.L161
 710              	.L164:
 374:lib/vsprintf.c **** 					while (len < field_width--) {
 375:lib/vsprintf.c **** 						if (str <= end)
 711              		.loc 1 375 0
 712 02d0 080054E1 		cmp	r4, r8
 376:lib/vsprintf.c **** 							*str = ' ';
 713              		.loc 1 376 0
 714 02d4 2030A093 		movls	r3, #32
 715 02d8 0030C495 		strlsb	r3, [r4, #0]
 377:lib/vsprintf.c **** 						++str;
 716              		.loc 1 377 0
 717 02dc 010040E2 		sub	r0, r0, #1
 718 02e0 014084E2 		add	r4, r4, #1
 719              	.L163:
 720              		.loc 1 374 0
 721 02e4 00005CE1 		cmp	ip, r0
 722 02e8 B20000BA 		blt	.L164
 723 02ec 016040E2 		sub	r6, r0, #1
 724              	.L161:
 725 02f0 0010A0E3 		mov	r1, #0
 726              	.LVL62:
 727 02f4 C00000EA 		b	.L168
 728              	.L169:
 378:lib/vsprintf.c **** 					}
 379:lib/vsprintf.c **** 				}
 380:lib/vsprintf.c **** 				for (i = 0; i < len; ++i) {
 381:lib/vsprintf.c **** 					if (str <= end)
 729              		.loc 1 381 0
 730 02f8 080053E1 		cmp	r3, r8
 382:lib/vsprintf.c **** 						*str = *s;
 731              		.loc 1 382 0
 732 02fc 0A30D197 		ldrlsb	r3, [r1, sl]	@ zero_extendqisi2
 733 0300 0430C197 		strlsb	r3, [r1, r4]
 734              		.loc 1 380 0
 735 0304 011081E2 		add	r1, r1, #1
 736              	.L168:
 737 0308 0C0051E1 		cmp	r1, ip
 738 030c 043081E0 		add	r3, r1, r4
 739 0310 BC0000BA 		blt	.L169
 740 0314 0340A0E1 		mov	r4, r3
 741 0318 0600A0E1 		mov	r0, r6
 742 031c CA0000EA 		b	.L173
 743              	.L174:
 383:lib/vsprintf.c **** 					++str; ++s;
 384:lib/vsprintf.c **** 				}
 385:lib/vsprintf.c **** 				while (len < field_width--) {
 386:lib/vsprintf.c **** 					if (str <= end)
 744              		.loc 1 386 0
 745 0320 080054E1 		cmp	r4, r8
 387:lib/vsprintf.c **** 						*str = ' ';
 746              		.loc 1 387 0
 747 0324 2030A093 		movls	r3, #32
 748 0328 0030C495 		strlsb	r3, [r4, #0]
 388:lib/vsprintf.c **** 					++str;
 749              		.loc 1 388 0
 750 032c 014084E2 		add	r4, r4, #1
 751              	.L173:
 752              		.loc 1 385 0
 753 0330 00005CE1 		cmp	ip, r0
 754              		.loc 1 388 0
 755 0334 010040E2 		sub	r0, r0, #1
 756              		.loc 1 385 0
 757 0338 C60000BA 		blt	.L174
 758              	.LVL63:
 759              	.L222:
 760              	.LVL64:
 761 033c 0250A0E1 		mov	r5, r2
 762 0340 3E0100EA 		b	.L102
 763              	.LVL65:
 764              	.L141:
 765              	.LVL66:
 389:lib/vsprintf.c **** 				}
 390:lib/vsprintf.c **** 				continue;
 391:lib/vsprintf.c **** 
 392:lib/vsprintf.c **** 			case 'p':
 393:lib/vsprintf.c **** 				if (field_width == -1) {
 394:lib/vsprintf.c **** 					field_width = 2*sizeof(void *);
 395:lib/vsprintf.c **** 					flags |= ZEROPAD;
 396:lib/vsprintf.c **** 				}
 397:lib/vsprintf.c **** 				str = number(str, end,
 766              		.loc 1 397 0
 767 0344 002095E5 		ldr	r2, [r5, #0]
 768              	.LVL67:
 769              		.loc 1 393 0
 770 0348 010076E3 		cmn	r6, #1
 771              		.loc 1 395 0
 772 034c 01708703 		orreq	r7, r7, #1
 773 0350 09608602 		addeq	r6, r6, #9
 774              		.loc 1 397 0
 775 0354 0400A0E1 		mov	r0, r4
 776 0358 0030A0E3 		mov	r3, #0
 777 035c 10C0A0E3 		mov	ip, #16
 778              	.LVL68:
 779 0360 0810A0E1 		mov	r1, r8
 780 0364 00C08DE5 		str	ip, [sp, #0]
 781 0368 40408DE9 		stmib	sp, {r6, lr}	@ phole stm
 782 036c 0C708DE5 		str	r7, [sp, #12]
 783 0370 FEFFFFEB 		bl	number
 784              	.LVL69:
 785 0374 043085E2 		add	r3, r5, #4
 786              	.LVL70:
 787 0378 0040A0E1 		mov	r4, r0
 788 037c 0350A0E1 		mov	r5, r3
 789 0380 3E0100EA 		b	.L102
 790              	.LVL71:
 791              	.L139:
 398:lib/vsprintf.c **** 						(unsigned long) va_arg(args, void *),
 399:lib/vsprintf.c **** 						16, field_width, precision, flags);
 400:lib/vsprintf.c **** 				continue;
 401:lib/vsprintf.c **** 
 402:lib/vsprintf.c **** 
 403:lib/vsprintf.c **** 			case 'n':
 404:lib/vsprintf.c **** 				/* FIXME:
 405:lib/vsprintf.c **** 				* What does C99 say about the overflow case here? */
 406:lib/vsprintf.c **** 				if (qualifier == 'l') {
 792              		.loc 1 406 0
 793 0384 6C0052E3 		cmp	r2, #108
 794              	.LVL72:
 795              	.LBB4:
 407:lib/vsprintf.c **** 					long * ip = va_arg(args, long *);
 408:lib/vsprintf.c **** 					*ip = (str - buf);
 796              		.loc 1 408 0
 797 0388 00209505 		ldreq	r2, [r5, #0]
 798              	.LVL73:
 799              	.LBE4:
 800              	.LBB5:
 409:lib/vsprintf.c **** 				} else if (qualifier == 'Z' || qualifier == 'z') {
 410:lib/vsprintf.c **** 					size_t * ip = va_arg(args, size_t *);
 411:lib/vsprintf.c **** 					*ip = (str - buf);
 412:lib/vsprintf.c **** 				} else {
 413:lib/vsprintf.c **** 					int * ip = va_arg(args, int *);
 414:lib/vsprintf.c **** 					*ip = (str - buf);
 801              		.loc 1 414 0
 802 038c 00309515 		ldrne	r3, [r5, #0]
 803 0390 04008512 		addne	r0, r5, #4
 804              	.LBE5:
 805              	.LBB6:
 806              		.loc 1 408 0
 807 0394 04306900 		rsbeq	r3, r9, r4
 808 0398 04206910 		rsbne	r2, r9, r4
 809 039c 04508502 		addeq	r5, r5, #4
 810              	.LBE6:
 811              	.LBB7:
 812              		.loc 1 414 0
 813 03a0 0050A011 		movne	r5, r0
 814              	.LBE7:
 815              	.LBB8:
 816              		.loc 1 408 0
 817 03a4 00308205 		streq	r3, [r2, #0]
 818              	.LBE8:
 819              	.LBB9:
 820              		.loc 1 414 0
 821 03a8 00208315 		strne	r2, [r3, #0]
 822 03ac 3E0100EA 		b	.L102
 823              	.LVL74:
 824              	.L135:
 825              	.LBE9:
 415:lib/vsprintf.c **** 				}
 416:lib/vsprintf.c **** 				continue;
 417:lib/vsprintf.c **** 
 418:lib/vsprintf.c **** 			case '%':
 419:lib/vsprintf.c **** 				if (str <= end)
 826              		.loc 1 419 0
 827 03b0 080054E1 		cmp	r4, r8
 420:lib/vsprintf.c **** 					*str = '%';
 828              		.loc 1 420 0
 829 03b4 0030C495 		strlsb	r3, [r4, #0]
 421:lib/vsprintf.c **** 				++str;
 830              		.loc 1 421 0
 831 03b8 014084E2 		add	r4, r4, #1
 832 03bc 3E0100EA 		b	.L102
 833              	.LVL75:
 834              	.L140:
 422:lib/vsprintf.c **** 				continue;
 835              		.loc 1 422 0
 836 03c0 08C0A0E3 		mov	ip, #8
 837              	.LVL76:
 838 03c4 060100EA 		b	.L148
 839              	.LVL77:
 840              	.L136:
 423:lib/vsprintf.c **** 
 424:lib/vsprintf.c **** 				/* integer number formats - set up the flags and "break" */
 425:lib/vsprintf.c **** 			case 'o':
 426:lib/vsprintf.c **** 				base = 8;
 427:lib/vsprintf.c **** 				break;
 428:lib/vsprintf.c **** 
 429:lib/vsprintf.c **** 			case 'X':
 430:lib/vsprintf.c **** 				flags |= LARGE;
 841              		.loc 1 430 0
 842 03c8 407087E3 		orr	r7, r7, #64
 843              	.L219:
 844 03cc 10C0A0E3 		mov	ip, #16
 845              	.LVL78:
 846 03d0 060100EA 		b	.L148
 847              	.LVL79:
 848              	.L138:
 431:lib/vsprintf.c **** 			case 'x':
 432:lib/vsprintf.c **** 				base = 16;
 433:lib/vsprintf.c **** 				break;
 434:lib/vsprintf.c **** 
 435:lib/vsprintf.c **** 			case 'd':
 436:lib/vsprintf.c **** 			case 'i':
 437:lib/vsprintf.c **** 				flags |= SIGN;
 849              		.loc 1 437 0
 850 03d4 027087E3 		orr	r7, r7, #2
 851 03d8 050100EA 		b	.L143
 852              	.L134:
 438:lib/vsprintf.c **** 			case 'u':
 439:lib/vsprintf.c **** 				break;
 440:lib/vsprintf.c **** 
 441:lib/vsprintf.c **** 			default:
 442:lib/vsprintf.c **** 				if (str <= end)
 853              		.loc 1 442 0
 854 03dc 080054E1 		cmp	r4, r8
 443:lib/vsprintf.c **** 					*str = '%';
 855              		.loc 1 443 0
 856 03e0 2530A093 		movls	r3, #37
 857 03e4 0030C495 		strlsb	r3, [r4, #0]
 444:lib/vsprintf.c **** 				++str;
 445:lib/vsprintf.c **** 				if (*fmt) {
 858              		.loc 1 445 0
 859 03e8 10309DE5 		ldr	r3, [sp, #16]
 860 03ec 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 861 03f0 000051E3 		cmp	r1, #0
 862              		.loc 1 444 0
 863 03f4 012084E2 		add	r2, r4, #1
 864              	.LVL80:
 865              		.loc 1 445 0
 866 03f8 0101000A 		beq	.L188
 446:lib/vsprintf.c **** 					if (str <= end)
 867              		.loc 1 446 0
 868 03fc 080052E1 		cmp	r2, r8
 447:lib/vsprintf.c **** 						*str = *fmt;
 869              		.loc 1 447 0
 870 0400 0110C495 		strlsb	r1, [r4, #1]
 448:lib/vsprintf.c **** 					++str;
 871              		.loc 1 448 0
 872 0404 024084E2 		add	r4, r4, #2
 873 0408 3E0100EA 		b	.L102
 874              	.L188:
 449:lib/vsprintf.c **** 				} else {
 450:lib/vsprintf.c **** 					--fmt;
 875              		.loc 1 450 0
 876 040c 013043E2 		sub	r3, r3, #1
 877 0410 0240A0E1 		mov	r4, r2
 878 0414 10308DE5 		str	r3, [sp, #16]
 879 0418 3E0100EA 		b	.L102
 880              	.LVL81:
 881              	.L143:
 882 041c 0AC0A0E3 		mov	ip, #10
 883              	.LVL82:
 884              	.L148:
 451:lib/vsprintf.c **** 				}
 452:lib/vsprintf.c **** 				continue;
 453:lib/vsprintf.c **** 		}
 454:lib/vsprintf.c **** 		if (qualifier == 'L')
 885              		.loc 1 454 0
 886 0420 4C0052E3 		cmp	r2, #76
 887              	.LVL83:
 455:lib/vsprintf.c **** 			num = va_arg(args, long long);
 888              		.loc 1 455 0
 889 0424 06009508 		ldmeqia	r5, {r1-r2}
 890              	.LVL84:
 891 0428 08508502 		addeq	r5, r5, #8
 892              	.LVL85:
 893 042c 3501000A 		beq	.L194
 894              	.LVL86:
 895              	.L192:
 456:lib/vsprintf.c **** 		else if (qualifier == 'l') {
 896              		.loc 1 456 0
 897 0430 6C0052E3 		cmp	r2, #108
 898 0434 1301001A 		bne	.L195
 899              	.LVL87:
 457:lib/vsprintf.c **** 			num = va_arg(args, unsigned long);
 900              		.loc 1 457 0
 901 0438 003095E5 		ldr	r3, [r5, #0]
 458:lib/vsprintf.c **** 			if (flags & SIGN)
 902              		.loc 1 458 0
 903 043c 020017E3 		tst	r7, #2
 904              		.loc 1 457 0
 905 0440 0310A0E1 		mov	r1, r3
 906 0444 0020A0E3 		mov	r2, #0
 907              	.LVL88:
 908 0448 045085E2 		add	r5, r5, #4
 909              	.LVL89:
 910              		.loc 1 458 0
 911 044c 3501000A 		beq	.L194
 912 0450 340100EA 		b	.L220
 913              	.LVL90:
 914              	.L195:
 459:lib/vsprintf.c **** 				num = (signed long) num;
 460:lib/vsprintf.c **** 		} else if (qualifier == 'Z' || qualifier == 'z') {
 915              		.loc 1 460 0
 916 0454 7A0052E3 		cmp	r2, #122
 917 0458 5A005213 		cmpne	r2, #90
 918              	.LVL91:
 461:lib/vsprintf.c **** 			num = va_arg(args, size_t);
 919              		.loc 1 461 0
 920 045c 00309505 		ldreq	r3, [r5, #0]
 921 0460 0310A001 		moveq	r1, r3
 922 0464 0020A003 		moveq	r2, #0
 923              	.LVL92:
 924              		.loc 1 460 0
 925 0468 1E01000A 		beq	.L221
 462:lib/vsprintf.c **** 		} else if (qualifier == 't') {
 926              		.loc 1 462 0
 927 046c 740052E3 		cmp	r2, #116
 928 0470 2001001A 		bne	.L200
 463:lib/vsprintf.c **** 			num = va_arg(args, long);
 929              		.loc 1 463 0
 930 0474 003095E5 		ldr	r3, [r5, #0]
 931 0478 0310A0E1 		mov	r1, r3
 932 047c C12FA0E1 		mov	r2, r1, asr #31
 933              	.L221:
 934 0480 045085E2 		add	r5, r5, #4
 935              	.LVL93:
 936 0484 350100EA 		b	.L194
 937              	.LVL94:
 938              	.L200:
 464:lib/vsprintf.c **** 		} else if (qualifier == 'h') {
 939              		.loc 1 464 0
 940 0488 680052E3 		cmp	r2, #104
 941 048c 040085E2 		add	r0, r5, #4
 942 0490 002095E5 		ldr	r2, [r5, #0]
 943              	.LVL95:
 944 0494 021007E2 		and	r1, r7, #2
 945              	.LVL96:
 946 0498 2F01001A 		bne	.L202
 465:lib/vsprintf.c **** 			num = (unsigned short) va_arg(args, int);
 947              		.loc 1 465 0
 948 049c 0238A0E1 		mov	r3, r2, asl #16
 466:lib/vsprintf.c **** 			if (flags & SIGN)
 949              		.loc 1 466 0
 950 04a0 000051E3 		cmp	r1, #0
 951              		.loc 1 465 0
 952 04a4 2318A0E1 		mov	r1, r3, lsr #16
 953              	.LVL97:
 954 04a8 0020A0E3 		mov	r2, #0
 467:lib/vsprintf.c **** 				num = (signed short) num;
 955              		.loc 1 467 0
 956 04ac 0130A011 		movne	r3, r1	@ movhi
 957 04b0 0338A011 		movne	r3, r3, asl #16
 958              		.loc 1 465 0
 959 04b4 0050A0E1 		mov	r5, r0
 960              	.LVL98:
 961              		.loc 1 467 0
 962 04b8 4318A011 		movne	r1, r3, asr #16
 963              		.loc 1 466 0
 964 04bc 3401001A 		bne	.L220
 965 04c0 350100EA 		b	.L194
 966              	.LVL99:
 967              	.L202:
 468:lib/vsprintf.c **** 		} else {
 469:lib/vsprintf.c **** 			num = va_arg(args, unsigned int);
 470:lib/vsprintf.c **** 			if (flags & SIGN)
 968              		.loc 1 470 0
 969 04c4 000051E3 		cmp	r1, #0
 970              		.loc 1 469 0
 971 04c8 0050A0E1 		mov	r5, r0
 972              	.LVL100:
 973 04cc 0210A0E1 		mov	r1, r2
 974 04d0 0020A0E3 		mov	r2, #0
 975              	.LVL101:
 976              		.loc 1 470 0
 977 04d4 3501000A 		beq	.L194
 978              	.LVL102:
 979              	.L220:
 471:lib/vsprintf.c **** 				num = (signed int) num;
 980              		.loc 1 471 0
 981 04d8 C12FA0E1 		mov	r2, r1, asr #31
 982              	.L194:
 472:lib/vsprintf.c **** 		}
 473:lib/vsprintf.c **** 		str = number(str, end, num, base,
 983              		.loc 1 473 0
 984 04dc 0400A0E1 		mov	r0, r4
 985              	.LVL103:
 986 04e0 0230A0E1 		mov	r3, r2
 987 04e4 0120A0E1 		mov	r2, r1
 988              	.LVL104:
 989 04e8 0810A0E1 		mov	r1, r8
 990              	.LVL105:
 991 04ec 00C08DE5 		str	ip, [sp, #0]
 992 04f0 40408DE9 		stmib	sp, {r6, lr}	@ phole stm
 993 04f4 0C708DE5 		str	r7, [sp, #12]
 994 04f8 FEFFFFEB 		bl	number
 995              	.LVL106:
 996 04fc 0040A0E1 		mov	r4, r0
 997              	.LVL107:
 998              	.L102:
 999              		.loc 1 284 0
 1000 0500 10309DE5 		ldr	r3, [sp, #16]
 1001              	.LVL108:
 1002 0504 013083E2 		add	r3, r3, #1
 1003 0508 10308DE5 		str	r3, [sp, #16]
 1004              	.L95:
 1005 050c 10309DE5 		ldr	r3, [sp, #16]
 1006 0510 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1007 0514 000053E3 		cmp	r3, #0
 1008 0518 0E00001A 		bne	.L96
 474:lib/vsprintf.c **** 				field_width, precision, flags);
 475:lib/vsprintf.c **** 	}
 476:lib/vsprintf.c **** 	if (str <= end)
 1009              		.loc 1 476 0
 1010 051c 080054E1 		cmp	r4, r8
 477:lib/vsprintf.c **** 		*str = '\0';
 1011              		.loc 1 477 0
 1012 0520 0030C495 		strlsb	r3, [r4, #0]
 1013              		.loc 1 476 0
 1014 0524 4A01009A 		bls	.L209
 478:lib/vsprintf.c **** 	else if (size > 0)
 1015              		.loc 1 478 0
 1016 0528 00005BE3 		cmp	fp, #0
 479:lib/vsprintf.c **** 		/* don't write out a null byte if the buf size is zero */
 480:lib/vsprintf.c **** 		*end = '\0';
 1017              		.loc 1 480 0
 1018 052c 0030C815 		strneb	r3, [r8, #0]
 1019              	.L209:
 481:lib/vsprintf.c **** 	/* the trailing null byte doesn't count towards the total
 482:lib/vsprintf.c **** 	* ++str;
 483:lib/vsprintf.c **** 	*/
 484:lib/vsprintf.c **** 	return str-buf;
 1020              		.loc 1 484 0
 1021 0530 040069E0 		rsb	r0, r9, r4
 1022              	.LVL109:
 1023              	.L92:
 485:lib/vsprintf.c **** }
 1024              		.loc 1 485 0
 1025 0534 14D08DE2 		add	sp, sp, #20
 1026 0538 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1027              	.L227:
 1028              		.align	2
 1029              	.L226:
 1030 053c 00000000 		.word	_ctype
 1031              	.LFE10:
 1033              		.section	.text.vscnprintf,"ax",%progbits
 1034              		.align	2
 1035              		.global	vscnprintf
 1037              	vscnprintf:
 1038              	.LFB11:
 486:lib/vsprintf.c **** 
 487:lib/vsprintf.c **** 
 488:lib/vsprintf.c **** /**
 489:lib/vsprintf.c ****  * vscnprintf - Format a string and place it in a buffer
 490:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 491:lib/vsprintf.c ****  * @size: The size of the buffer, including the trailing null space
 492:lib/vsprintf.c ****  * @fmt: The format string to use
 493:lib/vsprintf.c ****  * @args: Arguments for the format string
 494:lib/vsprintf.c ****  *
 495:lib/vsprintf.c ****  * The return value is the number of characters which have been written into
 496:lib/vsprintf.c ****  * the @buf not including the trailing '\0'. If @size is <= 0 the function
 497:lib/vsprintf.c ****  * returns 0.
 498:lib/vsprintf.c ****  *
 499:lib/vsprintf.c ****  * Call this function if you are already dealing with a va_list.
 500:lib/vsprintf.c ****  * You probably want scnprintf instead.
 501:lib/vsprintf.c ****  */
 502:lib/vsprintf.c **** int vscnprintf(char *buf, size_t size, const char *fmt, va_list args)
 503:lib/vsprintf.c **** {
 1039              		.loc 1 503 0
 1040              		@ args = 0, pretend = 0, frame = 0
 1041              		@ frame_needed = 0, uses_anonymous_args = 0
 1042              	.LVL110:
 1043 0000 10402DE9 		stmfd	sp!, {r4, lr}
 1044              	.LCFI5:
 1045              		.loc 1 503 0
 1046 0004 0140A0E1 		mov	r4, r1
 504:lib/vsprintf.c **** 	unsigned int i;
 505:lib/vsprintf.c **** 
 506:lib/vsprintf.c **** 	i=vsnprintf(buf,size,fmt,args);
 1047              		.loc 1 506 0
 1048 0008 FEFFFFEB 		bl	vsnprintf
 1049              	.LVL111:
 1050              	.LVL112:
 507:lib/vsprintf.c **** 	return (i >= size) ? (size - 1) : i;
 1051              		.loc 1 507 0
 1052 000c 040050E1 		cmp	r0, r4
 1053 0010 014044E2 		sub	r4, r4, #1
 1054              	.LVL113:
 1055 0014 0040A031 		movcc	r4, r0
 508:lib/vsprintf.c **** }
 1056              		.loc 1 508 0
 1057 0018 0400A0E1 		mov	r0, r4
 1058              	.LVL114:
 1059 001c 1080BDE8 		ldmfd	sp!, {r4, pc}
 1060              	.LFE11:
 1062              		.section	.text.snprintf,"ax",%progbits
 1063              		.align	2
 1064              		.global	snprintf
 1066              	snprintf:
 1067              	.LFB12:
 509:lib/vsprintf.c **** 
 510:lib/vsprintf.c **** 
 511:lib/vsprintf.c **** /**
 512:lib/vsprintf.c ****  * snprintf - Format a string and place it in a buffer
 513:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 514:lib/vsprintf.c ****  * @size: The size of the buffer, including the trailing null space
 515:lib/vsprintf.c ****  * @fmt: The format string to use
 516:lib/vsprintf.c ****  * @...: Arguments for the format string
 517:lib/vsprintf.c ****  *
 518:lib/vsprintf.c ****  * The return value is the number of characters which would be
 519:lib/vsprintf.c ****  * generated for the given input, excluding the trailing null,
 520:lib/vsprintf.c ****  * as per ISO C99.  If the return is greater than or equal to
 521:lib/vsprintf.c ****  * @size, the resulting string is truncated.
 522:lib/vsprintf.c ****  */
 523:lib/vsprintf.c **** int snprintf(char * buf, size_t size, const char *fmt, ...)
 524:lib/vsprintf.c **** {
 1068              		.loc 1 524 0
 1069              		@ args = 4, pretend = 8, frame = 4
 1070              		@ frame_needed = 0, uses_anonymous_args = 1
 1071              	.LVL115:
 1072 0000 0C002DE9 		stmfd	sp!, {r2, r3}
 1073              	.LCFI6:
 1074 0004 04E02DE5 		str	lr, [sp, #-4]!
 1075              	.LCFI7:
 1076 0008 04D04DE2 		sub	sp, sp, #4
 1077              	.LCFI8:
 1078              	.LVL116:
 525:lib/vsprintf.c **** 	va_list args;
 526:lib/vsprintf.c **** 	int i;
 527:lib/vsprintf.c **** 
 528:lib/vsprintf.c **** 	va_start(args, fmt);
 1079              		.loc 1 528 0
 1080 000c 0CC08DE2 		add	ip, sp, #12
 529:lib/vsprintf.c **** 	i=vsnprintf(buf,size,fmt,args);
 1081              		.loc 1 529 0
 1082 0010 0C30A0E1 		mov	r3, ip
 1083              	.LVL117:
 1084 0014 08209DE5 		ldr	r2, [sp, #8]
 1085              		.loc 1 528 0
 1086 0018 00C08DE5 		str	ip, [sp, #0]
 1087              		.loc 1 529 0
 1088 001c FEFFFFEB 		bl	vsnprintf
 1089              	.LVL118:
 530:lib/vsprintf.c **** 	va_end(args);
 531:lib/vsprintf.c **** 	return i;
 532:lib/vsprintf.c **** }
 1090              		.loc 1 532 0
 1091 0020 04D08DE2 		add	sp, sp, #4
 1092 0024 04E09DE4 		ldr	lr, [sp], #4
 1093 0028 08D08DE2 		add	sp, sp, #8
 1094 002c 1EFF2FE1 		bx	lr
 1095              	.LFE12:
 1097              		.section	.text.scnprintf,"ax",%progbits
 1098              		.align	2
 1099              		.global	scnprintf
 1101              	scnprintf:
 1102              	.LFB13:
 533:lib/vsprintf.c **** 
 534:lib/vsprintf.c **** 
 535:lib/vsprintf.c **** /**
 536:lib/vsprintf.c ****  * scnprintf - Format a string and place it in a buffer
 537:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 538:lib/vsprintf.c ****  * @size: The size of the buffer, including the trailing null space
 539:lib/vsprintf.c ****  * @fmt: The format string to use
 540:lib/vsprintf.c ****  * @...: Arguments for the format string
 541:lib/vsprintf.c ****  *
 542:lib/vsprintf.c ****  * The return value is the number of characters written into @buf not including
 543:lib/vsprintf.c ****  * the trailing '\0'. If @size is <= 0 the function returns 0. If the return is
 544:lib/vsprintf.c ****  * greater than or equal to @size, the resulting string is truncated.
 545:lib/vsprintf.c ****  */
 546:lib/vsprintf.c **** 
 547:lib/vsprintf.c **** int scnprintf(char * buf, size_t size, const char *fmt, ...)
 548:lib/vsprintf.c **** {
 1103              		.loc 1 548 0
 1104              		@ args = 4, pretend = 8, frame = 4
 1105              		@ frame_needed = 0, uses_anonymous_args = 1
 1106              	.LVL119:
 1107 0000 0C002DE9 		stmfd	sp!, {r2, r3}
 1108              	.LCFI9:
 1109 0004 10402DE9 		stmfd	sp!, {r4, lr}
 1110              	.LCFI10:
 1111 0008 04D04DE2 		sub	sp, sp, #4
 1112              	.LCFI11:
 1113              	.LVL120:
 549:lib/vsprintf.c **** 	va_list args;
 550:lib/vsprintf.c **** 	unsigned int i;
 551:lib/vsprintf.c **** 
 552:lib/vsprintf.c **** 	va_start(args, fmt);
 1114              		.loc 1 552 0
 1115 000c 10C08DE2 		add	ip, sp, #16
 553:lib/vsprintf.c **** 	i = vsnprintf(buf, size, fmt, args);
 1116              		.loc 1 553 0
 1117 0010 0C30A0E1 		mov	r3, ip
 1118              	.LVL121:
 1119 0014 0C209DE5 		ldr	r2, [sp, #12]
 1120              		.loc 1 548 0
 1121 0018 0140A0E1 		mov	r4, r1
 1122              		.loc 1 552 0
 1123 001c 00C08DE5 		str	ip, [sp, #0]
 1124              		.loc 1 553 0
 1125 0020 FEFFFFEB 		bl	vsnprintf
 1126              	.LVL122:
 1127              	.LVL123:
 554:lib/vsprintf.c **** 	va_end(args);
 555:lib/vsprintf.c **** 	return (i >= size) ? (size - 1) : i;
 1128              		.loc 1 555 0
 1129 0024 040050E1 		cmp	r0, r4
 1130 0028 014044E2 		sub	r4, r4, #1
 1131              	.LVL124:
 1132 002c 0040A031 		movcc	r4, r0
 556:lib/vsprintf.c **** }
 1133              		.loc 1 556 0
 1134 0030 0400A0E1 		mov	r0, r4
 1135              	.LVL125:
 1136 0034 04D08DE2 		add	sp, sp, #4
 1137 0038 1040BDE8 		ldmfd	sp!, {r4, lr}
 1138 003c 08D08DE2 		add	sp, sp, #8
 1139 0040 1EFF2FE1 		bx	lr
 1140              	.LFE13:
 1142              		.section	.text.vsprintf,"ax",%progbits
 1143              		.align	2
 1144              		.global	vsprintf
 1146              	vsprintf:
 1147              	.LFB14:
 557:lib/vsprintf.c **** 
 558:lib/vsprintf.c **** /**
 559:lib/vsprintf.c ****  * vsprintf - Format a string and place it in a buffer
 560:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 561:lib/vsprintf.c ****  * @fmt: The format string to use
 562:lib/vsprintf.c ****  * @args: Arguments for the format string
 563:lib/vsprintf.c ****  *
 564:lib/vsprintf.c ****  * The function returns the number of characters written
 565:lib/vsprintf.c ****  * into @buf. Use vsnprintf or vscnprintf in order to avoid
 566:lib/vsprintf.c ****  * buffer overflows.
 567:lib/vsprintf.c ****  *
 568:lib/vsprintf.c ****  * Call this function if you are already dealing with a va_list.
 569:lib/vsprintf.c ****  * You probably want sprintf instead.
 570:lib/vsprintf.c ****  */
 571:lib/vsprintf.c **** int vsprintf(char *buf, const char *fmt, va_list args)
 572:lib/vsprintf.c **** {
 1148              		.loc 1 572 0
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151              		@ link register save eliminated.
 1152              	.LVL126:
 1153 0000 0230A0E1 		mov	r3, r2
 573:lib/vsprintf.c **** 	return vsnprintf(buf, INT_MAX, fmt, args);
 1154              		.loc 1 573 0
 1155 0004 0120A0E1 		mov	r2, r1
 1156              	.LVL127:
 1157 0008 0211E0E3 		mvn	r1, #-2147483648
 1158              	.LVL128:
 1159              		.loc 1 572 0
 1160              		@ lr needed for prologue
 574:lib/vsprintf.c **** }
 1161              		.loc 1 574 0
 1162              		.loc 1 573 0
 1163 000c FEFFFFEA 		b	vsnprintf
 1164              	.LVL129:
 1165              	.LFE14:
 1167              		.section	.text.sprintf,"ax",%progbits
 1168              		.align	2
 1169              		.global	sprintf
 1171              	sprintf:
 1172              	.LFB15:
 575:lib/vsprintf.c **** 
 576:lib/vsprintf.c **** 
 577:lib/vsprintf.c **** /**
 578:lib/vsprintf.c ****  * sprintf - Format a string and place it in a buffer
 579:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 580:lib/vsprintf.c ****  * @fmt: The format string to use
 581:lib/vsprintf.c ****  * @...: Arguments for the format string
 582:lib/vsprintf.c ****  *
 583:lib/vsprintf.c ****  * The function returns the number of characters written
 584:lib/vsprintf.c ****  * into @buf. Use snprintf or scnprintf in order to avoid
 585:lib/vsprintf.c ****  * buffer overflows.
 586:lib/vsprintf.c ****  */
 587:lib/vsprintf.c **** int sprintf(char * buf, const char *fmt, ...)
 588:lib/vsprintf.c **** {
 1173              		.loc 1 588 0
 1174              		@ args = 4, pretend = 12, frame = 4
 1175              		@ frame_needed = 0, uses_anonymous_args = 1
 1176              	.LVL130:
 1177 0000 0E002DE9 		stmfd	sp!, {r1, r2, r3}
 1178              	.LCFI12:
 1179 0004 04E02DE5 		str	lr, [sp, #-4]!
 1180              	.LCFI13:
 1181 0008 04D04DE2 		sub	sp, sp, #4
 1182              	.LCFI14:
 1183              	.LVL131:
 589:lib/vsprintf.c **** 	va_list args;
 590:lib/vsprintf.c **** 	int i;
 591:lib/vsprintf.c **** 
 592:lib/vsprintf.c **** 	va_start(args, fmt);
 1184              		.loc 1 592 0
 1185 000c 0CC08DE2 		add	ip, sp, #12
 593:lib/vsprintf.c **** 	i=vsnprintf(buf, INT_MAX, fmt, args);
 1186              		.loc 1 593 0
 1187 0010 0C30A0E1 		mov	r3, ip
 1188              	.LVL132:
 1189 0014 0211E0E3 		mvn	r1, #-2147483648
 1190 0018 08209DE5 		ldr	r2, [sp, #8]
 1191              		.loc 1 592 0
 1192 001c 00C08DE5 		str	ip, [sp, #0]
 1193              		.loc 1 593 0
 1194 0020 FEFFFFEB 		bl	vsnprintf
 1195              	.LVL133:
 594:lib/vsprintf.c **** 	va_end(args);
 595:lib/vsprintf.c **** 	return i;
 596:lib/vsprintf.c **** }
 1196              		.loc 1 596 0
 1197 0024 04D08DE2 		add	sp, sp, #4
 1198 0028 04E09DE4 		ldr	lr, [sp], #4
 1199 002c 0CD08DE2 		add	sp, sp, #12
 1200 0030 1EFF2FE1 		bx	lr
 1201              	.LFE15:
 1203              		.section	.text.puts,"ax",%progbits
 1204              		.align	2
 1205              		.global	puts
 1207              	puts:
 1208              	.LFB18:
 597:lib/vsprintf.c **** 
 598:lib/vsprintf.c **** 
 599:lib/vsprintf.c **** /**
 600:lib/vsprintf.c ****  * vsscanf - Unformat a buffer into a list of arguments
 601:lib/vsprintf.c ****  * @buf:	input buffer
 602:lib/vsprintf.c ****  * @fmt:	format of buffer
 603:lib/vsprintf.c ****  * @args:	arguments
 604:lib/vsprintf.c ****  */
 605:lib/vsprintf.c **** int vsscanf(const char * buf, const char * fmt, va_list args)
 606:lib/vsprintf.c **** {
 607:lib/vsprintf.c **** 	const char *str = buf;
 608:lib/vsprintf.c **** 	char *next;
 609:lib/vsprintf.c **** 	char digit;
 610:lib/vsprintf.c **** 	int num = 0;
 611:lib/vsprintf.c **** 	int qualifier;
 612:lib/vsprintf.c **** 	int base;
 613:lib/vsprintf.c **** 	int field_width;
 614:lib/vsprintf.c **** 	int is_sign = 0;
 615:lib/vsprintf.c **** 
 616:lib/vsprintf.c **** 	while(*fmt && *str) {
 617:lib/vsprintf.c **** 		/* skip any white space in format */
 618:lib/vsprintf.c **** 		/* white space in format matches any amount of
 619:lib/vsprintf.c **** 		 * white space, including none, in the input.
 620:lib/vsprintf.c **** 		 */
 621:lib/vsprintf.c **** 		if (isspace(*fmt)) {
 622:lib/vsprintf.c **** 			while (isspace(*fmt))
 623:lib/vsprintf.c **** 				++fmt;
 624:lib/vsprintf.c **** 			while (isspace(*str))
 625:lib/vsprintf.c **** 				++str;
 626:lib/vsprintf.c **** 		}
 627:lib/vsprintf.c **** 
 628:lib/vsprintf.c **** 		/* anything that is not a conversion must match exactly */
 629:lib/vsprintf.c **** 		if (*fmt != '%' && *fmt) {
 630:lib/vsprintf.c **** 			if (*fmt++ != *str++)
 631:lib/vsprintf.c **** 				break;
 632:lib/vsprintf.c **** 			continue;
 633:lib/vsprintf.c **** 		}
 634:lib/vsprintf.c **** 
 635:lib/vsprintf.c **** 		if (!*fmt)
 636:lib/vsprintf.c **** 			break;
 637:lib/vsprintf.c **** 		++fmt;
 638:lib/vsprintf.c **** 		
 639:lib/vsprintf.c **** 		/* skip this conversion.
 640:lib/vsprintf.c **** 		 * advance both strings to next white space
 641:lib/vsprintf.c **** 		 */
 642:lib/vsprintf.c **** 		if (*fmt == '*') {
 643:lib/vsprintf.c **** 			while (!isspace(*fmt) && *fmt)
 644:lib/vsprintf.c **** 				fmt++;
 645:lib/vsprintf.c **** 			while (!isspace(*str) && *str)
 646:lib/vsprintf.c **** 				str++;
 647:lib/vsprintf.c **** 			continue;
 648:lib/vsprintf.c **** 		}
 649:lib/vsprintf.c **** 
 650:lib/vsprintf.c **** 		/* get field width */
 651:lib/vsprintf.c **** 		field_width = -1;
 652:lib/vsprintf.c **** 		if (isdigit(*fmt))
 653:lib/vsprintf.c **** 			field_width = skip_atoi(&fmt);
 654:lib/vsprintf.c **** 
 655:lib/vsprintf.c **** 		/* get conversion qualifier */
 656:lib/vsprintf.c **** 		qualifier = -1;
 657:lib/vsprintf.c **** 		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
 658:lib/vsprintf.c **** 		    *fmt == 'Z' || *fmt == 'z') {
 659:lib/vsprintf.c **** 			qualifier = *fmt++;
 660:lib/vsprintf.c **** 			if (qualifier == *fmt) {
 661:lib/vsprintf.c **** 				if (qualifier == 'h') {
 662:lib/vsprintf.c **** 					qualifier = 'H';
 663:lib/vsprintf.c **** 					fmt++;
 664:lib/vsprintf.c **** 				} else if (qualifier == 'l') {
 665:lib/vsprintf.c **** 					qualifier = 'L';
 666:lib/vsprintf.c **** 					fmt++;
 667:lib/vsprintf.c **** 				}
 668:lib/vsprintf.c **** 			}
 669:lib/vsprintf.c **** 		}
 670:lib/vsprintf.c **** 		base = 10;
 671:lib/vsprintf.c **** 		is_sign = 0;
 672:lib/vsprintf.c **** 
 673:lib/vsprintf.c **** 		if (!*fmt || !*str)
 674:lib/vsprintf.c **** 			break;
 675:lib/vsprintf.c **** 
 676:lib/vsprintf.c **** 		switch(*fmt++) {
 677:lib/vsprintf.c **** 		case 'c':
 678:lib/vsprintf.c **** 		{
 679:lib/vsprintf.c **** 			char *s = (char *) va_arg(args,char*);
 680:lib/vsprintf.c **** 			if (field_width == -1)
 681:lib/vsprintf.c **** 				field_width = 1;
 682:lib/vsprintf.c **** 			do {
 683:lib/vsprintf.c **** 				*s++ = *str++;
 684:lib/vsprintf.c **** 			} while (--field_width > 0 && *str);
 685:lib/vsprintf.c **** 			num++;
 686:lib/vsprintf.c **** 		}
 687:lib/vsprintf.c **** 		continue;
 688:lib/vsprintf.c **** 		case 's':
 689:lib/vsprintf.c **** 		{
 690:lib/vsprintf.c **** 			char *s = (char *) va_arg(args, char *);
 691:lib/vsprintf.c **** 			if(field_width == -1)
 692:lib/vsprintf.c **** 				field_width = INT_MAX;
 693:lib/vsprintf.c **** 			/* first, skip leading white space in buffer */
 694:lib/vsprintf.c **** 			while (isspace(*str))
 695:lib/vsprintf.c **** 				str++;
 696:lib/vsprintf.c **** 
 697:lib/vsprintf.c **** 			/* now copy until next white space */
 698:lib/vsprintf.c **** 			while (*str && !isspace(*str) && field_width--) {
 699:lib/vsprintf.c **** 				*s++ = *str++;
 700:lib/vsprintf.c **** 			}
 701:lib/vsprintf.c **** 			*s = '\0';
 702:lib/vsprintf.c **** 			num++;
 703:lib/vsprintf.c **** 		}
 704:lib/vsprintf.c **** 		continue;
 705:lib/vsprintf.c **** 		case 'n':
 706:lib/vsprintf.c **** 			/* return number of characters read so far */
 707:lib/vsprintf.c **** 		{
 708:lib/vsprintf.c **** 			int *i = (int *)va_arg(args,int*);
 709:lib/vsprintf.c **** 			*i = str - buf;
 710:lib/vsprintf.c **** 		}
 711:lib/vsprintf.c **** 		continue;
 712:lib/vsprintf.c **** 		case 'o':
 713:lib/vsprintf.c **** 			base = 8;
 714:lib/vsprintf.c **** 			break;
 715:lib/vsprintf.c **** 		case 'x':
 716:lib/vsprintf.c **** 		case 'X':
 717:lib/vsprintf.c **** 			base = 16;
 718:lib/vsprintf.c **** 			break;
 719:lib/vsprintf.c **** 		case 'i':
 720:lib/vsprintf.c ****                         base = 0;
 721:lib/vsprintf.c **** 		case 'd':
 722:lib/vsprintf.c **** 			is_sign = 1;
 723:lib/vsprintf.c **** 		case 'u':
 724:lib/vsprintf.c **** 			break;
 725:lib/vsprintf.c **** 		case '%':
 726:lib/vsprintf.c **** 			/* looking for '%' in str */
 727:lib/vsprintf.c **** 			if (*str++ != '%') 
 728:lib/vsprintf.c **** 				return num;
 729:lib/vsprintf.c **** 			continue;
 730:lib/vsprintf.c **** 		default:
 731:lib/vsprintf.c **** 			/* invalid format; stop here */
 732:lib/vsprintf.c **** 			return num;
 733:lib/vsprintf.c **** 		}
 734:lib/vsprintf.c **** 
 735:lib/vsprintf.c **** 		/* have some sort of integer conversion.
 736:lib/vsprintf.c **** 		 * first, skip white space in buffer.
 737:lib/vsprintf.c **** 		 */
 738:lib/vsprintf.c **** 		while (isspace(*str))
 739:lib/vsprintf.c **** 			str++;
 740:lib/vsprintf.c **** 
 741:lib/vsprintf.c **** 		digit = *str;
 742:lib/vsprintf.c **** 		if (is_sign && digit == '-')
 743:lib/vsprintf.c **** 			digit = *(str + 1);
 744:lib/vsprintf.c **** 
 745:lib/vsprintf.c **** 		if (!digit
 746:lib/vsprintf.c ****                     || (base == 16 && !isxdigit(digit))
 747:lib/vsprintf.c ****                     || (base == 10 && !isdigit(digit))
 748:lib/vsprintf.c ****                     || (base == 8 && (!isdigit(digit) || digit > '7'))
 749:lib/vsprintf.c ****                     || (base == 0 && !isdigit(digit)))
 750:lib/vsprintf.c **** 				break;
 751:lib/vsprintf.c **** 
 752:lib/vsprintf.c **** 		switch(qualifier) {
 753:lib/vsprintf.c **** 		case 'H':	/* that's 'hh' in format */
 754:lib/vsprintf.c **** 			if (is_sign) {
 755:lib/vsprintf.c **** 				signed char *s = (signed char *) va_arg(args,signed char *);
 756:lib/vsprintf.c **** 				*s = (signed char) strtol(str,&next,base);
 757:lib/vsprintf.c **** 			} else {
 758:lib/vsprintf.c **** 				unsigned char *s = (unsigned char *) va_arg(args, unsigned char *);
 759:lib/vsprintf.c **** 				*s = (unsigned char) strtoul(str, &next, base);
 760:lib/vsprintf.c **** 			}
 761:lib/vsprintf.c **** 			break;
 762:lib/vsprintf.c **** 		case 'h':
 763:lib/vsprintf.c **** 			if (is_sign) {
 764:lib/vsprintf.c **** 				short *s = (short *) va_arg(args,short *);
 765:lib/vsprintf.c **** 				*s = (short) strtol(str,&next,base);
 766:lib/vsprintf.c **** 			} else {
 767:lib/vsprintf.c **** 				unsigned short *s = (unsigned short *) va_arg(args, unsigned short *);
 768:lib/vsprintf.c **** 				*s = (unsigned short) strtoul(str, &next, base);
 769:lib/vsprintf.c **** 			}
 770:lib/vsprintf.c **** 			break;
 771:lib/vsprintf.c **** 		case 'l':
 772:lib/vsprintf.c **** 			if (is_sign) {
 773:lib/vsprintf.c **** 				long *l = (long *) va_arg(args,long *);
 774:lib/vsprintf.c **** 				*l = strtol(str,&next,base);
 775:lib/vsprintf.c **** 			} else {
 776:lib/vsprintf.c **** 				unsigned long *l = (unsigned long*) va_arg(args,unsigned long*);
 777:lib/vsprintf.c **** 				*l = strtoul(str,&next,base);
 778:lib/vsprintf.c **** 			}
 779:lib/vsprintf.c **** 			break;
 780:lib/vsprintf.c **** 		case 'L':
 781:lib/vsprintf.c **** 			if (is_sign) {
 782:lib/vsprintf.c **** 				long long *l = (long long*) va_arg(args,long long *);
 783:lib/vsprintf.c **** 				*l = strtoll(str,&next,base);
 784:lib/vsprintf.c **** 			} else {
 785:lib/vsprintf.c **** 				unsigned long long *l = (unsigned long long*) va_arg(args,unsigned long long*);
 786:lib/vsprintf.c **** 				*l = strtoull(str,&next,base);
 787:lib/vsprintf.c **** 			}
 788:lib/vsprintf.c **** 			break;
 789:lib/vsprintf.c **** 		case 'Z':
 790:lib/vsprintf.c **** 		case 'z':
 791:lib/vsprintf.c **** 		{
 792:lib/vsprintf.c **** 			size_t *s = (size_t*) va_arg(args,size_t*);
 793:lib/vsprintf.c **** 			*s = (size_t) strtoul(str,&next,base);
 794:lib/vsprintf.c **** 		}
 795:lib/vsprintf.c **** 		break;
 796:lib/vsprintf.c **** 		default:
 797:lib/vsprintf.c **** 			if (is_sign) {
 798:lib/vsprintf.c **** 				int *i = (int *) va_arg(args, int*);
 799:lib/vsprintf.c **** 				*i = (int) strtol(str,&next,base);
 800:lib/vsprintf.c **** 			} else {
 801:lib/vsprintf.c **** 				unsigned int *i = (unsigned int*) va_arg(args, unsigned int*);
 802:lib/vsprintf.c **** 				*i = (unsigned int) strtoul(str,&next,base);
 803:lib/vsprintf.c **** 			}
 804:lib/vsprintf.c **** 			break;
 805:lib/vsprintf.c **** 		}
 806:lib/vsprintf.c **** 		num++;
 807:lib/vsprintf.c **** 
 808:lib/vsprintf.c **** 		if (!next)
 809:lib/vsprintf.c **** 			break;
 810:lib/vsprintf.c **** 		str = next;
 811:lib/vsprintf.c **** 	}
 812:lib/vsprintf.c **** 	return num;
 813:lib/vsprintf.c **** }
 814:lib/vsprintf.c **** 
 815:lib/vsprintf.c **** 
 816:lib/vsprintf.c **** /**
 817:lib/vsprintf.c ****  * sscanf - Unformat a buffer into a list of arguments
 818:lib/vsprintf.c ****  * @buf:	input buffer
 819:lib/vsprintf.c ****  * @fmt:	formatting of buffer
 820:lib/vsprintf.c ****  * @...:	resulting arguments
 821:lib/vsprintf.c ****  */
 822:lib/vsprintf.c **** int sscanf(const char * buf, const char * fmt, ...)
 823:lib/vsprintf.c **** {
 824:lib/vsprintf.c **** 	va_list args;
 825:lib/vsprintf.c **** 	int i;
 826:lib/vsprintf.c **** 
 827:lib/vsprintf.c **** 	va_start(args,fmt);
 828:lib/vsprintf.c **** 	i = vsscanf(buf,fmt,args);
 829:lib/vsprintf.c **** 	va_end(args);
 830:lib/vsprintf.c **** 	return i;
 831:lib/vsprintf.c **** }
 832:lib/vsprintf.c **** 
 833:lib/vsprintf.c **** /* generic puts() implementation independent of who provides putchar() */
 834:lib/vsprintf.c **** int puts(const char *s)
 835:lib/vsprintf.c **** {
 1209              		.loc 1 835 0
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              		@ link register save eliminated.
 1213              	.LVL134:
 1214              		@ lr needed for prologue
 836:lib/vsprintf.c **** #ifdef ARCH_HAS_CONSOLE
 837:lib/vsprintf.c **** 	return _puts(s);
 838:lib/vsprintf.c **** #else
 839:lib/vsprintf.c **** 	while (1) {
 840:lib/vsprintf.c **** 		char c = *s++;
 841:lib/vsprintf.c **** 		if (c == 0)
 842:lib/vsprintf.c **** 			return;
 843:lib/vsprintf.c **** 		putchar(c);
 844:lib/vsprintf.c **** 	}
 845:lib/vsprintf.c **** 	return 0;
 846:lib/vsprintf.c **** #endif
 847:lib/vsprintf.c **** }
 1215              		.loc 1 847 0
 1216              		.loc 1 837 0
 1217 0000 FEFFFFEA 		b	sercomm_puts
 1218              	.LVL135:
 1219              	.LFE18:
 1221              		.section	.text.strtoul,"ax",%progbits
 1222              		.align	2
 1223              		.global	strtoul
 1225              	strtoul:
 1226              	.LFB4:
 1227              		.loc 1 35 0
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              	.LVL136:
 1231 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 1232              	.LCFI15:
 1233              		.loc 1 38 0
 1234 0004 004052E2 		subs	r4, r2, #0
 1235              		.loc 1 35 0
 1236 0008 0150A0E1 		mov	r5, r1
 1237              		.loc 1 38 0
 1238 000c 1900001A 		bne	.L247
 1239              	.LVL137:
 1240              		.loc 1 40 0
 1241 0010 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1242 0014 300053E3 		cmp	r3, #48
 1243 0018 0A40A013 		movne	r4, #10
 1244 001c 1700001A 		bne	.L251
 1245              		.loc 1 42 0
 1246 0020 0120D0E5 		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 1247              	.LVL138:
 1248              	.LBB10:
 1249              	.LBB11:
 1250              		.file 2 "include/ctype.h"
   1:include/ctype.h **** #ifndef _LINUX_CTYPE_H
   2:include/ctype.h **** #define _LINUX_CTYPE_H
   3:include/ctype.h **** 
   4:include/ctype.h **** /*
   5:include/ctype.h ****  * NOTE! This ctype does not handle EOF like the standard C
   6:include/ctype.h ****  * library is required to.
   7:include/ctype.h ****  */
   8:include/ctype.h **** 
   9:include/ctype.h **** #define _U	0x01	/* upper */
  10:include/ctype.h **** #define _L	0x02	/* lower */
  11:include/ctype.h **** #define _D	0x04	/* digit */
  12:include/ctype.h **** #define _C	0x08	/* cntrl */
  13:include/ctype.h **** #define _P	0x10	/* punct */
  14:include/ctype.h **** #define _S	0x20	/* white space (space/lf/tab) */
  15:include/ctype.h **** #define _X	0x40	/* hex digit */
  16:include/ctype.h **** #define _SP	0x80	/* hard space (0x20) */
  17:include/ctype.h **** 
  18:include/ctype.h **** extern unsigned char _ctype[];
  19:include/ctype.h **** 
  20:include/ctype.h **** #define __ismask(x) (_ctype[(int)(unsigned char)(x)])
  21:include/ctype.h **** 
  22:include/ctype.h **** #define isalnum(c)	((__ismask(c)&(_U|_L|_D)) != 0)
  23:include/ctype.h **** #define isalpha(c)	((__ismask(c)&(_U|_L)) != 0)
  24:include/ctype.h **** #define iscntrl(c)	((__ismask(c)&(_C)) != 0)
  25:include/ctype.h **** #define isdigit(c)	((__ismask(c)&(_D)) != 0)
  26:include/ctype.h **** #define isgraph(c)	((__ismask(c)&(_P|_U|_L|_D)) != 0)
  27:include/ctype.h **** #define islower(c)	((__ismask(c)&(_L)) != 0)
  28:include/ctype.h **** #define isprint(c)	((__ismask(c)&(_P|_U|_L|_D|_SP)) != 0)
  29:include/ctype.h **** #define ispunct(c)	((__ismask(c)&(_P)) != 0)
  30:include/ctype.h **** #define isspace(c)	((__ismask(c)&(_S)) != 0)
  31:include/ctype.h **** #define isupper(c)	((__ismask(c)&(_U)) != 0)
  32:include/ctype.h **** #define isxdigit(c)	((__ismask(c)&(_D|_X)) != 0)
  33:include/ctype.h **** 
  34:include/ctype.h **** #define isascii(c) (((unsigned char)(c))<=0x7f)
  35:include/ctype.h **** #define toascii(c) (((unsigned char)(c))&0x7f)
  36:include/ctype.h **** 
  37:include/ctype.h **** static inline unsigned char __tolower(unsigned char c)
  38:include/ctype.h **** {
  39:include/ctype.h **** 	if (isupper(c))
  40:include/ctype.h **** 		c -= 'A'-'a';
  41:include/ctype.h **** 	return c;
  42:include/ctype.h **** }
  43:include/ctype.h **** 
  44:include/ctype.h **** static inline unsigned char __toupper(unsigned char c)
  45:include/ctype.h **** {
  46:include/ctype.h **** 	if (islower(c))
 1251              		.loc 2 46 0
 1252 0024 D0E09FE5 		ldr	lr, .L274
 1253 0028 0230DEE7 		ldrb	r3, [lr, r2]	@ zero_extendqisi2
 1254 002c 020013E3 		tst	r3, #2
  47:include/ctype.h **** 		c -= 'a'-'A';
 1255              		.loc 2 47 0
 1256 0030 20304212 		subne	r3, r2, #32
 1257 0034 FF200312 		andne	r2, r3, #255
 1258              	.LBE11:
 1259              	.LBE10:
 1260              		.loc 1 43 0
 1261 0038 580052E3 		cmp	r2, #88
 1262              		.loc 1 42 0
 1263 003c 01C080E2 		add	ip, r0, #1
 1264              	.LVL139:
 1265              		.loc 1 43 0
 1266 0040 1300001A 		bne	.L254
 1267 0044 0230F0E5 		ldrb	r3, [r0, #2]!	@ z_extendqisi
 1268 0048 0330DEE7 		ldrb	r3, [lr, r3]	@ zero_extendqisi2
 1269 004c 440013E3 		tst	r3, #68
 1270 0050 1600001A 		bne	.L256
 1271              	.L254:
 1272 0054 0C00A0E1 		mov	r0, ip
 1273 0058 0840A0E3 		mov	r4, #8
 1274 005c 170000EA 		b	.L251
 1275              	.LVL140:
 1276              	.L256:
 1277 0060 1040A0E3 		mov	r4, #16
 1278              	.L251:
 1279 0064 0010A0E3 		mov	r1, #0
 1280              	.LVL141:
 1281 0068 2A0000EA 		b	.L257
 1282              	.LVL142:
 1283              	.L247:
 1284              		.loc 1 48 0
 1285 006c 100054E3 		cmp	r4, #16
 1286 0070 1700001A 		bne	.L251
 1287              		.loc 1 49 0
 1288 0074 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1289 0078 300053E3 		cmp	r3, #48
 1290 007c 1600001A 		bne	.L256
 1291 0080 01C0D0E5 		ldrb	ip, [r0, #1]	@ zero_extendqisi2
 1292              	.LVL143:
 1293              	.LBB12:
 1294              	.LBB13:
 1295              		.loc 2 46 0
 1296 0084 70309FE5 		ldr	r3, .L274
 1297 0088 0C30D3E7 		ldrb	r3, [r3, ip]	@ zero_extendqisi2
 1298 008c 020013E3 		tst	r3, #2
 1299              		.loc 2 47 0
 1300 0090 20304C12 		subne	r3, ip, #32
 1301 0094 FFC00312 		andne	ip, r3, #255
 1302              	.LBE13:
 1303              	.LBE12:
 1304              		.loc 1 49 0
 1305 0098 58005CE3 		cmp	ip, #88
 1306              		.loc 1 50 0
 1307 009c 02008002 		addeq	r0, r0, #2
 1308              		.loc 1 49 0
 1309 00a0 1700000A 		beq	.L251
 1310 00a4 160000EA 		b	.L256
 1311              	.LVL144:
 1312              	.L263:
 1313              		.loc 1 54 0
 1314 00a8 942121E0 		mla	r1, r4, r1, r2
 1315              		.loc 1 55 0
 1316 00ac 010080E2 		add	r0, r0, #1
 1317              	.LVL145:
 1318              	.L257:
 1319              		.loc 1 52 0
 1320 00b0 00C0D0E5 		ldrb	ip, [r0, #0]	@ zero_extendqisi2
 1321              	.LVL146:
 1322 00b4 40309FE5 		ldr	r3, .L274
 1323              	.LVL147:
 1324 00b8 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2
 1325 00bc 44001EE3 		tst	lr, #68
 1326 00c0 30204CE2 		sub	r2, ip, #48
 1327              	.LVL148:
 1328 00c4 3900000A 		beq	.L264
 1329 00c8 04001EE3 		tst	lr, #4
 1330 00cc 0C30A0E1 		mov	r3, ip
 1331              	.LVL149:
 1332 00d0 3700001A 		bne	.L268
 1333              	.LBB14:
 1334              	.LBB15:
 1335              		.loc 2 46 0
 1336 00d4 02001EE3 		tst	lr, #2
 1337              		.loc 2 47 0
 1338 00d8 20C04CE2 		sub	ip, ip, #32
 1339 00dc FF300C12 		andne	r3, ip, #255
 1340              	.LBE15:
 1341              	.LBE14:
 1342              		.loc 1 52 0
 1343 00e0 372043E2 		sub	r2, r3, #55
 1344              	.L268:
 1345 00e4 040052E1 		cmp	r2, r4
 1346 00e8 2800003A 		bcc	.L263
 1347              	.L264:
 1348              		.loc 1 57 0
 1349 00ec 000055E3 		cmp	r5, #0
 1350              		.loc 1 58 0
 1351 00f0 00008515 		strne	r0, [r5, #0]
 1352              		.loc 1 60 0
 1353 00f4 0100A0E1 		mov	r0, r1
 1354              	.LVL150:
 1355 00f8 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 1356              	.L275:
 1357              		.align	2
 1358              	.L274:
 1359 00fc 00000000 		.word	_ctype
 1360              	.LFE4:
 1362              		.section	.text.strtol,"ax",%progbits
 1363              		.align	2
 1364              		.global	strtol
 1366              	strtol:
 1367              	.LFB5:
 1368              		.loc 1 70 0
 1369              		@ args = 0, pretend = 0, frame = 0
 1370              		@ frame_needed = 0, uses_anonymous_args = 0
 1371              	.LVL151:
 1372 0000 04E02DE5 		str	lr, [sp, #-4]!
 1373              	.LCFI16:
 1374              		.loc 1 71 0
 1375 0004 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1376 0008 2D0053E3 		cmp	r3, #45
 1377 000c 0400000A 		beq	.L281
 1378              		.loc 1 74 0
 1379 0010 04E09DE4 		ldr	lr, [sp], #4
 1380              		.loc 1 73 0
 1381 0014 FEFFFFEA 		b	strtoul
 1382              	.LVL152:
 1383              	.L281:
 1384              		.loc 1 72 0
 1385 0018 010080E2 		add	r0, r0, #1
 1386              	.LVL153:
 1387 001c FEFFFFEB 		bl	strtoul
 1388              	.LVL154:
 1389              		.loc 1 74 0
 1390 0020 000060E2 		rsb	r0, r0, #0
 1391 0024 04F09DE4 		ldr	pc, [sp], #4
 1392              	.LFE5:
 1394              		.section	.text.strtoull,"ax",%progbits
 1395              		.align	2
 1396              		.global	strtoull
 1398              	strtoull:
 1399              	.LFB6:
 1400              		.loc 1 84 0
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
 1403              	.LVL155:
 1404 0000 F0472DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1405              	.LCFI17:
 1406              		.loc 1 87 0
 1407 0004 00A052E2 		subs	sl, r2, #0
 1408              		.loc 1 84 0
 1409 0008 00E0A0E1 		mov	lr, r0
 1410 000c 0190A0E1 		mov	r9, r1
 1411              		.loc 1 87 0
 1412 0010 1B00001A 		bne	.L283
 1413              	.LVL156:
 1414              		.loc 1 89 0
 1415 0014 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1416 0018 300053E3 		cmp	r3, #48
 1417 001c 0AA0A013 		movne	sl, #10
 1418 0020 1800001A 		bne	.L287
 1419              	.LVL157:
 1420              		.loc 1 91 0
 1421 0024 0120D0E5 		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 1422              	.LVL158:
 1423              	.LBB16:
 1424              	.LBB17:
 1425              		.loc 2 46 0
 1426 0028 FCC09FE5 		ldr	ip, .L313
 1427 002c 0230DCE7 		ldrb	r3, [ip, r2]	@ zero_extendqisi2
 1428 0030 020013E3 		tst	r3, #2
 1429              		.loc 2 47 0
 1430 0034 20304212 		subne	r3, r2, #32
 1431 0038 FF200312 		andne	r2, r3, #255
 1432              	.LBE17:
 1433              	.LBE16:
 1434              		.loc 1 92 0
 1435 003c 580052E3 		cmp	r2, #88
 1436              		.loc 1 91 0
 1437 0040 010080E2 		add	r0, r0, #1
 1438              	.LVL159:
 1439              		.loc 1 92 0
 1440 0044 1400001A 		bne	.L290
 1441 0048 0230FEE5 		ldrb	r3, [lr, #2]!	@ z_extendqisi
 1442 004c 0330DCE7 		ldrb	r3, [ip, r3]	@ zero_extendqisi2
 1443 0050 440013E3 		tst	r3, #68
 1444 0054 1700001A 		bne	.L292
 1445              	.L290:
 1446 0058 00E0A0E1 		mov	lr, r0
 1447 005c 08A0A0E3 		mov	sl, #8
 1448 0060 180000EA 		b	.L287
 1449              	.LVL160:
 1450              	.L292:
 1451 0064 10A0A0E3 		mov	sl, #16
 1452              	.L287:
 1453 0068 0070A0E3 		mov	r7, #0
 1454              	.LVL161:
 1455 006c 0080A0E3 		mov	r8, #0
 1456              	.LVL162:
 1457 0070 2F0000EA 		b	.L293
 1458              	.LVL163:
 1459              	.L283:
 1460              		.loc 1 97 0
 1461 0074 10005AE3 		cmp	sl, #16
 1462 0078 1800001A 		bne	.L287
 1463              		.loc 1 98 0
 1464 007c 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1465 0080 300053E3 		cmp	r3, #48
 1466 0084 1700001A 		bne	.L292
 1467              	.LVL164:
 1468 0088 01C0D0E5 		ldrb	ip, [r0, #1]	@ zero_extendqisi2
 1469              	.LVL165:
 1470              	.LBB18:
 1471              	.LBB19:
 1472              		.loc 2 46 0
 1473 008c 98309FE5 		ldr	r3, .L313
 1474 0090 0C30D3E7 		ldrb	r3, [r3, ip]	@ zero_extendqisi2
 1475 0094 020013E3 		tst	r3, #2
 1476              		.loc 2 47 0
 1477 0098 20304C12 		subne	r3, ip, #32
 1478 009c FFC00312 		andne	ip, r3, #255
 1479              	.LBE19:
 1480              	.LBE18:
 1481              		.loc 1 98 0
 1482 00a0 58005CE3 		cmp	ip, #88
 1483              		.loc 1 99 0
 1484 00a4 02E08002 		addeq	lr, r0, #2
 1485              		.loc 1 98 0
 1486 00a8 1800000A 		beq	.L287
 1487              	.LVL166:
 1488 00ac 170000EA 		b	.L292
 1489              	.LVL167:
 1490              	.L299:
 1491              		.loc 1 103 0
 1492 00b0 973184E0 		umull	r3, r4, r7, r1
 1493 00b4 984124E0 		mla	r4, r8, r1, r4
 1494 00b8 057093E0 		adds	r7, r3, r5
 1495 00bc 0680A4E0 		adc	r8, r4, r6
 1496              		.loc 1 104 0
 1497 00c0 01E08EE2 		add	lr, lr, #1
 1498              	.LVL168:
 1499              	.L293:
 1500              		.loc 1 101 0
 1501 00c4 0050DEE5 		ldrb	r5, [lr, #0]	@ zero_extendqisi2
 1502              	.LVL169:
 1503 00c8 5C309FE5 		ldr	r3, .L313
 1504 00cc 05C0D3E7 		ldrb	ip, [r3, r5]	@ zero_extendqisi2
 1505              	.LVL170:
 1506 00d0 44001CE3 		tst	ip, #68
 1507 00d4 303045E2 		sub	r3, r5, #48
 1508 00d8 4400000A 		beq	.L300
 1509 00dc 04001CE3 		tst	ip, #4
 1510 00e0 3C00001A 		bne	.L304
 1511              	.LBB20:
 1512              	.LBB21:
 1513              		.loc 2 47 0
 1514 00e4 203045E2 		sub	r3, r5, #32
 1515 00e8 FF3003E2 		and	r3, r3, #255
 1516              	.LVL171:
 1517              	.LBE21:
 1518              	.LBE20:
 1519              		.loc 1 101 0
 1520 00ec 02001CE3 		tst	ip, #2
 1521 00f0 373043E2 		sub	r3, r3, #55
 1522              	.LVL172:
 1523 00f4 37304502 		subeq	r3, r5, #55
 1524              	.L304:
 1525 00f8 0350A0E1 		mov	r5, r3
 1526 00fc C56FA0E1 		mov	r6, r5, asr #31
 1527              	.LVL173:
 1528 0100 0A10A0E1 		mov	r1, sl
 1529 0104 0020A0E3 		mov	r2, #0
 1530              	.LVL174:
 1531 0108 060052E1 		cmp	r2, r6
 1532 010c 4400001A 		bne	.L300
 1533 0110 050051E1 		cmp	r1, r5
 1534 0114 2A00008A 		bhi	.L299
 1535              	.LVL175:
 1536              	.L300:
 1537              		.loc 1 106 0
 1538 0118 000059E3 		cmp	r9, #0
 1539              		.loc 1 109 0
 1540 011c 0700A0E1 		mov	r0, r7
 1541              	.LVL176:
 1542 0120 0810A0E1 		mov	r1, r8
 1543              		.loc 1 107 0
 1544 0124 00E08915 		strne	lr, [r9, #0]
 1545              		.loc 1 109 0
 1546 0128 F087BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1547              	.L314:
 1548              		.align	2
 1549              	.L313:
 1550 012c 00000000 		.word	_ctype
 1551              	.LFE6:
 1553              		.section	.text.strtoll,"ax",%progbits
 1554              		.align	2
 1555              		.global	strtoll
 1557              	strtoll:
 1558              	.LFB7:
 1559              		.loc 1 119 0
 1560              		@ args = 0, pretend = 0, frame = 0
 1561              		@ frame_needed = 0, uses_anonymous_args = 0
 1562              	.LVL177:
 1563 0000 04E02DE5 		str	lr, [sp, #-4]!
 1564              	.LCFI18:
 1565              		.loc 1 120 0
 1566 0004 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1567 0008 2D0053E3 		cmp	r3, #45
 1568 000c 0400000A 		beq	.L320
 1569              		.loc 1 123 0
 1570 0010 04E09DE4 		ldr	lr, [sp], #4
 1571              		.loc 1 122 0
 1572 0014 FEFFFFEA 		b	strtoull
 1573              	.LVL178:
 1574              	.L320:
 1575              		.loc 1 121 0
 1576 0018 010080E2 		add	r0, r0, #1
 1577              	.LVL179:
 1578 001c FEFFFFEB 		bl	strtoull
 1579              	.LVL180:
 1580              		.loc 1 123 0
 1581 0020 000070E2 		rsbs	r0, r0, #0
 1582 0024 0010E1E2 		rsc	r1, r1, #0
 1583 0028 04F09DE4 		ldr	pc, [sp], #4
 1584              	.LFE7:
 1586              		.section	.text.vsscanf,"ax",%progbits
 1587              		.align	2
 1588              		.global	vsscanf
 1590              	vsscanf:
 1591              	.LFB16:
 1592              		.loc 1 606 0
 1593              		@ args = 0, pretend = 0, frame = 8
 1594              		@ frame_needed = 0, uses_anonymous_args = 0
 1595              	.LVL181:
 1596 0000 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 1597              	.LCFI19:
 1598 0004 0080A0E1 		mov	r8, r0
 1599 0008 08D04DE2 		sub	sp, sp, #8
 1600              	.LCFI20:
 1601              	.LVL182:
 1602              		.loc 1 606 0
 1603 000c 0260A0E1 		mov	r6, r2
 1604 0010 0040A0E1 		mov	r4, r0
 1605              	.LVL183:
 1606 0014 0070A0E3 		mov	r7, #0
 1607              	.LVL184:
 1608 0018 00108DE5 		str	r1, [sp, #0]
 1609 001c 4D0100EA 		b	.L439
 1610              	.LVL185:
 1611              	.L323:
 1612              		.loc 1 621 0
 1613 0020 3C359FE5 		ldr	r3, .L440
 1614 0024 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1615 0028 200013E3 		tst	r3, #32
 1616 002c 1800000A 		beq	.L324
 1617              	.L418:
 1618              		.loc 1 623 0
 1619 0030 011081E2 		add	r1, r1, #1
 1620 0034 00108DE5 		str	r1, [sp, #0]
 1621              		.loc 1 622 0
 1622 0038 24259FE5 		ldr	r2, .L440
 1623 003c 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 1624 0040 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1625 0044 200013E3 		tst	r3, #32
 1626 0048 1300000A 		beq	.L422
 1627 004c 0A0000EA 		b	.L418
 1628              	.L327:
 1629              		.loc 1 625 0
 1630 0050 014084E2 		add	r4, r4, #1
 1631              	.L422:
 1632              		.loc 1 624 0
 1633 0054 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 1634 0058 04259FE5 		ldr	r2, .L440
 1635 005c 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1636 0060 200013E3 		tst	r3, #32
 1637 0064 1200001A 		bne	.L327
 1638              	.L324:
 1639              		.loc 1 629 0
 1640 0068 00109DE5 		ldr	r1, [sp, #0]
 1641 006c 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 1642 0070 250052E3 		cmp	r2, #37
 1643 0074 00005213 		cmpne	r2, #0
 1644 0078 2200000A 		beq	.L328
 1645              		.loc 1 630 0
 1646 007c 0130D4E4 		ldrb	r3, [r4], #1	@ zero_extendqisi2
 1647 0080 030052E1 		cmp	r2, r3
 1648 0084 013081E2 		add	r3, r1, #1
 1649 0088 00308DE5 		str	r3, [sp, #0]
 1650 008c CC0000EA 		b	.L435
 1651              	.L328:
 1652              		.loc 1 635 0
 1653 0090 000052E3 		cmp	r2, #0
 1654 0094 5401000A 		beq	.L330
 1655              		.loc 1 637 0
 1656 0098 013081E2 		add	r3, r1, #1
 1657 009c 00308DE5 		str	r3, [sp, #0]
 1658              		.loc 1 642 0
 1659 00a0 0120D1E5 		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 1660 00a4 2A0052E3 		cmp	r2, #42
 1661 00a8 3E00001A 		bne	.L423
 1662 00ac 2B0000EA 		b	.L424
 1663              	.L334:
 1664              		.loc 1 644 0
 1665 00b0 00308DE5 		str	r3, [sp, #0]
 1666              	.L424:
 1667              		.loc 1 643 0
 1668 00b4 00309DE5 		ldr	r3, [sp, #0]
 1669 00b8 A4249FE5 		ldr	r2, .L440
 1670 00bc 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1671 00c0 0120D2E7 		ldrb	r2, [r2, r1]	@ zero_extendqisi2
 1672 00c4 200012E3 		tst	r2, #32
 1673              		.loc 1 644 0
 1674 00c8 013083E2 		add	r3, r3, #1
 1675              		.loc 1 643 0
 1676 00cc 3600001A 		bne	.L425
 1677 00d0 000051E3 		cmp	r1, #0
 1678 00d4 2A00001A 		bne	.L334
 1679 00d8 360000EA 		b	.L425
 1680              	.L337:
 1681              		.loc 1 646 0
 1682 00dc 014084E2 		add	r4, r4, #1
 1683              	.L425:
 1684              		.loc 1 645 0
 1685 00e0 0020D4E5 		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 1686 00e4 78349FE5 		ldr	r3, .L440
 1687 00e8 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1688 00ec 200013E3 		tst	r3, #32
 1689 00f0 4D01001A 		bne	.L439
 1690 00f4 000052E3 		cmp	r2, #0
 1691 00f8 3500001A 		bne	.L337
 1692 00fc 4D0100EA 		b	.L439
 1693              	.L423:
 1694              		.loc 1 652 0
 1695 0100 5C349FE5 		ldr	r3, .L440
 1696 0104 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1697 0108 040013E3 		tst	r3, #4
 1698 010c 0000E003 		mvneq	r0, #0
 1699              		.loc 1 653 0
 1700 0110 0D00A011 		movne	r0, sp
 1701              	.LVL186:
 1702 0114 FEFFFF1B 		blne	skip_atoi
 1703              	.LVL187:
 1704              	.L341:
 1705              		.loc 1 657 0
 1706 0118 00109DE5 		ldr	r1, [sp, #0]
 1707 011c 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 1708 0120 680052E3 		cmp	r2, #104
 1709 0124 00C0A013 		movne	ip, #0
 1710 0128 01C0A003 		moveq	ip, #1
 1711              	.LVL188:
 1712 012c 6C0052E3 		cmp	r2, #108
 1713 0130 00E0A013 		movne	lr, #0
 1714 0134 01E0A003 		moveq	lr, #1
 1715 0138 0E309CE1 		orrs	r3, ip, lr
 1716 013c 5500001A 		bne	.L342
 1717 0140 4C0052E3 		cmp	r2, #76
 1718 0144 5500000A 		beq	.L342
 1719 0148 5A0052E3 		cmp	r2, #90
 1720 014c 5500000A 		beq	.L342
 1721 0150 7A0052E3 		cmp	r2, #122
 1722 0154 0050E013 		mvnne	r5, #0
 1723              	.LVL189:
 1724 0158 6400001A 		bne	.L347
 1725              	.LVL190:
 1726              	.L342:
 1727              		.loc 1 659 0
 1728 015c 013081E2 		add	r3, r1, #1
 1729 0160 00308DE5 		str	r3, [sp, #0]
 1730              		.loc 1 660 0
 1731 0164 0130D1E5 		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1732 0168 030052E1 		cmp	r2, r3
 1733              		.loc 1 659 0
 1734 016c 0250A0E1 		mov	r5, r2
 1735              	.LVL191:
 1736              		.loc 1 660 0
 1737 0170 6400001A 		bne	.L347
 1738              		.loc 1 661 0
 1739 0174 00005CE3 		cmp	ip, #0
 1740              		.loc 1 663 0
 1741 0178 02308112 		addne	r3, r1, #2
 1742 017c 4850A013 		movne	r5, #72
 1743 0180 00308D15 		strne	r3, [sp, #0]
 1744              		.loc 1 661 0
 1745 0184 6400001A 		bne	.L347
 1746              		.loc 1 664 0
 1747 0188 00005EE3 		cmp	lr, #0
 1748              		.loc 1 666 0
 1749 018c 02308112 		addne	r3, r1, #2
 1750 0190 00308D15 		strne	r3, [sp, #0]
 1751 0194 4C50A013 		movne	r5, #76
 1752              	.L347:
 1753              		.loc 1 673 0
 1754 0198 00109DE5 		ldr	r1, [sp, #0]
 1755 019c 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 1756 01a0 000052E3 		cmp	r2, #0
 1757 01a4 5401000A 		beq	.L330
 1758 01a8 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 1759 01ac 000053E3 		cmp	r3, #0
 1760 01b0 5401000A 		beq	.L330
 1761              		.loc 1 676 0
 1762 01b4 013081E2 		add	r3, r1, #1
 1763 01b8 6E0052E3 		cmp	r2, #110
 1764 01bc 00308DE5 		str	r3, [sp, #0]
 1765 01c0 BF00000A 		beq	.L359
 1766 01c4 7C00008A 		bhi	.L363
 1767 01c8 630052E3 		cmp	r2, #99
 1768 01cc 8F00000A 		beq	.L356
 1769 01d0 7700008A 		bhi	.L364
 1770 01d4 250052E3 		cmp	r2, #37
 1771 01d8 CA00000A 		beq	.L354
 1772 01dc 580052E3 		cmp	r2, #88
 1773 01e0 850000EA 		b	.L428
 1774              	.L364:
 1775 01e4 640052E3 		cmp	r2, #100
 1776 01e8 8C00000A 		beq	.L357
 1777 01ec 690052E3 		cmp	r2, #105
 1778 01f0 5401001A 		bne	.L330
 1779 01f4 870000EA 		b	.L358
 1780              	.L363:
 1781 01f8 730052E3 		cmp	r2, #115
 1782 01fc 9E00000A 		beq	.L361
 1783 0200 8200008A 		bhi	.L365
 1784 0204 6F0052E3 		cmp	r2, #111
 1785 0208 5401001A 		bne	.L330
 1786 020c C40000EA 		b	.L360
 1787              	.L365:
 1788 0210 750052E3 		cmp	r2, #117
 1789 0214 8A00000A 		beq	.L362
 1790 0218 780052E3 		cmp	r2, #120
 1791              	.L428:
 1792 021c 5401001A 		bne	.L330
 1793 0220 C70000EA 		b	.L355
 1794              	.L358:
 1795 0224 0100A0E3 		mov	r0, #1
 1796              	.LVL192:
 1797 0228 0020A0E3 		mov	r2, #0
 1798              	.LVL193:
 1799 022c CF0000EA 		b	.L426
 1800              	.LVL194:
 1801              	.L362:
 1802 0230 0000A0E3 		mov	r0, #0
 1803              	.LVL195:
 1804 0234 8D0000EA 		b	.L429
 1805              	.LVL196:
 1806              	.L357:
 1807 0238 0100A0E3 		mov	r0, #1
 1808              	.LVL197:
 1809              	.L429:
 1810 023c 0A20A0E3 		mov	r2, #10
 1811              	.LVL198:
 1812 0240 CF0000EA 		b	.L426
 1813              	.LVL199:
 1814              	.L356:
 1815              	.LBB22:
 1816              		.loc 1 680 0
 1817 0244 010070E3 		cmn	r0, #1
 1818              	.LVL200:
 1819              		.loc 1 679 0
 1820 0248 001096E5 		ldr	r1, [r6, #0]
 1821              	.LVL201:
 1822              		.loc 1 680 0
 1823 024c 0100A003 		moveq	r0, #1
 1824              		.loc 1 679 0
 1825 0250 042086E2 		add	r2, r6, #4
 1826              	.LVL202:
 1827              	.L367:
 1828              		.loc 1 684 0
 1829 0254 010040E2 		sub	r0, r0, #1
 1830              		.loc 1 683 0
 1831 0258 0130D4E4 		ldrb	r3, [r4], #1	@ zero_extendqisi2
 1832              		.loc 1 684 0
 1833 025c 000050E3 		cmp	r0, #0
 1834              		.loc 1 683 0
 1835 0260 0130C1E4 		strb	r3, [r1], #1
 1836              		.loc 1 684 0
 1837 0264 9B0000DA 		ble	.L369
 1838 0268 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 1839 026c 000053E3 		cmp	r3, #0
 1840 0270 9300001A 		bne	.L367
 1841              	.L369:
 1842              		.loc 1 685 0
 1843 0274 017087E2 		add	r7, r7, #1
 1844 0278 0260A0E1 		mov	r6, r2
 1845 027c 4D0100EA 		b	.L439
 1846              	.LVL203:
 1847              	.L361:
 1848              	.LBE22:
 1849              	.LBB23:
 1850              		.loc 1 691 0
 1851 0280 010070E3 		cmn	r0, #1
 1852              	.LVL204:
 1853              		.loc 1 690 0
 1854 0284 001096E5 		ldr	r1, [r6, #0]
 1855              	.LVL205:
 1856              		.loc 1 691 0
 1857 0288 0201E003 		mvneq	r0, #-2147483648
 1858 028c 04C0A0E1 		mov	ip, r4
 1859              	.LVL206:
 1860              		.loc 1 690 0
 1861 0290 046086E2 		add	r6, r6, #4
 1862              	.LVL207:
 1863 0294 A50000EA 		b	.L373
 1864              	.L374:
 1865              		.loc 1 695 0
 1866 0298 01C08CE2 		add	ip, ip, #1
 1867              	.L373:
 1868              		.loc 1 694 0
 1869 029c 0020DCE5 		ldrb	r2, [ip, #0]	@ zero_extendqisi2
 1870 02a0 BC329FE5 		ldr	r3, .L440
 1871 02a4 0230D3E7 		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1872 02a8 203013E2 		ands	r3, r3, #32
 1873 02ac A400001A 		bne	.L374
 1874 02b0 0120A0E1 		mov	r2, r1
 1875 02b4 03E0A0E1 		mov	lr, r3
 1876 02b8 AE0000EA 		b	.L376
 1877              	.LVL208:
 1878              	.L377:
 1879              		.loc 1 699 0
 1880 02bc 011042E5 		strb	r1, [r2, #-1]
 1881              	.LVL209:
 1882              	.L376:
 1883              		.loc 1 698 0
 1884 02c0 0C10DEE7 		ldrb	r1, [lr, ip]	@ zero_extendqisi2
 1885              	.LVL210:
 1886 02c4 000051E3 		cmp	r1, #0
 1887              		.loc 1 699 0
 1888 02c8 0250A0E1 		mov	r5, r2
 1889              	.LVL211:
 1890 02cc 0C408EE0 		add	r4, lr, ip
 1891              		.loc 1 698 0
 1892 02d0 BB00000A 		beq	.L378
 1893 02d4 88329FE5 		ldr	r3, .L440
 1894 02d8 0130D3E7 		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 1895 02dc 200013E3 		tst	r3, #32
 1896 02e0 BB00001A 		bne	.L378
 1897 02e4 00005EE1 		cmp	lr, r0
 1898 02e8 012082E2 		add	r2, r2, #1
 1899              		.loc 1 699 0
 1900 02ec 01E08EE2 		add	lr, lr, #1
 1901              		.loc 1 698 0
 1902 02f0 AD00001A 		bne	.L377
 1903              	.L378:
 1904              		.loc 1 701 0
 1905 02f4 0030A0E3 		mov	r3, #0
 1906              		.loc 1 702 0
 1907 02f8 017087E2 		add	r7, r7, #1
 1908              		.loc 1 701 0
 1909 02fc 0030C5E5 		strb	r3, [r5, #0]
 1910 0300 4D0100EA 		b	.L439
 1911              	.LVL212:
 1912              	.L359:
 1913              	.LVL213:
 1914              	.LBE23:
 1915              	.LBB24:
 1916              		.loc 1 709 0
 1917 0304 002096E5 		ldr	r2, [r6, #0]
 1918 0308 043068E0 		rsb	r3, r8, r4
 1919 030c 046086E2 		add	r6, r6, #4
 1920 0310 003082E5 		str	r3, [r2, #0]
 1921 0314 4D0100EA 		b	.L439
 1922              	.LVL214:
 1923              	.L360:
 1924              		.loc 1 711 0
 1925 0318 0000A0E3 		mov	r0, #0
 1926              	.LVL215:
 1927 031c 0820A0E3 		mov	r2, #8
 1928              	.LVL216:
 1929 0320 CF0000EA 		b	.L426
 1930              	.LVL217:
 1931              	.L355:
 1932              		.loc 1 714 0
 1933 0324 0000A0E3 		mov	r0, #0
 1934              	.LVL218:
 1935 0328 1020A0E3 		mov	r2, #16
 1936              	.LVL219:
 1937 032c CF0000EA 		b	.L426
 1938              	.LVL220:
 1939              	.L354:
 1940              	.LBE24:
 1941              		.loc 1 727 0
 1942 0330 0130D4E4 		ldrb	r3, [r4], #1	@ zero_extendqisi2
 1943 0334 250053E3 		cmp	r3, #37
 1944              	.LVL221:
 1945              	.L435:
 1946 0338 4D01000A 		beq	.L439
 1947 033c 540100EA 		b	.L330
 1948              	.LVL222:
 1949              	.L381:
 1950              		.loc 1 739 0
 1951 0340 014084E2 		add	r4, r4, #1
 1952              	.L426:
 1953              		.loc 1 738 0
 1954 0344 0010D4E5 		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 1955 0348 14C29FE5 		ldr	ip, .L440
 1956 034c 0130DCE7 		ldrb	r3, [ip, r1]	@ zero_extendqisi2
 1957 0350 200013E3 		tst	r3, #32
 1958 0354 CE00001A 		bne	.L381
 1959              	.LVL223:
 1960              		.loc 1 742 0
 1961 0358 2D0051E3 		cmp	r1, #45
 1962 035c 0030A013 		movne	r3, #0
 1963 0360 01300002 		andeq	r3, r0, #1
 1964 0364 000053E3 		cmp	r3, #0
 1965              		.loc 1 743 0
 1966 0368 0110D415 		ldrneb	r1, [r4, #1]	@ zero_extendqisi2
 1967              		.loc 1 745 0
 1968 036c 000051E3 		cmp	r1, #0
 1969 0370 5401000A 		beq	.L330
 1970 0374 100052E3 		cmp	r2, #16
 1971 0378 E000001A 		bne	.L386
 1972 037c 0130DCE7 		ldrb	r3, [ip, r1]	@ zero_extendqisi2
 1973 0380 440013E3 		tst	r3, #68
 1974 0384 F00000EA 		b	.L430
 1975              	.L386:
 1976 0388 0A0052E3 		cmp	r2, #10
 1977 038c EE00000A 		beq	.L436
 1978 0390 080052E3 		cmp	r2, #8
 1979 0394 EC00001A 		bne	.L391
 1980 0398 0130DCE7 		ldrb	r3, [ip, r1]	@ zero_extendqisi2
 1981 039c 2331A0E1 		mov	r3, r3, lsr #2
 1982 03a0 013023E2 		eor	r3, r3, #1
 1983 03a4 370051E3 		cmp	r1, #55
 1984 03a8 01308383 		orrhi	r3, r3, #1
 1985 03ac 010013E3 		tst	r3, #1
 1986 03b0 F100000A 		beq	.L388
 1987 03b4 540100EA 		b	.L330
 1988              	.L391:
 1989 03b8 000052E3 		cmp	r2, #0
 1990 03bc F100001A 		bne	.L388
 1991              	.L436:
 1992 03c0 0130DCE7 		ldrb	r3, [ip, r1]	@ zero_extendqisi2
 1993 03c4 040013E3 		tst	r3, #4
 1994              	.L430:
 1995 03c8 5401000A 		beq	.L330
 1996              	.L388:
 1997              		.loc 1 752 0
 1998 03cc 5A0055E3 		cmp	r5, #90
 1999 03d0 3201000A 		beq	.L397
 2000 03d4 F90000CA 		bgt	.L400
 2001 03d8 480055E3 		cmp	r5, #72
 2002 03dc 0001000A 		beq	.L395
 2003 03e0 4C0055E3 		cmp	r5, #76
 2004 03e4 3901001A 		bne	.L394
 2005 03e8 240100EA 		b	.L396
 2006              	.L400:
 2007 03ec 6C0055E3 		cmp	r5, #108
 2008 03f0 1C01000A 		beq	.L399
 2009 03f4 7A0055E3 		cmp	r5, #122
 2010 03f8 3201000A 		beq	.L397
 2011 03fc 680055E3 		cmp	r5, #104
 2012 0400 3901001A 		bne	.L394
 2013 0404 0E0100EA 		b	.L398
 2014              	.L395:
 2015              		.loc 1 754 0
 2016 0408 000050E3 		cmp	r0, #0
 2017              	.LVL224:
 2018 040c 045086E2 		add	r5, r6, #4
 2019              	.LVL225:
 2020 0410 04108DE2 		add	r1, sp, #4
 2021              	.LVL226:
 2022 0414 0801000A 		beq	.L401
 2023              	.LBB25:
 2024              		.loc 1 756 0
 2025 0418 0400A0E1 		mov	r0, r4
 2026              		.loc 1 755 0
 2027 041c 004096E5 		ldr	r4, [r6, #0]
 2028              	.LVL227:
 2029              		.loc 1 756 0
 2030 0420 FEFFFFEB 		bl	strtol
 2031              	.LVL228:
 2032 0424 0B0100EA 		b	.L431
 2033              	.LVL229:
 2034              	.L401:
 2035              	.LBE25:
 2036              	.LBB26:
 2037              		.loc 1 759 0
 2038 0428 0400A0E1 		mov	r0, r4
 2039              		.loc 1 758 0
 2040 042c 004096E5 		ldr	r4, [r6, #0]
 2041              	.LVL230:
 2042              		.loc 1 759 0
 2043 0430 FEFFFFEB 		bl	strtoul
 2044              	.LVL231:
 2045              	.L431:
 2046 0434 0560A0E1 		mov	r6, r5
 2047              	.LVL232:
 2048 0438 0000C4E5 		strb	r0, [r4, #0]
 2049 043c 480100EA 		b	.L403
 2050              	.LVL233:
 2051              	.L398:
 2052              	.LBE26:
 2053              		.loc 1 763 0
 2054 0440 000050E3 		cmp	r0, #0
 2055              	.LVL234:
 2056 0444 045086E2 		add	r5, r6, #4
 2057              	.LVL235:
 2058 0448 04108DE2 		add	r1, sp, #4
 2059              	.LVL236:
 2060 044c 1601000A 		beq	.L404
 2061              	.LBB27:
 2062              		.loc 1 765 0
 2063 0450 0400A0E1 		mov	r0, r4
 2064              		.loc 1 764 0
 2065 0454 004096E5 		ldr	r4, [r6, #0]
 2066              	.LVL237:
 2067              		.loc 1 765 0
 2068 0458 FEFFFFEB 		bl	strtol
 2069              	.LVL238:
 2070 045c 190100EA 		b	.L432
 2071              	.LVL239:
 2072              	.L404:
 2073              	.LBE27:
 2074              	.LBB28:
 2075              		.loc 1 768 0
 2076 0460 0400A0E1 		mov	r0, r4
 2077              		.loc 1 767 0
 2078 0464 004096E5 		ldr	r4, [r6, #0]
 2079              	.LVL240:
 2080              		.loc 1 768 0
 2081 0468 FEFFFFEB 		bl	strtoul
 2082              	.LVL241:
 2083              	.L432:
 2084 046c 0560A0E1 		mov	r6, r5
 2085              	.LVL242:
 2086 0470 B000C4E1 		strh	r0, [r4, #0]	@ movhi
 2087 0474 480100EA 		b	.L403
 2088              	.LVL243:
 2089              	.L399:
 2090              	.LBE28:
 2091              		.loc 1 772 0
 2092 0478 000050E3 		cmp	r0, #0
 2093              	.LVL244:
 2094 047c 045086E2 		add	r5, r6, #4
 2095              	.LVL245:
 2096 0480 04108DE2 		add	r1, sp, #4
 2097              	.LVL246:
 2098 0484 3D01001A 		bne	.L437
 2099              	.LBB29:
 2100              		.loc 1 777 0
 2101 0488 0400A0E1 		mov	r0, r4
 2102              		.loc 1 776 0
 2103 048c 004096E5 		ldr	r4, [r6, #0]
 2104              	.LVL247:
 2105              		.loc 1 777 0
 2106 0490 FEFFFFEB 		bl	strtoul
 2107              	.LVL248:
 2108 0494 400100EA 		b	.L438
 2109              	.LVL249:
 2110              	.L396:
 2111              	.LBE29:
 2112              		.loc 1 781 0
 2113 0498 000050E3 		cmp	r0, #0
 2114              	.LVL250:
 2115 049c 045086E2 		add	r5, r6, #4
 2116              	.LVL251:
 2117 04a0 04108DE2 		add	r1, sp, #4
 2118              	.LVL252:
 2119 04a4 2C01000A 		beq	.L408
 2120              	.LBB30:
 2121              		.loc 1 783 0
 2122 04a8 0400A0E1 		mov	r0, r4
 2123              		.loc 1 782 0
 2124 04ac 004096E5 		ldr	r4, [r6, #0]
 2125              	.LVL253:
 2126              		.loc 1 783 0
 2127 04b0 FEFFFFEB 		bl	strtoll
 2128              	.LVL254:
 2129 04b4 2F0100EA 		b	.L434
 2130              	.LVL255:
 2131              	.L408:
 2132              	.LBE30:
 2133              	.LBB31:
 2134              		.loc 1 786 0
 2135 04b8 0400A0E1 		mov	r0, r4
 2136              		.loc 1 785 0
 2137 04bc 004096E5 		ldr	r4, [r6, #0]
 2138              	.LVL256:
 2139              		.loc 1 786 0
 2140 04c0 FEFFFFEB 		bl	strtoull
 2141              	.LVL257:
 2142              	.L434:
 2143 04c4 0560A0E1 		mov	r6, r5
 2144              	.LVL258:
 2145 04c8 030084E8 		stmia	r4, {r0-r1}
 2146 04cc 480100EA 		b	.L403
 2147              	.LVL259:
 2148              	.L397:
 2149              	.LBE31:
 2150              	.LBB32:
 2151              		.loc 1 793 0
 2152 04d0 0400A0E1 		mov	r0, r4
 2153 04d4 04108DE2 		add	r1, sp, #4
 2154              	.LVL260:
 2155              	.LVL261:
 2156              		.loc 1 792 0
 2157 04d8 004096E5 		ldr	r4, [r6, #0]
 2158              	.LVL262:
 2159              		.loc 1 793 0
 2160 04dc FEFFFFEB 		bl	strtoul
 2161              	.LVL263:
 2162              		.loc 1 792 0
 2163 04e0 043086E2 		add	r3, r6, #4
 2164              	.LVL264:
 2165              		.loc 1 793 0
 2166 04e4 0360A0E1 		mov	r6, r3
 2167 04e8 410100EA 		b	.L433
 2168              	.LVL265:
 2169              	.L394:
 2170              	.LBE32:
 2171              		.loc 1 797 0
 2172 04ec 000050E3 		cmp	r0, #0
 2173              	.LVL266:
 2174 04f0 045086E2 		add	r5, r6, #4
 2175              	.LVL267:
 2176 04f4 04108DE2 		add	r1, sp, #4
 2177              	.LVL268:
 2178 04f8 4301000A 		beq	.L410
 2179              	.L437:
 2180              	.LBB33:
 2181              		.loc 1 799 0
 2182 04fc 0400A0E1 		mov	r0, r4
 2183              		.loc 1 798 0
 2184 0500 004096E5 		ldr	r4, [r6, #0]
 2185              	.LVL269:
 2186              		.loc 1 799 0
 2187 0504 FEFFFFEB 		bl	strtol
 2188              	.LVL270:
 2189              	.L438:
 2190 0508 0560A0E1 		mov	r6, r5
 2191              	.LVL271:
 2192              	.L433:
 2193              	.LVL272:
 2194 050c 000084E5 		str	r0, [r4, #0]
 2195 0510 480100EA 		b	.L403
 2196              	.LVL273:
 2197              	.L410:
 2198              	.LBE33:
 2199              	.LBB34:
 2200              		.loc 1 802 0
 2201 0514 0400A0E1 		mov	r0, r4
 2202              		.loc 1 801 0
 2203 0518 004096E5 		ldr	r4, [r6, #0]
 2204              	.LVL274:
 2205              		.loc 1 802 0
 2206 051c FEFFFFEB 		bl	strtoul
 2207              	.LVL275:
 2208 0520 000084E5 		str	r0, [r4, #0]
 2209 0524 0560A0E1 		mov	r6, r5
 2210              	.LVL276:
 2211              	.L403:
 2212              	.LBE34:
 2213              		.loc 1 808 0
 2214 0528 04009DE5 		ldr	r0, [sp, #4]
 2215 052c 000050E3 		cmp	r0, #0
 2216              		.loc 1 806 0
 2217 0530 017087E2 		add	r7, r7, #1
 2218              		.loc 1 808 0
 2219 0534 5401000A 		beq	.L330
 2220              		.loc 1 810 0
 2221 0538 0040A0E1 		mov	r4, r0
 2222              	.LVL277:
 2223              	.L439:
 2224              		.loc 1 616 0
 2225 053c 00109DE5 		ldr	r1, [sp, #0]
 2226              	.LVL278:
 2227 0540 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 2228              	.LVL279:
 2229 0544 000052E3 		cmp	r2, #0
 2230 0548 5401000A 		beq	.L330
 2231 054c 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 2232              	.LVL280:
 2233 0550 000053E3 		cmp	r3, #0
 2234 0554 0600001A 		bne	.L323
 2235              	.LVL281:
 2236              	.L330:
 2237              		.loc 1 813 0
 2238 0558 0700A0E1 		mov	r0, r7
 2239              	.LVL282:
 2240 055c 08D08DE2 		add	sp, sp, #8
 2241 0560 F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
 2242              	.L441:
 2243              		.align	2
 2244              	.L440:
 2245 0564 00000000 		.word	_ctype
 2246              	.LFE16:
 2248              		.section	.text.sscanf,"ax",%progbits
 2249              		.align	2
 2250              		.global	sscanf
 2252              	sscanf:
 2253              	.LFB17:
 2254              		.loc 1 823 0
 2255              		@ args = 4, pretend = 12, frame = 4
 2256              		@ frame_needed = 0, uses_anonymous_args = 1
 2257              	.LVL283:
 2258 0000 0E002DE9 		stmfd	sp!, {r1, r2, r3}
 2259              	.LCFI21:
 2260 0004 04E02DE5 		str	lr, [sp, #-4]!
 2261              	.LCFI22:
 2262 0008 04D04DE2 		sub	sp, sp, #4
 2263              	.LCFI23:
 2264              	.LVL284:
 2265              		.loc 1 827 0
 2266 000c 0C308DE2 		add	r3, sp, #12
 2267              		.loc 1 828 0
 2268 0010 0320A0E1 		mov	r2, r3
 2269              	.LVL285:
 2270 0014 08109DE5 		ldr	r1, [sp, #8]
 2271              		.loc 1 827 0
 2272 0018 00308DE5 		str	r3, [sp, #0]
 2273              		.loc 1 828 0
 2274 001c FEFFFFEB 		bl	vsscanf
 2275              	.LVL286:
 2276              		.loc 1 831 0
 2277 0020 04D08DE2 		add	sp, sp, #4
 2278 0024 04E09DE4 		ldr	lr, [sp], #4
 2279 0028 0CD08DE2 		add	sp, sp, #12
 2280 002c 1EFF2FE1 		bx	lr
 2281              	.LFE17:
 2627              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 vsprintf.c
     /tmp/ccENMDHe.s:13     .text.skip_atoi:0000000000000000 skip_atoi
     /tmp/ccENMDHe.s:20     .text.skip_atoi:0000000000000000 $a
     /tmp/ccENMDHe.s:52     .text.skip_atoi:0000000000000044 $d
     /tmp/ccENMDHe.s:59     .rodata:0000000000000000 large_digits.1360
     /tmp/ccENMDHe.s:64     .rodata:0000000000000028 small_digits.1359
     /tmp/ccENMDHe.s:69     .text.number:0000000000000000 number
     /tmp/ccENMDHe.s:75     .text.number:0000000000000000 $a
     /tmp/ccENMDHe.s:396    .text.number:0000000000000298 $d
     /tmp/ccENMDHe.s:404    .text.vsnprintf:0000000000000000 vsnprintf
     /tmp/ccENMDHe.s:410    .text.vsnprintf:0000000000000000 $a
     /tmp/ccENMDHe.s:1030   .text.vsnprintf:000000000000053c $d
     /tmp/ccENMDHe.s:1037   .text.vscnprintf:0000000000000000 vscnprintf
     /tmp/ccENMDHe.s:1043   .text.vscnprintf:0000000000000000 $a
     /tmp/ccENMDHe.s:1066   .text.snprintf:0000000000000000 snprintf
     /tmp/ccENMDHe.s:1072   .text.snprintf:0000000000000000 $a
     /tmp/ccENMDHe.s:1101   .text.scnprintf:0000000000000000 scnprintf
     /tmp/ccENMDHe.s:1107   .text.scnprintf:0000000000000000 $a
     /tmp/ccENMDHe.s:1146   .text.vsprintf:0000000000000000 vsprintf
     /tmp/ccENMDHe.s:1153   .text.vsprintf:0000000000000000 $a
     /tmp/ccENMDHe.s:1171   .text.sprintf:0000000000000000 sprintf
     /tmp/ccENMDHe.s:1177   .text.sprintf:0000000000000000 $a
     /tmp/ccENMDHe.s:1207   .text.puts:0000000000000000 puts
     /tmp/ccENMDHe.s:1217   .text.puts:0000000000000000 $a
     /tmp/ccENMDHe.s:1225   .text.strtoul:0000000000000000 strtoul
     /tmp/ccENMDHe.s:1231   .text.strtoul:0000000000000000 $a
     /tmp/ccENMDHe.s:1359   .text.strtoul:00000000000000fc $d
     /tmp/ccENMDHe.s:1366   .text.strtol:0000000000000000 strtol
     /tmp/ccENMDHe.s:1372   .text.strtol:0000000000000000 $a
     /tmp/ccENMDHe.s:1398   .text.strtoull:0000000000000000 strtoull
     /tmp/ccENMDHe.s:1404   .text.strtoull:0000000000000000 $a
     /tmp/ccENMDHe.s:1550   .text.strtoull:000000000000012c $d
     /tmp/ccENMDHe.s:1557   .text.strtoll:0000000000000000 strtoll
     /tmp/ccENMDHe.s:1563   .text.strtoll:0000000000000000 $a
     /tmp/ccENMDHe.s:1590   .text.vsscanf:0000000000000000 vsscanf
     /tmp/ccENMDHe.s:1596   .text.vsscanf:0000000000000000 $a
     /tmp/ccENMDHe.s:2245   .text.vsscanf:0000000000000564 $d
     /tmp/ccENMDHe.s:2252   .text.sscanf:0000000000000000 sscanf
     /tmp/ccENMDHe.s:2258   .text.sscanf:0000000000000000 $a

UNDEFINED SYMBOLS
_ctype
__do_div64
strnlen
sercomm_puts
