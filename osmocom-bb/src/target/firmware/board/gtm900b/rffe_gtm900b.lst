   1              		.file	"rffe_gtm900b.c"
   9              	.Ltext0:
  10              		.global	system_inherent_gain
  11              		.section	.rodata
  14              	system_inherent_gain:
  15 0000 4A       		.byte	74
  16              		.section	.text.rffe_mode,"ax",%progbits
  17              		.align	2
  18              		.global	rffe_mode
  20              	rffe_mode:
  21              	.LFB7:
  22              		.file 1 "board/gtm900b/rffe_gtm900b.c"
   1:board/gtm900b/rffe_gtm900b.c **** /* RF frontend driver for Huawei GTM900-B modems, supporting both
   2:board/gtm900b/rffe_gtm900b.c ****  * MG01GSMT and MGCxGSMT hardware variants */
   3:board/gtm900b/rffe_gtm900b.c **** 
   4:board/gtm900b/rffe_gtm900b.c **** /* (C) 2019 by Steve Markgraf <steve@steve-m.de>
   5:board/gtm900b/rffe_gtm900b.c ****  *
   6:board/gtm900b/rffe_gtm900b.c ****  * All Rights Reserved
   7:board/gtm900b/rffe_gtm900b.c ****  *
   8:board/gtm900b/rffe_gtm900b.c ****  * This program is free software; you can redistribute it and/or modify
   9:board/gtm900b/rffe_gtm900b.c ****  * it under the terms of the GNU General Public License as published by
  10:board/gtm900b/rffe_gtm900b.c ****  * the Free Software Foundation; either version 2 of the License, or
  11:board/gtm900b/rffe_gtm900b.c ****  * (at your option) any later version.
  12:board/gtm900b/rffe_gtm900b.c ****  *
  13:board/gtm900b/rffe_gtm900b.c ****  * This program is distributed in the hope that it will be useful,
  14:board/gtm900b/rffe_gtm900b.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:board/gtm900b/rffe_gtm900b.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:board/gtm900b/rffe_gtm900b.c ****  * GNU General Public License for more details.
  17:board/gtm900b/rffe_gtm900b.c ****  *
  18:board/gtm900b/rffe_gtm900b.c ****  * You should have received a copy of the GNU General Public License
  19:board/gtm900b/rffe_gtm900b.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  20:board/gtm900b/rffe_gtm900b.c ****  *
  21:board/gtm900b/rffe_gtm900b.c ****  */
  22:board/gtm900b/rffe_gtm900b.c **** 
  23:board/gtm900b/rffe_gtm900b.c **** #include <stdint.h>
  24:board/gtm900b/rffe_gtm900b.c **** #include <stdio.h>
  25:board/gtm900b/rffe_gtm900b.c **** 
  26:board/gtm900b/rffe_gtm900b.c **** #include <debug.h>
  27:board/gtm900b/rffe_gtm900b.c **** #include <memory.h>
  28:board/gtm900b/rffe_gtm900b.c **** #include <rffe.h>
  29:board/gtm900b/rffe_gtm900b.c **** #include <calypso/tsp.h>
  30:board/gtm900b/rffe_gtm900b.c **** #include <rf/trf6151.h>
  31:board/gtm900b/rffe_gtm900b.c **** #include <flash/cfi_flash.h>
  32:board/gtm900b/rffe_gtm900b.c **** 
  33:board/gtm900b/rffe_gtm900b.c **** /* This is a value that has been measured for the GTM900-B: 74dBm,
  34:board/gtm900b/rffe_gtm900b.c ****    it is the difference between the input level at the antenna and what
  35:board/gtm900b/rffe_gtm900b.c ****    the DSP reports, subtracted by the total gain of the TRF6151 */
  36:board/gtm900b/rffe_gtm900b.c **** #define SYSTEM_INHERENT_GAIN	74
  37:board/gtm900b/rffe_gtm900b.c **** 
  38:board/gtm900b/rffe_gtm900b.c **** /* describe how the RF frontend is wired on the Huawei GTM900-B */
  39:board/gtm900b/rffe_gtm900b.c **** #define		IOTA_STROBE	TSPEN(0)	/* Strobe for the Iota TSP */
  40:board/gtm900b/rffe_gtm900b.c **** #define		RITA_STROBE	TSPEN(2)	/* Strobe for the Rita TSP */
  41:board/gtm900b/rffe_gtm900b.c **** 
  42:board/gtm900b/rffe_gtm900b.c **** #define		RITA_RESET	TSPACT(0)	/* Reset of the Rita TRF6151 */
  43:board/gtm900b/rffe_gtm900b.c **** #define		PA_BAND_SELECT	TSPACT(3)	/* Low: 850/900, High: 1800/1900 */
  44:board/gtm900b/rffe_gtm900b.c **** #define		PA_TX_ENABLE	TSPACT(9)	/* Enable the Power Amplifier */
  45:board/gtm900b/rffe_gtm900b.c **** 
  46:board/gtm900b/rffe_gtm900b.c **** /* MGC2GSMT Ver. BRF specific antenna switch signals, low active */
  47:board/gtm900b/rffe_gtm900b.c **** #define		ASM_VC1		TSPACT(1)	/* low on GSM900 TX */
  48:board/gtm900b/rffe_gtm900b.c **** #define		ASM_VC2		TSPACT(2)	/* low on DCS1800 TX */
  49:board/gtm900b/rffe_gtm900b.c **** 
  50:board/gtm900b/rffe_gtm900b.c **** /* MG01GSMT Ver. C specific antenna switch signals, low active */
  51:board/gtm900b/rffe_gtm900b.c **** #define		CXG_CTLA	TSPACT(4)	/* CXG1192UR CTLA input */
  52:board/gtm900b/rffe_gtm900b.c **** #define		CXG_CTLB	TSPACT(1)	/* CXG1192UR CTLB input */
  53:board/gtm900b/rffe_gtm900b.c **** #define		CXG_CTLC	TSPACT(2)	/* CXG1192UR CTLC input */
  54:board/gtm900b/rffe_gtm900b.c **** 
  55:board/gtm900b/rffe_gtm900b.c **** /*
  56:board/gtm900b/rffe_gtm900b.c ****  * The Sony CXG1192UR switch is wired as follows on the MG01GSMT Ver. C:
  57:board/gtm900b/rffe_gtm900b.c ****  *
  58:board/gtm900b/rffe_gtm900b.c ****  * Rx1: GSM850 RX filter (Epcos B5013)
  59:board/gtm900b/rffe_gtm900b.c ****  * Rx2: GSM900 RX filter (Epcos B7710)
  60:board/gtm900b/rffe_gtm900b.c ****  * Rx3: DCS1800 RX filter (Epcos 7714)
  61:board/gtm900b/rffe_gtm900b.c ****  * Rx4: PCS1900 RX filter (not populated)
  62:board/gtm900b/rffe_gtm900b.c ****  * Tx1: low band PA output
  63:board/gtm900b/rffe_gtm900b.c ****  * Tx2: high band PA output
  64:board/gtm900b/rffe_gtm900b.c ****  */
  65:board/gtm900b/rffe_gtm900b.c **** 
  66:board/gtm900b/rffe_gtm900b.c **** extern int gtm900_hw_is_mg01gsmt;	/* set in init.c */
  67:board/gtm900b/rffe_gtm900b.c **** 
  68:board/gtm900b/rffe_gtm900b.c **** static inline void rffe_mode_mgc2gsmt(enum gsm_band band, int tx)
  69:board/gtm900b/rffe_gtm900b.c **** {
  70:board/gtm900b/rffe_gtm900b.c **** 	uint16_t tspact = tsp_act_state();
  71:board/gtm900b/rffe_gtm900b.c **** 
  72:board/gtm900b/rffe_gtm900b.c **** 	/* First we mask off all bits from the state cache */
  73:board/gtm900b/rffe_gtm900b.c **** 	tspact &= ~(PA_BAND_SELECT | PA_TX_ENABLE);
  74:board/gtm900b/rffe_gtm900b.c **** 	tspact |=  (ASM_VC1 | ASM_VC2);	/* low-active */
  75:board/gtm900b/rffe_gtm900b.c **** 
  76:board/gtm900b/rffe_gtm900b.c **** #ifdef CONFIG_TX_ENABLE
  77:board/gtm900b/rffe_gtm900b.c **** 	/* Then we selectively set the bits on, if required */
  78:board/gtm900b/rffe_gtm900b.c **** 	if (tx) {
  79:board/gtm900b/rffe_gtm900b.c **** 		tspact |= PA_TX_ENABLE;
  80:board/gtm900b/rffe_gtm900b.c **** 		tspact &= ~CXG_CTLA;
  81:board/gtm900b/rffe_gtm900b.c **** 
  82:board/gtm900b/rffe_gtm900b.c **** 		if (band == GSM_BAND_1800 || band == GSM_BAND_1900) {
  83:board/gtm900b/rffe_gtm900b.c **** 			tspact |= PA_BAND_SELECT;
  84:board/gtm900b/rffe_gtm900b.c **** 			tspact &= ~ASM_VC2;
  85:board/gtm900b/rffe_gtm900b.c **** 		} else {
  86:board/gtm900b/rffe_gtm900b.c **** 			tspact &= ~ASM_VC1;
  87:board/gtm900b/rffe_gtm900b.c **** 		}
  88:board/gtm900b/rffe_gtm900b.c **** 	}
  89:board/gtm900b/rffe_gtm900b.c **** #endif /* TRANSMIT_SUPPORT */
  90:board/gtm900b/rffe_gtm900b.c **** 
  91:board/gtm900b/rffe_gtm900b.c **** 	tsp_act_update(tspact);
  92:board/gtm900b/rffe_gtm900b.c **** }
  93:board/gtm900b/rffe_gtm900b.c **** 
  94:board/gtm900b/rffe_gtm900b.c **** static inline void rffe_mode_mg01gsmt(enum gsm_band band, int tx)
  95:board/gtm900b/rffe_gtm900b.c **** {
  96:board/gtm900b/rffe_gtm900b.c **** 	uint16_t tspact = tsp_act_state();
  97:board/gtm900b/rffe_gtm900b.c **** 
  98:board/gtm900b/rffe_gtm900b.c **** 	/* First we mask off all bits from the state cache */
  99:board/gtm900b/rffe_gtm900b.c **** 	tspact &= ~(PA_BAND_SELECT | PA_TX_ENABLE);
 100:board/gtm900b/rffe_gtm900b.c **** 	tspact |=  (CXG_CTLA | CXG_CTLB | CXG_CTLC);	/* low-active */
 101:board/gtm900b/rffe_gtm900b.c **** 
 102:board/gtm900b/rffe_gtm900b.c **** 	switch (band) {
 103:board/gtm900b/rffe_gtm900b.c **** 	case GSM_BAND_850:
 104:board/gtm900b/rffe_gtm900b.c **** 		tspact &= ~CXG_CTLB;		  /* select Ant1 - Rx1 */
 105:board/gtm900b/rffe_gtm900b.c **** 		break;
 106:board/gtm900b/rffe_gtm900b.c **** 	case GSM_BAND_900:
 107:board/gtm900b/rffe_gtm900b.c **** 		tspact &= ~CXG_CTLC;		  /* select Ant1 - Rx2 */
 108:board/gtm900b/rffe_gtm900b.c **** 		break;
 109:board/gtm900b/rffe_gtm900b.c **** 	case GSM_BAND_1800:			  /* select Ant2 - Rx3 */
 110:board/gtm900b/rffe_gtm900b.c **** 		break;
 111:board/gtm900b/rffe_gtm900b.c **** 	case GSM_BAND_1900:
 112:board/gtm900b/rffe_gtm900b.c **** 		tspact &= ~(CXG_CTLB | CXG_CTLC); /* select Ant2 - Rx4 */
 113:board/gtm900b/rffe_gtm900b.c **** 		break;
 114:board/gtm900b/rffe_gtm900b.c **** 	default:
 115:board/gtm900b/rffe_gtm900b.c **** 		break;
 116:board/gtm900b/rffe_gtm900b.c **** 	}
 117:board/gtm900b/rffe_gtm900b.c **** 
 118:board/gtm900b/rffe_gtm900b.c **** #ifdef CONFIG_TX_ENABLE
 119:board/gtm900b/rffe_gtm900b.c **** 	/* Then we selectively set the bits on, if required */
 120:board/gtm900b/rffe_gtm900b.c **** 	if (tx) {
 121:board/gtm900b/rffe_gtm900b.c **** 		tspact |= PA_TX_ENABLE;
 122:board/gtm900b/rffe_gtm900b.c **** 		tspact &= ~CXG_CTLA;
 123:board/gtm900b/rffe_gtm900b.c **** 
 124:board/gtm900b/rffe_gtm900b.c **** 		if (band == GSM_BAND_1800 || band == GSM_BAND_1900) {
 125:board/gtm900b/rffe_gtm900b.c **** 			tspact |= PA_BAND_SELECT;
 126:board/gtm900b/rffe_gtm900b.c **** 			tspact &= ~CXG_CTLB;
 127:board/gtm900b/rffe_gtm900b.c **** 		}
 128:board/gtm900b/rffe_gtm900b.c **** 	}
 129:board/gtm900b/rffe_gtm900b.c **** #endif /* TRANSMIT_SUPPORT */
 130:board/gtm900b/rffe_gtm900b.c **** 
 131:board/gtm900b/rffe_gtm900b.c **** 	tsp_act_update(tspact);
 132:board/gtm900b/rffe_gtm900b.c **** }
 133:board/gtm900b/rffe_gtm900b.c **** 
 134:board/gtm900b/rffe_gtm900b.c **** /* switch RF Frontend Mode */
 135:board/gtm900b/rffe_gtm900b.c **** void rffe_mode(enum gsm_band band, int tx)
 136:board/gtm900b/rffe_gtm900b.c **** {
  23              		.loc 1 136 0
  24              		@ args = 0, pretend = 0, frame = 0
  25              		@ frame_needed = 0, uses_anonymous_args = 0
  26              	.LVL0:
  27 0000 10402DE9 		stmfd	sp!, {r4, lr}
  28              	.LCFI0:
 137:board/gtm900b/rffe_gtm900b.c **** 	if (gtm900_hw_is_mg01gsmt)
  29              		.loc 1 137 0
  30 0004 6C309FE5 		ldr	r3, .L12
  31 0008 003093E5 		ldr	r3, [r3, #0]
  32 000c 000053E3 		cmp	r3, #0
  33              		.loc 1 136 0
  34 0010 0040A0E1 		mov	r4, r0
  35              		.loc 1 137 0
  36 0014 1600000A 		beq	.L2
  37              	.LVL1:
  38              	.LBB2:
  39              	.LBB3:
  40              		.loc 1 96 0
  41 0018 FEFFFFEB 		bl	tsp_act_state
  42              	.LVL2:
  43              		.loc 1 99 0
  44 001c 58309FE5 		ldr	r3, .L12+4
  45              	.LVL3:
  46              		.loc 1 102 0
  47 0020 020054E3 		cmp	r4, #2
  48              		.loc 1 99 0
  49 0024 033000E0 		and	r3, r0, r3
  50              		.loc 1 100 0
  51 0028 160083E3 		orr	r0, r3, #22
  52              	.LVL4:
  53              		.loc 1 102 0
  54 002c 1000000A 		beq	.L6
  55 0030 080054E3 		cmp	r4, #8
  56 0034 1200000A 		beq	.L7
  57 0038 010054E3 		cmp	r4, #1
  58              		.loc 1 104 0
  59 003c 0200C003 		biceq	r0, r0, #2
  60              		.loc 1 102 0
  61 0040 1300000A 		beq	.L10
  62 0044 1A0000EA 		b	.L11
  63              	.L6:
  64              		.loc 1 107 0
  65 0048 0400C0E3 		bic	r0, r0, #4
  66 004c 130000EA 		b	.L10
  67              	.L7:
  68              		.loc 1 112 0
  69 0050 0600C0E3 		bic	r0, r0, #6
  70              	.L10:
  71 0054 0008A0E1 		mov	r0, r0, asl #16
  72 0058 2008A0E1 		mov	r0, r0, lsr #16
  73 005c 1A0000EA 		b	.L11
  74              	.LVL5:
  75              	.L2:
  76              	.LBE3:
  77              	.LBE2:
  78              	.LBB4:
  79              	.LBB5:
  80              		.loc 1 70 0
  81 0060 FEFFFFEB 		bl	tsp_act_state
  82              	.LVL6:
  83              		.loc 1 73 0
  84 0064 10309FE5 		ldr	r3, .L12+4
  85              	.LVL7:
  86 0068 033000E0 		and	r3, r0, r3
  87              		.loc 1 91 0
  88 006c 060083E3 		orr	r0, r3, #6
  89              	.LVL8:
  90              	.L11:
  91              	.LBE5:
  92              	.LBE4:
 138:board/gtm900b/rffe_gtm900b.c **** 		rffe_mode_mg01gsmt(band, tx);
 139:board/gtm900b/rffe_gtm900b.c **** 	else
 140:board/gtm900b/rffe_gtm900b.c **** 		rffe_mode_mgc2gsmt(band, tx);
 141:board/gtm900b/rffe_gtm900b.c **** }
  93              		.loc 1 141 0
  94 0070 1040BDE8 		ldmfd	sp!, {r4, lr}
  95              	.LBB6:
  96              	.LBB7:
  97              		.loc 1 91 0
  98 0074 FEFFFFEA 		b	tsp_act_update
  99              	.LVL9:
 100              	.L13:
 101              		.align	2
 102              	.L12:
 103 0078 00000000 		.word	gtm900_hw_is_mg01gsmt
 104 007c F7FD0000 		.word	65015
 105              	.LBE7:
 106              	.LBE6:
 107              	.LFE7:
 109              		.section	.text.rffe_get_rx_ports,"ax",%progbits
 110              		.align	2
 111              		.global	rffe_get_rx_ports
 113              	rffe_get_rx_ports:
 114              	.LFB8:
 142:board/gtm900b/rffe_gtm900b.c **** 
 143:board/gtm900b/rffe_gtm900b.c **** uint32_t rffe_get_rx_ports(void)
 144:board/gtm900b/rffe_gtm900b.c **** {
 115              		.loc 1 144 0
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119              	.LVL10:
 145:board/gtm900b/rffe_gtm900b.c **** 	return (1 << PORT_LO) | (1 << PORT_DCS1800) | (1 << PORT_PCS1900);
 146:board/gtm900b/rffe_gtm900b.c **** }
 120              		.loc 1 146 0
 121 0000 3100A0E3 		mov	r0, #49
 122              		.loc 1 144 0
 123              		@ lr needed for prologue
 124              		.loc 1 146 0
 125 0004 1EFF2FE1 		bx	lr
 126              	.LFE8:
 128              		.section	.text.rffe_get_tx_ports,"ax",%progbits
 129              		.align	2
 130              		.global	rffe_get_tx_ports
 132              	rffe_get_tx_ports:
 133              	.LFB9:
 147:board/gtm900b/rffe_gtm900b.c **** 
 148:board/gtm900b/rffe_gtm900b.c **** uint32_t rffe_get_tx_ports(void)
 149:board/gtm900b/rffe_gtm900b.c **** {
 134              		.loc 1 149 0
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138              	.LVL11:
 150:board/gtm900b/rffe_gtm900b.c **** 	return (1 << PORT_LO) | (1 << PORT_HI);
 151:board/gtm900b/rffe_gtm900b.c **** }
 139              		.loc 1 151 0
 140 0000 0300A0E3 		mov	r0, #3
 141              		.loc 1 149 0
 142              		@ lr needed for prologue
 143              		.loc 1 151 0
 144 0004 1EFF2FE1 		bx	lr
 145              	.LFE9:
 147              		.section	.text.rffe_iq_swapped,"ax",%progbits
 148              		.align	2
 149              		.global	rffe_iq_swapped
 151              	rffe_iq_swapped:
 152              	.LFB10:
 152:board/gtm900b/rffe_gtm900b.c **** 
 153:board/gtm900b/rffe_gtm900b.c **** /* Returns need for IQ swap */
 154:board/gtm900b/rffe_gtm900b.c **** int rffe_iq_swapped(uint16_t band_arfcn, int tx)
 155:board/gtm900b/rffe_gtm900b.c **** {
 153              		.loc 1 155 0
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 157              	.LVL12:
 158 0000 0008A0E1 		mov	r0, r0, asl #16
 159              	.LVL13:
 156:board/gtm900b/rffe_gtm900b.c **** 	return trf6151_iq_swapped(band_arfcn, tx);
 160              		.loc 1 156 0
 161 0004 2008A0E1 		mov	r0, r0, lsr #16
 162              	.LVL14:
 163              		.loc 1 155 0
 164              		@ lr needed for prologue
 157:board/gtm900b/rffe_gtm900b.c **** }
 165              		.loc 1 157 0
 166              		.loc 1 156 0
 167 0008 FEFFFFEA 		b	trf6151_iq_swapped
 168              	.LVL15:
 169              	.LFE10:
 171              		.section	.text.rffe_init,"ax",%progbits
 172              		.align	2
 173              		.global	rffe_init
 175              	rffe_init:
 176              	.LFB11:
 158:board/gtm900b/rffe_gtm900b.c **** 
 159:board/gtm900b/rffe_gtm900b.c **** #define ARM_CONF_REG	0xfffef006
 160:board/gtm900b/rffe_gtm900b.c **** 
 161:board/gtm900b/rffe_gtm900b.c **** void rffe_init(void)
 162:board/gtm900b/rffe_gtm900b.c **** {
 177              		.loc 1 162 0
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              	.LVL16:
 181 0000 04E02DE5 		str	lr, [sp, #-4]!
 182              	.LCFI1:
 163:board/gtm900b/rffe_gtm900b.c **** 	uint16_t reg;
 164:board/gtm900b/rffe_gtm900b.c **** 
 165:board/gtm900b/rffe_gtm900b.c **** 	reg = readw(ARM_CONF_REG);
 183              		.loc 1 165 0
 184 0004 30C09FE5 		ldr	ip, .L22
 166:board/gtm900b/rffe_gtm900b.c **** 	reg &= ~ (1 << 7);	/* TSPACT4 I/O function, not nRDYMEM */
 185              		.loc 1 166 0
 186 0008 30E09FE5 		ldr	lr, .L22+4
 187              	.LVL17:
 188              		.loc 1 165 0
 189 000c B030DCE1 		ldrh	r3, [ip, #0]
 167:board/gtm900b/rffe_gtm900b.c **** 	writew(reg, ARM_CONF_REG);
 168:board/gtm900b/rffe_gtm900b.c **** 
 169:board/gtm900b/rffe_gtm900b.c **** 	/* Configure the TSPEN which is connected to the TWL3025 */
 170:board/gtm900b/rffe_gtm900b.c **** 	tsp_setup(IOTA_STROBE, 1, 0, 0);
 190              		.loc 1 170 0
 191 0010 0000A0E3 		mov	r0, #0
 192              		.loc 1 166 0
 193 0014 0EE003E0 		and	lr, r3, lr
 194              		.loc 1 170 0
 195 0018 0020A0E1 		mov	r2, r0
 196 001c 0030A0E1 		mov	r3, r0
 197 0020 0110A0E3 		mov	r1, #1
 198              		.loc 1 167 0
 199 0024 B0E0CCE1 		strh	lr, [ip, #0]	@ movhi
 200              		.loc 1 170 0
 201 0028 FEFFFFEB 		bl	tsp_setup
 202              	.LVL18:
 171:board/gtm900b/rffe_gtm900b.c **** 
 172:board/gtm900b/rffe_gtm900b.c **** 	trf6151_init(RITA_STROBE, RITA_RESET);
 203              		.loc 1 172 0
 204 002c 0200A0E3 		mov	r0, #2
 205 0030 0110A0E3 		mov	r1, #1
 173:board/gtm900b/rffe_gtm900b.c **** }
 206              		.loc 1 173 0
 207 0034 04E09DE4 		ldr	lr, [sp], #4
 208              		.loc 1 172 0
 209 0038 FEFFFFEA 		b	trf6151_init
 210              	.L23:
 211              		.align	2
 212              	.L22:
 213 003c 06F0FEFF 		.word	-69626
 214 0040 7FFF0000 		.word	65407
 215              	.LFE11:
 217              		.section	.text.rffe_get_gain,"ax",%progbits
 218              		.align	2
 219              		.global	rffe_get_gain
 221              	rffe_get_gain:
 222              	.LFB12:
 174:board/gtm900b/rffe_gtm900b.c **** 
 175:board/gtm900b/rffe_gtm900b.c **** uint8_t rffe_get_gain(void)
 176:board/gtm900b/rffe_gtm900b.c **** {
 223              		.loc 1 176 0
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              	.LVL19:
 227 0000 04E02DE5 		str	lr, [sp, #-4]!
 228              	.LCFI2:
 177:board/gtm900b/rffe_gtm900b.c **** 	return trf6151_get_gain();
 229              		.loc 1 177 0
 230 0004 FEFFFFEB 		bl	trf6151_get_gain
 178:board/gtm900b/rffe_gtm900b.c **** }
 231              		.loc 1 178 0
 232 0008 04F09DE4 		ldr	pc, [sp], #4
 233              	.LFE12:
 235              		.section	.text.rffe_set_gain,"ax",%progbits
 236              		.align	2
 237              		.global	rffe_set_gain
 239              	rffe_set_gain:
 240              	.LFB13:
 179:board/gtm900b/rffe_gtm900b.c **** 
 180:board/gtm900b/rffe_gtm900b.c **** void rffe_set_gain(uint8_t dbm)
 181:board/gtm900b/rffe_gtm900b.c **** {
 241              		.loc 1 181 0
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245              	.LVL20:
 246 0000 FF0000E2 		and	r0, r0, #255
 247              		@ lr needed for prologue
 182:board/gtm900b/rffe_gtm900b.c **** 	trf6151_set_gain(dbm);
 183:board/gtm900b/rffe_gtm900b.c **** }
 248              		.loc 1 183 0
 249              		.loc 1 182 0
 250 0004 FEFFFFEA 		b	trf6151_set_gain
 251              	.LVL21:
 252              	.LFE13:
 254              		.section	.text.rffe_compute_gain,"ax",%progbits
 255              		.align	2
 256              		.global	rffe_compute_gain
 258              	rffe_compute_gain:
 259              	.LFB14:
 184:board/gtm900b/rffe_gtm900b.c **** 
 185:board/gtm900b/rffe_gtm900b.c **** const uint8_t system_inherent_gain = SYSTEM_INHERENT_GAIN;
 186:board/gtm900b/rffe_gtm900b.c **** 
 187:board/gtm900b/rffe_gtm900b.c **** /* Given the expected input level of exp_inp dBm/8 and the target of target_bb
 188:board/gtm900b/rffe_gtm900b.c ****  * dBm8, configure the RF Frontend with the respective gain */
 189:board/gtm900b/rffe_gtm900b.c **** void rffe_compute_gain(int16_t exp_inp, int16_t target_bb)
 190:board/gtm900b/rffe_gtm900b.c **** {
 260              		.loc 1 190 0
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 264              	.LVL22:
 191:board/gtm900b/rffe_gtm900b.c **** 	trf6151_compute_gain(exp_inp, target_bb);
 265              		.loc 1 191 0
 266 0000 0008A0E1 		mov	r0, r0, asl #16
 267              	.LVL23:
 268 0004 0118A0E1 		mov	r1, r1, asl #16
 269              	.LVL24:
 270 0008 4008A0E1 		mov	r0, r0, asr #16
 271 000c 4118A0E1 		mov	r1, r1, asr #16
 272              		.loc 1 190 0
 273              		@ lr needed for prologue
 192:board/gtm900b/rffe_gtm900b.c **** }
 274              		.loc 1 192 0
 275              		.loc 1 191 0
 276 0010 FEFFFFEA 		b	trf6151_compute_gain
 277              	.LFE14:
 279              		.section	.text.rffe_rx_win_ctrl,"ax",%progbits
 280              		.align	2
 281              		.global	rffe_rx_win_ctrl
 283              	rffe_rx_win_ctrl:
 284              	.LFB15:
 193:board/gtm900b/rffe_gtm900b.c **** 
 194:board/gtm900b/rffe_gtm900b.c **** void rffe_rx_win_ctrl(int16_t exp_inp, int16_t target_bb)
 195:board/gtm900b/rffe_gtm900b.c **** {
 285              		.loc 1 195 0
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 289              	.LVL25:
 290              		@ lr needed for prologue
 196:board/gtm900b/rffe_gtm900b.c **** 	/* FIXME */
 197:board/gtm900b/rffe_gtm900b.c **** }
 291              		.loc 1 197 0
 292 0000 1EFF2FE1 		bx	lr
 293              	.LFE15:
 405              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rffe_gtm900b.c
     /tmp/ccSQVrqf.s:14     .rodata:0000000000000000 system_inherent_gain
     /tmp/ccSQVrqf.s:20     .text.rffe_mode:0000000000000000 rffe_mode
     /tmp/ccSQVrqf.s:27     .text.rffe_mode:0000000000000000 $a
     /tmp/ccSQVrqf.s:103    .text.rffe_mode:0000000000000078 $d
     /tmp/ccSQVrqf.s:113    .text.rffe_get_rx_ports:0000000000000000 rffe_get_rx_ports
     /tmp/ccSQVrqf.s:121    .text.rffe_get_rx_ports:0000000000000000 $a
     /tmp/ccSQVrqf.s:132    .text.rffe_get_tx_ports:0000000000000000 rffe_get_tx_ports
     /tmp/ccSQVrqf.s:140    .text.rffe_get_tx_ports:0000000000000000 $a
     /tmp/ccSQVrqf.s:151    .text.rffe_iq_swapped:0000000000000000 rffe_iq_swapped
     /tmp/ccSQVrqf.s:158    .text.rffe_iq_swapped:0000000000000000 $a
     /tmp/ccSQVrqf.s:175    .text.rffe_init:0000000000000000 rffe_init
     /tmp/ccSQVrqf.s:181    .text.rffe_init:0000000000000000 $a
     /tmp/ccSQVrqf.s:213    .text.rffe_init:000000000000003c $d
     /tmp/ccSQVrqf.s:221    .text.rffe_get_gain:0000000000000000 rffe_get_gain
     /tmp/ccSQVrqf.s:227    .text.rffe_get_gain:0000000000000000 $a
     /tmp/ccSQVrqf.s:239    .text.rffe_set_gain:0000000000000000 rffe_set_gain
     /tmp/ccSQVrqf.s:246    .text.rffe_set_gain:0000000000000000 $a
     /tmp/ccSQVrqf.s:258    .text.rffe_compute_gain:0000000000000000 rffe_compute_gain
     /tmp/ccSQVrqf.s:266    .text.rffe_compute_gain:0000000000000000 $a
     /tmp/ccSQVrqf.s:283    .text.rffe_rx_win_ctrl:0000000000000000 rffe_rx_win_ctrl
     /tmp/ccSQVrqf.s:292    .text.rffe_rx_win_ctrl:0000000000000000 $a

UNDEFINED SYMBOLS
tsp_act_state
tsp_act_update
gtm900_hw_is_mg01gsmt
trf6151_iq_swapped
tsp_setup
trf6151_init
trf6151_get_gain
trf6151_set_gain
trf6151_compute_gain
