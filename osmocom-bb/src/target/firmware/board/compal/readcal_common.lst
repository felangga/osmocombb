   1              		.file	"readcal_common.c"
   9              	.Ltext0:
  10              		.section	.text.apply_levels,"ax",%progbits
  11              		.align	2
  13              	apply_levels:
  14              	.LFB2:
  15              		.file 1 "board/compal/readcal_common.c"
   1:board/compal/readcal_common.c **** /*
   2:board/compal/readcal_common.c ****  * This code was written by Mychaela Falconia <falcon@freecalypso.org>
   3:board/compal/readcal_common.c ****  * who refuses to claim copyright on it and has released it as public domain
   4:board/compal/readcal_common.c ****  * instead. NO rights reserved, all rights relinquished.
   5:board/compal/readcal_common.c ****  *
   6:board/compal/readcal_common.c ****  * Tweaked (coding style changes) by Vadim Yanitskiy <axilirator@gmail.com>
   7:board/compal/readcal_common.c ****  *
   8:board/compal/readcal_common.c ****  * This program is free software; you can redistribute it and/or modify
   9:board/compal/readcal_common.c ****  * it under the terms of the GNU General Public License as published by
  10:board/compal/readcal_common.c ****  * the Free Software Foundation; either version 2 of the License, or
  11:board/compal/readcal_common.c ****  * (at your option) any later version.
  12:board/compal/readcal_common.c ****  *
  13:board/compal/readcal_common.c ****  * This program is distributed in the hope that it will be useful,
  14:board/compal/readcal_common.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:board/compal/readcal_common.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:board/compal/readcal_common.c ****  * GNU General Public License for more details.
  17:board/compal/readcal_common.c ****  *
  18:board/compal/readcal_common.c ****  * You should have received a copy of the GNU General Public License along
  19:board/compal/readcal_common.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  20:board/compal/readcal_common.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  21:board/compal/readcal_common.c ****  *
  22:board/compal/readcal_common.c ****  */
  23:board/compal/readcal_common.c **** 
  24:board/compal/readcal_common.c **** #include <stdio.h>
  25:board/compal/readcal_common.c **** #include <stdint.h>
  26:board/compal/readcal_common.c **** #include <string.h>
  27:board/compal/readcal_common.c **** #include <inttypes.h>
  28:board/compal/readcal_common.c **** 
  29:board/compal/readcal_common.c **** #include <rf/txcal.h>
  30:board/compal/readcal_common.c **** 
  31:board/compal/readcal_common.c **** struct record_hdr {
  32:board/compal/readcal_common.c **** 	uint16_t valid_flag;
  33:board/compal/readcal_common.c **** 	uint16_t type;
  34:board/compal/readcal_common.c **** 	uint16_t native_len;
  35:board/compal/readcal_common.c **** 	uint16_t rounded_len;
  36:board/compal/readcal_common.c **** };
  37:board/compal/readcal_common.c **** 
  38:board/compal/readcal_common.c **** static void apply_levels(struct txcal_tx_level *levels_table,
  39:board/compal/readcal_common.c **** 			 uint16_t *compal_data, unsigned start_level,
  40:board/compal/readcal_common.c **** 			 unsigned num_levels)
  41:board/compal/readcal_common.c **** {
  16              		.loc 1 41 0
  17              		@ args = 0, pretend = 0, frame = 0
  18              		@ frame_needed = 0, uses_anonymous_args = 0
  19              		@ link register save eliminated.
  20              	.LVL0:
  21 0000 022180E0 		add	r2, r0, r2, asl #2
  22              	.LVL1:
  23 0004 0000A0E3 		mov	r0, #0
  24              	.LVL2:
  25              		@ lr needed for prologue
  26 0008 030000EA 		b	.L2
  27              	.L3:
  42:board/compal/readcal_common.c **** 	unsigned n;
  43:board/compal/readcal_common.c **** 
  44:board/compal/readcal_common.c **** 	for (n = 0; n < num_levels; n++)
  45:board/compal/readcal_common.c **** 		levels_table[start_level + n].apc = *compal_data++;
  28              		.loc 1 45 0
  29 000c B1C09CE1 		ldrh	ip, [ip, r1]
  30 0010 B4C042E1 		strh	ip, [r2, #-4]	@ movhi
  31              	.L2:
  32              		.loc 1 44 0
  33 0014 030050E1 		cmp	r0, r3
  34              		.loc 1 45 0
  35 0018 80C0A0E1 		mov	ip, r0, asl #1
  36              		.loc 1 44 0
  37 001c 042082E2 		add	r2, r2, #4
  38 0020 010080E2 		add	r0, r0, #1
  39 0024 0100003A 		bcc	.L3
  46:board/compal/readcal_common.c **** }
  40              		.loc 1 46 0
  41 0028 1EFF2FE1 		bx	lr
  42              	.LFE2:
  44              		.section	.rodata.str1.4,"aMS",%progbits,1
  45              		.align	2
  46              	.LC0:
  47 0000 416E616C 		.ascii	"Analyzing factory records sector at 0x%lx\012\000"
  47      797A696E 
  47      67206661 
  47      63746F72 
  47      79207265 
  48 002b 00       		.align	2
  49              	.LC1:
  50 002c 42616420 		.ascii	"Bad record at 0x%lx: native length > rounded length"
  50      7265636F 
  50      72642061 
  50      74203078 
  50      256C783A 
  51 005f 0A00     		.ascii	"\012\000"
  52 0061 000000   		.align	2
  53              	.LC2:
  54 0064 42616420 		.ascii	"Bad record at 0x%lx: rounded length is not aligned "
  54      7265636F 
  54      72642061 
  54      74203078 
  54      256C783A 
  55 0097 746F2034 		.ascii	"to 4\012\000"
  55      0A00
  56 009d 000000   		.align	2
  57              	.LC3:
  58 00a0 42616420 		.ascii	"Bad record at 0x%lx: rounded length spills past the"
  58      7265636F 
  58      72642061 
  58      74203078 
  58      256C783A 
  59 00d3 20656E64 		.ascii	" end of the sector\012\000"
  59      206F6620 
  59      74686520 
  59      73656374 
  59      6F720A00 
  60 00e7 00       		.align	2
  61              	.LC4:
  62 00e8 466F756E 		.ascii	"Found 900 MHz band calibration record at 0x%lx, app"
  62      64203930 
  62      30204D48 
  62      7A206261 
  62      6E642063 
  63 011b 6C79696E 		.ascii	"lying\012\000"
  63      670A00
  64 0122 0000     		.align	2
  65              	.LC5:
  66 0124 466F756E 		.ascii	"Found 1800 MHz band calibration record at 0x%lx, ap"
  66      64203138 
  66      3030204D 
  66      487A2062 
  66      616E6420 
  67 0157 706C7969 		.ascii	"plying\012\000"
  67      6E670A00 
  68 015f 00       		.align	2
  69              	.LC6:
  70 0160 466F756E 		.ascii	"Found 1900 MHz band calibration record at 0x%lx, ap"
  70      64203139 
  70      3030204D 
  70      487A2062 
  70      616E6420 
  71 0193 706C7969 		.ascii	"plying\012\000"
  71      6E670A00 
  72 019b 00       		.align	2
  73              	.LC7:
  74 019c 466F756E 		.ascii	"Found 850 MHz band calibration record at 0x%lx, app"
  74      64203835 
  74      30204D48 
  74      7A206261 
  74      6E642063 
  75 01cf 6C79696E 		.ascii	"lying\012\000"
  75      670A00
  76 01d6 0000     		.section	.text.read_compal_factory_records,"ax",%progbits
  77              		.align	2
  78              		.global	read_compal_factory_records
  80              	read_compal_factory_records:
  81              	.LFB3:
  47:board/compal/readcal_common.c **** 
  48:board/compal/readcal_common.c **** void read_compal_factory_records(uint32_t flash_addr)
  49:board/compal/readcal_common.c **** {
  82              		.loc 1 49 0
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              	.LVL3:
  86 0000 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
  87              	.LCFI0:
  50:board/compal/readcal_common.c **** 	struct record_hdr *hdr;
  51:board/compal/readcal_common.c **** 	void *p, *sector_end;
  52:board/compal/readcal_common.c **** 	unsigned p_incr;
  53:board/compal/readcal_common.c **** 	void *payload;
  54:board/compal/readcal_common.c **** 
  55:board/compal/readcal_common.c **** 	printf("Analyzing factory records sector "
  88              		.loc 1 55 0
  89 0004 0010A0E1 		mov	r1, r0
  90              		.loc 1 49 0
  91 0008 0040A0E1 		mov	r4, r0
  92              		.loc 1 55 0
  93 000c 68019FE5 		ldr	r0, .L37
  94              	.LVL4:
  95 0010 FEFFFFEB 		bl	printf
  96              	.LVL5:
  56:board/compal/readcal_common.c **** 		"at 0x%" PRIx32 "\n", flash_addr);
  57:board/compal/readcal_common.c **** 
  58:board/compal/readcal_common.c **** 	p = (void *) flash_addr;
  59:board/compal/readcal_common.c **** 	sector_end = p + 0x2000;
  97              		.loc 1 59 0
  98 0014 027A84E2 		add	r7, r4, #8192
  99              	.LVL6:
 100 0018 5A0000EA 		b	.L7
 101              	.LVL7:
 102              	.L8:
  60:board/compal/readcal_common.c **** 	for (; p < sector_end; p += p_incr) {
  61:board/compal/readcal_common.c **** 		if ((sector_end - p) < 12)
 103              		.loc 1 61 0
 104 001c 070064E0 		rsb	r0, r4, r7
 105 0020 0B0050E3 		cmp	r0, #11
 106 0024 F080BDD8 		ldmlefd	sp!, {r4, r5, r6, r7, pc}
  62:board/compal/readcal_common.c **** 			break;
  63:board/compal/readcal_common.c **** 		hdr = (struct record_hdr *)p;
  64:board/compal/readcal_common.c **** 		if (hdr->valid_flag == 0xFFFF)	/* blank flash */
 107              		.loc 1 64 0
 108 0028 B010D4E1 		ldrh	r1, [r4, #0]
 109 002c 4C319FE5 		ldr	r3, .L37+4
 110 0030 030051E1 		cmp	r1, r3
 111 0034 F080BD08 		ldmeqfd	sp!, {r4, r5, r6, r7, pc}
  65:board/compal/readcal_common.c **** 			break;
  66:board/compal/readcal_common.c **** 		if (hdr->native_len > hdr->rounded_len) {
 112              		.loc 1 66 0
 113 0038 B420D4E1 		ldrh	r2, [r4, #4]
 114 003c B630D4E1 		ldrh	r3, [r4, #6]
 115 0040 030052E1 		cmp	r2, r3
  67:board/compal/readcal_common.c **** 			printf("Bad record at 0x%" PRIx32 ": native length "
 116              		.loc 1 67 0
 117 0044 38019F85 		ldrhi	r0, .L37+8
 118 0048 0410A081 		movhi	r1, r4
 119 004c 1600008A 		bhi	.L35
 120              	.L12:
  68:board/compal/readcal_common.c **** 				"> rounded length\n", (uint32_t) p);
  69:board/compal/readcal_common.c **** 			return;
  70:board/compal/readcal_common.c **** 		}
  71:board/compal/readcal_common.c **** 		if (hdr->rounded_len & 3) {
 121              		.loc 1 71 0
 122 0050 035013E2 		ands	r5, r3, #3
 123 0054 1800000A 		beq	.L14
  72:board/compal/readcal_common.c **** 			printf("Bad record at 0x%" PRIx32 ": rounded length "
 124              		.loc 1 72 0
 125 0058 28019FE5 		ldr	r0, .L37+12
 126 005c 0410A0E1 		mov	r1, r4
 127              	.L35:
  73:board/compal/readcal_common.c **** 				"is not aligned to 4\n", (uint32_t) p);
  74:board/compal/readcal_common.c **** 			return;
  75:board/compal/readcal_common.c **** 		}
  76:board/compal/readcal_common.c **** 		p_incr = hdr->rounded_len + 8;
  77:board/compal/readcal_common.c **** 		if (p_incr > (sector_end - p)) {
  78:board/compal/readcal_common.c **** 			printf("Bad record at 0x%" PRIx32 ": rounded length "
  79:board/compal/readcal_common.c **** 				"spills past the end of the sector\n", (uint32_t) p);
  80:board/compal/readcal_common.c **** 			return;
  81:board/compal/readcal_common.c **** 		}
  82:board/compal/readcal_common.c **** 		if (hdr->valid_flag != 0x000C)
  83:board/compal/readcal_common.c **** 			continue;
  84:board/compal/readcal_common.c **** 		payload = (void *)(hdr + 1);
  85:board/compal/readcal_common.c **** 		switch (hdr->type) {
  86:board/compal/readcal_common.c **** 		case 0x0000:
  87:board/compal/readcal_common.c **** 			if (hdr->native_len != 0x94)
  88:board/compal/readcal_common.c **** 				break;
  89:board/compal/readcal_common.c **** 			if (*(uint32_t *)(payload + 0x5C) != 0xAA)
  90:board/compal/readcal_common.c **** 				break;
  91:board/compal/readcal_common.c **** 			printf("Found 900 MHz band calibration record at "
  92:board/compal/readcal_common.c **** 				"0x%" PRIx32 ", applying\n", (uint32_t) p);
  93:board/compal/readcal_common.c **** 			apply_levels(rf_tx_levels_900, payload + 0x60, 5, 15);
  94:board/compal/readcal_common.c **** 			break;
  95:board/compal/readcal_common.c **** 		case 0x0001:
  96:board/compal/readcal_common.c **** 			if (hdr->native_len != 0xC8)
  97:board/compal/readcal_common.c **** 				break;
  98:board/compal/readcal_common.c **** 			if (*(uint32_t *)(payload + 0x7C) != 0xAA)
  99:board/compal/readcal_common.c **** 				break;
 100:board/compal/readcal_common.c **** 			printf("Found 1800 MHz band calibration record at "
 101:board/compal/readcal_common.c **** 				"0x%" PRIx32 ", applying\n", (uint32_t) p);
 102:board/compal/readcal_common.c **** 			apply_levels(rf_tx_levels_1800, payload + 0x80, 0, 16);
 103:board/compal/readcal_common.c **** 			break;
 104:board/compal/readcal_common.c **** 		case 0x0002:
 105:board/compal/readcal_common.c **** 			if (hdr->native_len != 0xB4)
 106:board/compal/readcal_common.c **** 				break;
 107:board/compal/readcal_common.c **** 			if (*(uint32_t *)(payload + 0x70) != 0xAA)
 108:board/compal/readcal_common.c **** 				break;
 109:board/compal/readcal_common.c **** 			printf("Found 1900 MHz band calibration record at "
 110:board/compal/readcal_common.c **** 				"0x%" PRIx32 ", applying\n", (uint32_t) p);
 111:board/compal/readcal_common.c **** 			apply_levels(rf_tx_levels_1900, payload + 0x74, 0, 16);
 112:board/compal/readcal_common.c **** 			break;
 113:board/compal/readcal_common.c **** 		case 0x0018:
 114:board/compal/readcal_common.c **** 			if (hdr->native_len != 0x88)
 115:board/compal/readcal_common.c **** 				break;
 116:board/compal/readcal_common.c **** 			if (*(uint32_t *)(payload + 0x54) != 0xAA)
 117:board/compal/readcal_common.c **** 				break;
 118:board/compal/readcal_common.c **** 			printf("Found 850 MHz band calibration record at "
 119:board/compal/readcal_common.c **** 				"0x%" PRIx32 ", applying\n", (uint32_t) p);
 120:board/compal/readcal_common.c **** 			apply_levels(rf_tx_levels_850, payload + 0x58, 5, 15);
 121:board/compal/readcal_common.c **** 			break;
 122:board/compal/readcal_common.c **** 		}
 123:board/compal/readcal_common.c **** 	}
 124:board/compal/readcal_common.c **** }
 128              		.loc 1 124 0
 129 0060 F040BDE8 		ldmfd	sp!, {r4, r5, r6, r7, lr}
 130              		.loc 1 72 0
 131 0064 FEFFFFEA 		b	printf
 132              	.L14:
 133              		.loc 1 76 0
 134 0068 086083E2 		add	r6, r3, #8
 135              		.loc 1 77 0
 136 006c 000056E1 		cmp	r6, r0
 137              		.loc 1 78 0
 138 0070 14019F85 		ldrhi	r0, .L37+16
 139 0074 0410A081 		movhi	r1, r4
 140 0078 1600008A 		bhi	.L35
 141              	.L16:
 142              		.loc 1 82 0
 143 007c 0C0051E3 		cmp	r1, #12
 144 0080 5900001A 		bne	.L18
 145              		.loc 1 85 0
 146 0084 B230D4E1 		ldrh	r3, [r4, #2]
 147 0088 010053E3 		cmp	r3, #1
 148 008c 3300000A 		beq	.L21
 149 0090 2800003A 		bcc	.L20
 150 0094 020053E3 		cmp	r3, #2
 151 0098 3F00000A 		beq	.L22
 152 009c 180053E3 		cmp	r3, #24
 153 00a0 5900001A 		bne	.L18
 154 00a4 4C0000EA 		b	.L23
 155              	.L20:
 156              		.loc 1 87 0
 157 00a8 940052E3 		cmp	r2, #148
 158 00ac 5900001A 		bne	.L18
 159              		.loc 1 89 0
 160 00b0 643094E5 		ldr	r3, [r4, #100]
 161 00b4 AA0053E3 		cmp	r3, #170
 162 00b8 5900001A 		bne	.L18
 163              		.loc 1 91 0
 164 00bc 0410A0E1 		mov	r1, r4
 165 00c0 C8009FE5 		ldr	r0, .L37+20
 166 00c4 FEFFFFEB 		bl	printf
 167              		.loc 1 93 0
 168 00c8 C4009FE5 		ldr	r0, .L37+24
 169 00cc 681084E2 		add	r1, r4, #104
 170 00d0 560000EA 		b	.L33
 171              	.L21:
 172              		.loc 1 96 0
 173 00d4 C80052E3 		cmp	r2, #200
 174 00d8 5900001A 		bne	.L18
 175              		.loc 1 98 0
 176 00dc 843094E5 		ldr	r3, [r4, #132]
 177 00e0 AA0053E3 		cmp	r3, #170
 178 00e4 5900001A 		bne	.L18
 179              		.loc 1 100 0
 180 00e8 0410A0E1 		mov	r1, r4
 181 00ec A4009FE5 		ldr	r0, .L37+28
 182 00f0 FEFFFFEB 		bl	printf
 183              		.loc 1 102 0
 184 00f4 A0009FE5 		ldr	r0, .L37+32
 185 00f8 0520A0E1 		mov	r2, r5
 186 00fc 881084E2 		add	r1, r4, #136
 187 0100 4A0000EA 		b	.L36
 188              	.L22:
 189              		.loc 1 105 0
 190 0104 B40052E3 		cmp	r2, #180
 191 0108 5900001A 		bne	.L18
 192              		.loc 1 107 0
 193 010c 783094E5 		ldr	r3, [r4, #120]
 194 0110 AA0053E3 		cmp	r3, #170
 195 0114 5900001A 		bne	.L18
 196              		.loc 1 109 0
 197 0118 0410A0E1 		mov	r1, r4
 198 011c 7C009FE5 		ldr	r0, .L37+36
 199 0120 FEFFFFEB 		bl	printf
 200              		.loc 1 111 0
 201 0124 78009FE5 		ldr	r0, .L37+40
 202 0128 0520A0E1 		mov	r2, r5
 203 012c 7C1084E2 		add	r1, r4, #124
 204              	.L36:
 205 0130 1030A0E3 		mov	r3, #16
 206 0134 580000EA 		b	.L34
 207              	.L23:
 208              		.loc 1 114 0
 209 0138 880052E3 		cmp	r2, #136
 210 013c 5900001A 		bne	.L18
 211              		.loc 1 116 0
 212 0140 5C3094E5 		ldr	r3, [r4, #92]
 213 0144 AA0053E3 		cmp	r3, #170
 214 0148 5900001A 		bne	.L18
 215              		.loc 1 118 0
 216 014c 0410A0E1 		mov	r1, r4
 217 0150 50009FE5 		ldr	r0, .L37+44
 218 0154 FEFFFFEB 		bl	printf
 219              		.loc 1 120 0
 220 0158 4C009FE5 		ldr	r0, .L37+48
 221 015c 601084E2 		add	r1, r4, #96
 222              	.L33:
 223 0160 0520A0E3 		mov	r2, #5
 224 0164 0F30A0E3 		mov	r3, #15
 225              	.L34:
 226 0168 FEFFFFEB 		bl	apply_levels
 227              	.L18:
 228              		.loc 1 60 0
 229 016c 064084E0 		add	r4, r4, r6
 230              	.L7:
 231 0170 070054E1 		cmp	r4, r7
 232 0174 0500003A 		bcc	.L8
 233 0178 F080BDE8 		ldmfd	sp!, {r4, r5, r6, r7, pc}
 234              	.L38:
 235              		.align	2
 236              	.L37:
 237 017c 00000000 		.word	.LC0
 238 0180 FFFF0000 		.word	65535
 239 0184 2C000000 		.word	.LC1
 240 0188 64000000 		.word	.LC2
 241 018c A0000000 		.word	.LC3
 242 0190 E8000000 		.word	.LC4
 243 0194 00000000 		.word	rf_tx_levels_900
 244 0198 24010000 		.word	.LC5
 245 019c 00000000 		.word	rf_tx_levels_1800
 246 01a0 60010000 		.word	.LC6
 247 01a4 00000000 		.word	rf_tx_levels_1900
 248 01a8 9C010000 		.word	.LC7
 249 01ac 00000000 		.word	rf_tx_levels_850
 250              	.LFE3:
 300              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 readcal_common.c
     /tmp/ccpEgEms.s:13     .text.apply_levels:0000000000000000 apply_levels
     /tmp/ccpEgEms.s:21     .text.apply_levels:0000000000000000 $a
     /tmp/ccpEgEms.s:80     .text.read_compal_factory_records:0000000000000000 read_compal_factory_records
     /tmp/ccpEgEms.s:86     .text.read_compal_factory_records:0000000000000000 $a
     /tmp/ccpEgEms.s:237    .text.read_compal_factory_records:000000000000017c $d

UNDEFINED SYMBOLS
printf
rf_tx_levels_900
rf_tx_levels_1800
rf_tx_levels_1900
rf_tx_levels_850
