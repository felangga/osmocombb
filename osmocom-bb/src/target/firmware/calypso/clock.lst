   1              		.file	"clock.c"
   9              	.Ltext0:
  10              		.section	.rodata.str1.4,"aMS",%progbits,1
  11              		.align	2
  12              	.LC0:
  13 0000 25733D30 		.ascii	"%s=0x%04x\012\000"
  13      78253034 
  13      780A00
  14              		.section	.text.dump_reg16,"ax",%progbits
  15              		.align	2
  17              	dump_reg16:
  18              	.LFB2:
  19              		.file 1 "calypso/clock.c"
   1:calypso/clock.c **** /* Driver for Calypso clock management */
   2:calypso/clock.c **** 
   3:calypso/clock.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:calypso/clock.c ****  *
   5:calypso/clock.c ****  * All Rights Reserved
   6:calypso/clock.c ****  *
   7:calypso/clock.c ****  * This program is free software; you can redistribute it and/or modify
   8:calypso/clock.c ****  * it under the terms of the GNU General Public License as published by
   9:calypso/clock.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:calypso/clock.c ****  * (at your option) any later version.
  11:calypso/clock.c ****  *
  12:calypso/clock.c ****  * This program is distributed in the hope that it will be useful,
  13:calypso/clock.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:calypso/clock.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:calypso/clock.c ****  * GNU General Public License for more details.
  16:calypso/clock.c ****  *
  17:calypso/clock.c ****  * You should have received a copy of the GNU General Public License along
  18:calypso/clock.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:calypso/clock.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:calypso/clock.c ****  *
  21:calypso/clock.c ****  */
  22:calypso/clock.c **** 
  23:calypso/clock.c **** #include <stdint.h>
  24:calypso/clock.c **** #include <stdio.h>
  25:calypso/clock.c **** 
  26:calypso/clock.c **** //#define DEBUG
  27:calypso/clock.c **** #include <debug.h>
  28:calypso/clock.c **** 
  29:calypso/clock.c **** #include <memory.h>
  30:calypso/clock.c **** #include <calypso/clock.h>
  31:calypso/clock.c **** 
  32:calypso/clock.c **** #define REG_DPLL		0xffff9800
  33:calypso/clock.c **** #define DPLL_LOCK		(1 << 0)
  34:calypso/clock.c **** #define DPLL_BREAKLN		(1 << 1)
  35:calypso/clock.c **** #define DPLL_BYPASS_DIV_SHIFT	2		/* 2 bits */
  36:calypso/clock.c **** #define DPLL_PLL_ENABLE		(1 << 4)
  37:calypso/clock.c **** #define DPLL_PLL_DIV_SHIFT	5		/* 2 bits */
  38:calypso/clock.c **** #define DPLL_PLL_MULT_SHIFT	7		/* 5 bits */
  39:calypso/clock.c **** #define DPLL_TEST		(1 << 12)
  40:calypso/clock.c **** #define DPLL_IOB		(1 << 13)	/* Initialize on break */
  41:calypso/clock.c **** #define DPLL_IAI		(1 << 14)	/* Initialize after Idle */
  42:calypso/clock.c **** 
  43:calypso/clock.c **** #define BASE_ADDR_CLKM	0xfffffd00
  44:calypso/clock.c **** #define CLKM_REG(m)	(BASE_ADDR_CLKM+(m))
  45:calypso/clock.c **** 
  46:calypso/clock.c **** enum clkm_reg {
  47:calypso/clock.c **** 	CNTL_ARM_CLK	= 0,
  48:calypso/clock.c **** 	CNTL_CLK	= 2,
  49:calypso/clock.c **** 	CNTL_RST	= 4,
  50:calypso/clock.c **** 	CNTL_ARM_DIV	= 8,
  51:calypso/clock.c **** };
  52:calypso/clock.c **** 
  53:calypso/clock.c **** /* CNTL_ARM_CLK */
  54:calypso/clock.c **** #define ARM_CLK_BIG_SLEEP	(1 << 0)	/* MCU Master Clock enabled? */
  55:calypso/clock.c **** #define ARM_CLK_CLKIN_SEL0	(1 << 1)	/* MCU source clock (0 = DPLL output, 1 = VTCXO or CLKIN */
  56:calypso/clock.c **** #define ARM_CLK_CLKIN_SEL	(1 << 2)	/* 0 = VTCXO or 1 = CLKIN */
  57:calypso/clock.c **** #define ARM_CLK_MCLK_DIV5	(1 << 3)	/* enable 1.5 or 2.5 division factor */
  58:calypso/clock.c **** #define ARM_CLK_MCLK_DIV_SHIFT	4		/* 3 bits */
  59:calypso/clock.c **** #define ARM_CLK_DEEP_POWER_SHIFT	8
  60:calypso/clock.c **** #define ARM_CLK_DEEP_SLEEP	12
  61:calypso/clock.c **** 
  62:calypso/clock.c **** /* CNTL_CLK */
  63:calypso/clock.c **** #define CLK_IRQ_CLK_DIS		(1 << 0)	/* IRQ clock control (0 always, 1 according ARM_MCLK_EN) */
  64:calypso/clock.c **** #define CLK_BRIDGE_CLK_DIS	(1 << 1)
  65:calypso/clock.c **** #define CLK_TIMER_CLK_DIS	(1 << 2)
  66:calypso/clock.c **** #define CLK_DPLL_DIS		(1 << 3)	/* 0: DPLL is not stopped during SLEEP */
  67:calypso/clock.c **** #define CLK_CLKOUT_EN		(1 << 4)	/* Enable CLKOUT output pins */
  68:calypso/clock.c **** #define CLK_EN_IDLE3_FLG	(1 << 5)	/* DSP idle flag control (1 =
  69:calypso/clock.c **** 						 * SAM/HOM register forced to HOM when DSP IDLE3) */
  70:calypso/clock.c **** #define CLK_VCLKOUT_DIV2	(1 << 6)	/* 1: VCLKOUT-FR is divided by 2 */
  71:calypso/clock.c **** #define CLK_VTCXO_DIV2		(1 << 7)	/* 1: VTCXO is dividied by 2 */
  72:calypso/clock.c **** 
  73:calypso/clock.c **** #define BASE_ADDR_MEMIF		0xfffffb00
  74:calypso/clock.c **** #define MEMIF_REG(x)		(BASE_ADDR_MEMIF+(x))
  75:calypso/clock.c **** 
  76:calypso/clock.c **** enum memif_reg {
  77:calypso/clock.c **** 	API_RHEA_CTL	= 0x0e,
  78:calypso/clock.c **** 	EXTRA_CONF	= 0x10,
  79:calypso/clock.c **** };
  80:calypso/clock.c **** 
  81:calypso/clock.c **** static void dump_reg16(uint32_t addr, char *name)
  82:calypso/clock.c **** {
  20              		.loc 1 82 0
  21              		@ args = 0, pretend = 0, frame = 0
  22              		@ frame_needed = 0, uses_anonymous_args = 0
  23              		@ link register save eliminated.
  24              	.LVL0:
  83:calypso/clock.c **** 	printf("%s=0x%04x\n", name, readw(addr));
  25              		.loc 1 83 0
  26 0000 B020D0E1 		ldrh	r2, [r0, #0]
  27 0004 00009FE5 		ldr	r0, .L3
  28              	.LVL1:
  29              		.loc 1 82 0
  30              		@ lr needed for prologue
  84:calypso/clock.c **** }
  31              		.loc 1 84 0
  32              		.loc 1 83 0
  33 0008 FEFFFFEA 		b	printf
  34              	.LVL2:
  35              	.L4:
  36              		.align	2
  37              	.L3:
  38 000c 00000000 		.word	.LC0
  39              	.LFE2:
  41              		.section	.rodata.str1.4
  42 000b 00       		.align	2
  43              	.LC1:
  44 000c 5245475F 		.ascii	"REG_DPLL\000"
  44      44504C4C 
  44      00
  45 0015 000000   		.align	2
  46              	.LC2:
  47 0018 434E544C 		.ascii	"CNTL_ARM_CLK\000"
  47      5F41524D 
  47      5F434C4B 
  47      00
  48 0025 000000   		.align	2
  49              	.LC3:
  50 0028 434E544C 		.ascii	"CNTL_CLK\000"
  50      5F434C4B 
  50      00
  51 0031 000000   		.align	2
  52              	.LC4:
  53 0034 434E544C 		.ascii	"CNTL_RST\000"
  53      5F525354 
  53      00
  54 003d 000000   		.align	2
  55              	.LC5:
  56 0040 434E544C 		.ascii	"CNTL_ARM_DIV\000"
  56      5F41524D 
  56      5F444956 
  56      00
  57 004d 000000   		.section	.text.calypso_clk_dump,"ax",%progbits
  58              		.align	2
  59              		.global	calypso_clk_dump
  61              	calypso_clk_dump:
  62              	.LFB3:
  85:calypso/clock.c **** 
  86:calypso/clock.c **** void calypso_clk_dump(void)
  87:calypso/clock.c **** {
  63              		.loc 1 87 0
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL3:
  67 0000 04E02DE5 		str	lr, [sp, #-4]!
  68              	.LCFI0:
  88:calypso/clock.c **** 	dump_reg16(REG_DPLL, "REG_DPLL");
  69              		.loc 1 88 0
  70 0004 38009FE5 		ldr	r0, .L7
  71 0008 38109FE5 		ldr	r1, .L7+4
  72 000c FEFFFFEB 		bl	dump_reg16
  89:calypso/clock.c **** 	dump_reg16(CLKM_REG(CNTL_ARM_CLK), "CNTL_ARM_CLK");
  73              		.loc 1 89 0
  74 0010 34009FE5 		ldr	r0, .L7+8
  75 0014 34109FE5 		ldr	r1, .L7+12
  76 0018 FEFFFFEB 		bl	dump_reg16
  90:calypso/clock.c **** 	dump_reg16(CLKM_REG(CNTL_CLK), "CNTL_CLK");
  77              		.loc 1 90 0
  78 001c 30009FE5 		ldr	r0, .L7+16
  79 0020 30109FE5 		ldr	r1, .L7+20
  80 0024 FEFFFFEB 		bl	dump_reg16
  91:calypso/clock.c **** 	dump_reg16(CLKM_REG(CNTL_RST), "CNTL_RST");
  81              		.loc 1 91 0
  82 0028 2C009FE5 		ldr	r0, .L7+24
  83 002c 2C109FE5 		ldr	r1, .L7+28
  84 0030 FEFFFFEB 		bl	dump_reg16
  92:calypso/clock.c **** 	dump_reg16(CLKM_REG(CNTL_ARM_DIV), "CNTL_ARM_DIV");
  85              		.loc 1 92 0
  86 0034 28009FE5 		ldr	r0, .L7+32
  87 0038 28109FE5 		ldr	r1, .L7+36
  93:calypso/clock.c **** }
  88              		.loc 1 93 0
  89 003c 04E09DE4 		ldr	lr, [sp], #4
  90              		.loc 1 92 0
  91 0040 FEFFFFEA 		b	dump_reg16
  92              	.L8:
  93              		.align	2
  94              	.L7:
  95 0044 0098FFFF 		.word	-26624
  96 0048 0C000000 		.word	.LC1
  97 004c 00FDFFFF 		.word	-768
  98 0050 18000000 		.word	.LC2
  99 0054 02FDFFFF 		.word	-766
 100 0058 28000000 		.word	.LC3
 101 005c 04FDFFFF 		.word	-764
 102 0060 34000000 		.word	.LC4
 103 0064 08FDFFFF 		.word	-760
 104 0068 40000000 		.word	.LC5
 105              	.LFE3:
 107              		.section	.text.calypso_pll_set,"ax",%progbits
 108              		.align	2
 109              		.global	calypso_pll_set
 111              	calypso_pll_set:
 112              	.LFB4:
  94:calypso/clock.c **** 
  95:calypso/clock.c **** void calypso_pll_set(uint16_t inp)
  96:calypso/clock.c **** {
 113              		.loc 1 96 0
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117              	.LVL4:
  97:calypso/clock.c **** 	uint8_t mult = inp >> 8;
  98:calypso/clock.c **** 	uint8_t div = inp & 0xff;
  99:calypso/clock.c **** 	uint16_t reg = readw(REG_DPLL);
 118              		.loc 1 99 0
 119 0000 2C109FE5 		ldr	r1, .L11
 120 0004 B030D1E1 		ldrh	r3, [r1, #0]
 100:calypso/clock.c **** 
 101:calypso/clock.c **** 	reg &= ~0x0fe0;
 102:calypso/clock.c **** 	reg |= (div & 0x3) << DPLL_PLL_DIV_SHIFT;
 103:calypso/clock.c **** 	reg |= (mult & 0x1f) << DPLL_PLL_MULT_SHIFT;
 121              		.loc 1 103 0
 122 0008 A020A0E1 		mov	r2, r0, lsr #1
 123              	.LVL5:
 124 000c FE3EC3E3 		bic	r3, r3, #4064
 125              	.LVL6:
 126 0010 030000E2 		and	r0, r0, #3
 127              	.LVL7:
 128 0014 803283E1 		orr	r3, r3, r0, asl #5
 129 0018 3E2D02E2 		and	r2, r2, #3968
 130 001c 023083E1 		orr	r3, r3, r2
 131 0020 0338A0E1 		mov	r3, r3, asl #16
 104:calypso/clock.c **** 	reg |= DPLL_PLL_ENABLE;
 132              		.loc 1 104 0
 133 0024 013683E3 		orr	r3, r3, #1048576
 134 0028 2338A0E1 		mov	r3, r3, lsr #16
 135              	.LVL8:
 136              		.loc 1 96 0
 137              		@ lr needed for prologue
 105:calypso/clock.c **** 
 106:calypso/clock.c **** 	writew(reg, REG_DPLL);
 138              		.loc 1 106 0
 139 002c B030C1E1 		strh	r3, [r1, #0]	@ movhi
 107:calypso/clock.c **** }
 140              		.loc 1 107 0
 141 0030 1EFF2FE1 		bx	lr
 142              	.L12:
 143              		.align	2
 144              	.L11:
 145 0034 0098FFFF 		.word	-26624
 146              	.LFE4:
 148              		.section	.text.calypso_reset_set,"ax",%progbits
 149              		.align	2
 150              		.global	calypso_reset_set
 152              	calypso_reset_set:
 153              	.LFB5:
 108:calypso/clock.c **** 
 109:calypso/clock.c **** void calypso_reset_set(enum calypso_rst calypso_rst, int active)
 110:calypso/clock.c **** {
 154              		.loc 1 110 0
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158              	.LVL9:
 111:calypso/clock.c **** 	uint8_t reg = readb(CLKM_REG(CNTL_RST));
 159              		.loc 1 111 0
 160 0000 20309FE5 		ldr	r3, .L18
 161 0004 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 162 0008 FF2003E2 		and	r2, r3, #255
 163              	.LVL10:
 112:calypso/clock.c **** 
 113:calypso/clock.c **** 	if (active)
 114:calypso/clock.c **** 		reg |= calypso_rst;
 164              		.loc 1 114 0
 165 000c 003082E1 		orr	r3, r2, r0
 166              		.loc 1 113 0
 167 0010 000051E3 		cmp	r1, #0
 168              		.loc 1 114 0
 169 0014 FF1003E2 		and	r1, r3, #255
 170              	.LVL11:
 115:calypso/clock.c **** 	else
 116:calypso/clock.c **** 		reg &= ~calypso_rst;
 117:calypso/clock.c **** 
 118:calypso/clock.c **** 	writeb(reg, CLKM_REG(CNTL_RST));
 171              		.loc 1 118 0
 172 0018 08309FE5 		ldr	r3, .L18
 173              		.loc 1 116 0
 174 001c 0010C201 		biceq	r1, r2, r0
 175              		.loc 1 110 0
 176              		@ lr needed for prologue
 177              		.loc 1 118 0
 178 0020 0010C3E5 		strb	r1, [r3, #0]
 119:calypso/clock.c **** }
 179              		.loc 1 119 0
 180 0024 1EFF2FE1 		bx	lr
 181              	.L19:
 182              		.align	2
 183              	.L18:
 184 0028 04FDFFFF 		.word	-764
 185              	.LFE5:
 187              		.section	.text.calypso_reset_get,"ax",%progbits
 188              		.align	2
 189              		.global	calypso_reset_get
 191              	calypso_reset_get:
 192              	.LFB6:
 120:calypso/clock.c **** 
 121:calypso/clock.c **** int calypso_reset_get(enum calypso_rst calypso_rst)
 122:calypso/clock.c **** {
 193              		.loc 1 122 0
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 197              	.LVL12:
 123:calypso/clock.c **** 	uint8_t reg = readb(CLKM_REG(CNTL_RST));
 198              		.loc 1 123 0
 199 0000 10309FE5 		ldr	r3, .L22
 200 0004 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 201 0008 000013E1 		tst	r3, r0
 124:calypso/clock.c **** 
 125:calypso/clock.c **** 	if (reg & calypso_rst)
 126:calypso/clock.c **** 		return 1;
 127:calypso/clock.c **** 	else
 128:calypso/clock.c **** 		return 0;
 129:calypso/clock.c **** }
 202              		.loc 1 129 0
 203 000c 0000A003 		moveq	r0, #0
 204 0010 0100A013 		movne	r0, #1
 205              	.LVL13:
 206              		.loc 1 122 0
 207              		@ lr needed for prologue
 208              		.loc 1 129 0
 209 0014 1EFF2FE1 		bx	lr
 210              	.L23:
 211              		.align	2
 212              	.L22:
 213 0018 04FDFFFF 		.word	-764
 214              	.LFE6:
 216              		.section	.text.calypso_clock_set,"ax",%progbits
 217              		.align	2
 218              		.global	calypso_clock_set
 220              	calypso_clock_set:
 221              	.LFB7:
 130:calypso/clock.c **** 
 131:calypso/clock.c **** void calypso_clock_set(uint8_t vtcxo_div2, uint16_t inp, enum mclk_div mclk_div)
 132:calypso/clock.c **** {
 222              		.loc 1 132 0
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              	.LVL14:
 226 0000 10402DE9 		stmfd	sp!, {r4, lr}
 227              	.LCFI1:
 133:calypso/clock.c **** 	uint16_t cntl_clock = readw(CLKM_REG(CNTL_CLK));
 228              		.loc 1 133 0
 229 0004 78309FE5 		ldr	r3, .L32
 230 0008 B0C0D3E1 		ldrh	ip, [r3, #0]
 134:calypso/clock.c **** 	uint16_t cntl_arm_clk = readw(CLKM_REG(CNTL_ARM_CLK));
 231              		.loc 1 134 0
 232 000c 74309FE5 		ldr	r3, .L32+4
 135:calypso/clock.c **** 
 136:calypso/clock.c **** 	/* First set the vtcxo_div2 */
 137:calypso/clock.c **** 	cntl_clock &= ~CLK_VCLKOUT_DIV2;
 233              		.loc 1 137 0
 234 0010 74E09FE5 		ldr	lr, .L32+8
 235              	.LVL15:
 236              		.loc 1 134 0
 237 0014 B030D3E1 		ldrh	r3, [r3, #0]
 138:calypso/clock.c **** 	if (vtcxo_div2)
 139:calypso/clock.c **** 		cntl_clock |= CLK_VTCXO_DIV2;
 140:calypso/clock.c **** 	else
 141:calypso/clock.c **** 		cntl_clock &= ~CLK_VTCXO_DIV2;
 238              		.loc 1 141 0
 239 0018 70409FE5 		ldr	r4, .L32+12
 240              	.LVL16:
 241              		.loc 1 138 0
 242 001c FF0010E3 		tst	r0, #255
 243              	.LVL17:
 244              		.loc 1 137 0
 245 0020 0EE00CE0 		and	lr, ip, lr
 246              		.loc 1 141 0
 247 0024 04400CE0 		and	r4, ip, r4
 248              		.loc 1 134 0
 249 0028 0300A0E1 		mov	r0, r3
 250              	.LVL18:
 251              		.loc 1 139 0
 252 002c 80408E13 		orrne	r4, lr, #128
 142:calypso/clock.c **** 	writew(cntl_clock, CLKM_REG(CNTL_CLK));
 253              		.loc 1 142 0
 254 0030 4C309FE5 		ldr	r3, .L32
 143:calypso/clock.c **** 
 144:calypso/clock.c **** 	/* Then configure the MCLK divider */
 145:calypso/clock.c **** 	cntl_arm_clk &= ~ARM_CLK_CLKIN_SEL0;
 255              		.loc 1 145 0
 256 0034 58E09FE5 		ldr	lr, .L32+16
 257              	.LVL19:
 146:calypso/clock.c **** 	if (mclk_div & 0x80) {
 147:calypso/clock.c **** 		mclk_div &= ~0x80;
 148:calypso/clock.c **** 		cntl_arm_clk |= ARM_CLK_MCLK_DIV5;
 149:calypso/clock.c **** 	} else
 150:calypso/clock.c **** 		cntl_arm_clk &= ~ARM_CLK_MCLK_DIV5;
 258              		.loc 1 150 0
 259 0038 58C09FE5 		ldr	ip, .L32+20
 260              	.LVL20:
 261              		.loc 1 146 0
 262 003c 800012E3 		tst	r2, #128
 263              		.loc 1 142 0
 264 0040 B040C3E1 		strh	r4, [r3, #0]	@ movhi
 265              		.loc 1 145 0
 266 0044 0EE000E0 		and	lr, r0, lr
 151:calypso/clock.c **** 	cntl_arm_clk &= ~(0x7 << ARM_CLK_MCLK_DIV_SHIFT);
 267              		.loc 1 151 0
 268 0048 4C309FE5 		ldr	r3, .L32+24
 269              	.LVL21:
 270              		.loc 1 150 0
 271 004c 0CC000E0 		and	ip, r0, ip
 272              		.loc 1 148 0
 273 0050 08C08E13 		orrne	ip, lr, #8
 274              		.loc 1 147 0
 275 0054 8020C213 		bicne	r2, r2, #128
 276              		.loc 1 151 0
 277 0058 03300CE0 		and	r3, ip, r3
 152:calypso/clock.c **** 	cntl_arm_clk |= (mclk_div << ARM_CLK_MCLK_DIV_SHIFT);
 278              		.loc 1 152 0
 279 005c 023283E1 		orr	r3, r3, r2, asl #4
 280              	.LVL22:
 281              		.loc 1 132 0
 282 0060 0118A0E1 		mov	r1, r1, asl #16
 283              	.LVL23:
 284 0064 2118A0E1 		mov	r1, r1, lsr #16
 285              	.LVL24:
 153:calypso/clock.c **** 	writew(cntl_arm_clk, CLKM_REG(CNTL_ARM_CLK));
 286              		.loc 1 153 0
 287 0068 18209FE5 		ldr	r2, .L32+4
 288              	.LVL25:
 289              		.loc 1 152 0
 290 006c 0338A0E1 		mov	r3, r3, asl #16
 291 0070 2338A0E1 		mov	r3, r3, lsr #16
 292              	.LVL26:
 154:calypso/clock.c **** 
 155:calypso/clock.c **** 	/* Then finally set the PLL */
 156:calypso/clock.c **** 	calypso_pll_set(inp);
 293              		.loc 1 156 0
 294 0074 0100A0E1 		mov	r0, r1
 295              	.LVL27:
 296              		.loc 1 153 0
 297 0078 B030C2E1 		strh	r3, [r2, #0]	@ movhi
 298              	.LVL28:
 157:calypso/clock.c **** }
 299              		.loc 1 157 0
 300 007c 1040BDE8 		ldmfd	sp!, {r4, lr}
 301              		.loc 1 156 0
 302 0080 FEFFFFEA 		b	calypso_pll_set
 303              	.LVL29:
 304              	.L33:
 305              		.align	2
 306              	.L32:
 307 0084 02FDFFFF 		.word	-766
 308 0088 00FDFFFF 		.word	-768
 309 008c BFFF0000 		.word	65471
 310 0090 3FFF0000 		.word	65343
 311 0094 FDFF0000 		.word	65533
 312 0098 F5FF0000 		.word	65525
 313 009c 8FFF0000 		.word	65423
 314              	.LFE7:
 316              		.section	.text.calypso_mem_cfg,"ax",%progbits
 317              		.align	2
 318              		.global	calypso_mem_cfg
 320              	calypso_mem_cfg:
 321              	.LFB8:
 158:calypso/clock.c **** 
 159:calypso/clock.c **** void calypso_mem_cfg(enum calypso_bank bank, uint8_t ws,
 160:calypso/clock.c **** 		     enum calypso_mem_width width, int we)
 161:calypso/clock.c **** {
 322              		.loc 1 161 0
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 326              	.LVL30:
 162:calypso/clock.c **** 	writew((ws & 0x1f) | ((width & 3) << 5) | ((we & 1) << 7),
 327              		.loc 1 162 0
 328 0000 1F1001E2 		and	r1, r1, #31
 329              	.LVL31:
 330 0004 032002E2 		and	r2, r2, #3
 331              	.LVL32:
 332 0008 821281E1 		orr	r1, r1, r2, asl #5
 333 000c 013003E2 		and	r3, r3, #1
 334              	.LVL33:
 335 0010 831381E1 		orr	r1, r1, r3, asl #7
 336 0014 050C40E2 		sub	r0, r0, #1280
 337              	.LVL34:
 338              		.loc 1 161 0
 339              		@ lr needed for prologue
 340              		.loc 1 162 0
 341 0018 B010C0E1 		strh	r1, [r0, #0]	@ movhi
 163:calypso/clock.c **** 	       BASE_ADDR_MEMIF + bank);
 164:calypso/clock.c **** }
 342              		.loc 1 164 0
 343 001c 1EFF2FE1 		bx	lr
 344              	.LFE8:
 346              		.section	.text.calypso_bootrom,"ax",%progbits
 347              		.align	2
 348              		.global	calypso_bootrom
 350              	calypso_bootrom:
 351              	.LFB9:
 165:calypso/clock.c **** 
 166:calypso/clock.c **** void calypso_bootrom(int enable)
 167:calypso/clock.c **** {
 352              		.loc 1 167 0
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              		@ link register save eliminated.
 356              	.LVL35:
 168:calypso/clock.c **** 	uint16_t conf = readw(MEMIF_REG(EXTRA_CONF));
 357              		.loc 1 168 0
 358 0000 1C209FE5 		ldr	r2, .L40
 359 0004 B030D2E1 		ldrh	r3, [r2, #0]
 169:calypso/clock.c **** 
 170:calypso/clock.c **** 	conf |= (3 << 8);
 171:calypso/clock.c **** 
 172:calypso/clock.c **** 	if (enable)
 360              		.loc 1 172 0
 361 0008 000050E3 		cmp	r0, #0
 362              		.loc 1 170 0
 363 000c 033C83E3 		orr	r3, r3, #768
 364              	.LVL36:
 173:calypso/clock.c **** 		conf &= ~(1 << 9);
 365              		.loc 1 173 0
 366 0010 023CC313 		bicne	r3, r3, #512
 367 0014 0338A011 		movne	r3, r3, asl #16
 368 0018 2338A011 		movne	r3, r3, lsr #16
 369              		.loc 1 167 0
 370              		@ lr needed for prologue
 174:calypso/clock.c **** 
 175:calypso/clock.c **** 	writew(conf, MEMIF_REG(EXTRA_CONF));
 371              		.loc 1 175 0
 372 001c B030C2E1 		strh	r3, [r2, #0]	@ movhi
 176:calypso/clock.c **** }
 373              		.loc 1 176 0
 374 0020 1EFF2FE1 		bx	lr
 375              	.L41:
 376              		.align	2
 377              	.L40:
 378 0024 10FBFFFF 		.word	-1264
 379              	.LFE9:
 381              		.section	.text.calypso_debugunit,"ax",%progbits
 382              		.align	2
 383              		.global	calypso_debugunit
 385              	calypso_debugunit:
 386              	.LFB10:
 177:calypso/clock.c **** 
 178:calypso/clock.c **** void calypso_debugunit(int enable)
 179:calypso/clock.c **** {
 387              		.loc 1 179 0
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              		@ link register save eliminated.
 391              	.LVL37:
 180:calypso/clock.c **** 	uint16_t conf = readw(MEMIF_REG(EXTRA_CONF));
 392              		.loc 1 180 0
 393 0000 1C309FE5 		ldr	r3, .L47
 181:calypso/clock.c **** 
 182:calypso/clock.c **** 	if (enable)
 183:calypso/clock.c **** 		conf &= ~(1 << 11);
 394              		.loc 1 183 0
 395 0004 1C209FE5 		ldr	r2, .L47+4
 396              	.LVL38:
 397              		.loc 1 180 0
 398 0008 B030D3E1 		ldrh	r3, [r3, #0]
 399              		.loc 1 182 0
 400 000c 000050E3 		cmp	r0, #0
 401              	.LVL39:
 402              		.loc 1 183 0
 403 0010 022003E0 		and	r2, r3, r2
 184:calypso/clock.c **** 	else
 185:calypso/clock.c **** 		conf |= (1 << 11);
 404              		.loc 1 185 0
 405 0014 022B8303 		orreq	r2, r3, #2048
 186:calypso/clock.c **** 
 187:calypso/clock.c **** 	writew(conf, MEMIF_REG(EXTRA_CONF));
 406              		.loc 1 187 0
 407 0018 04309FE5 		ldr	r3, .L47
 408              	.LVL40:
 409              		.loc 1 179 0
 410              		@ lr needed for prologue
 411              		.loc 1 187 0
 412 001c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 188:calypso/clock.c **** }
 413              		.loc 1 188 0
 414 0020 1EFF2FE1 		bx	lr
 415              	.L48:
 416              		.align	2
 417              	.L47:
 418 0024 10FBFFFF 		.word	-1264
 419 0028 FFF70000 		.word	63487
 420              	.LFE10:
 422              		.section	.text.calypso_rhea_cfg,"ax",%progbits
 423              		.align	2
 424              		.global	calypso_rhea_cfg
 426              	calypso_rhea_cfg:
 427              	.LFB11:
 189:calypso/clock.c **** 
 190:calypso/clock.c **** #define REG_RHEA_CNTL	0xfffff900
 191:calypso/clock.c **** #define REG_API_CNTL	0xfffff902
 192:calypso/clock.c **** #define REG_ARM_RHEA	0xfffff904
 193:calypso/clock.c **** 
 194:calypso/clock.c **** void calypso_rhea_cfg(uint8_t fac0, uint8_t fac1, uint8_t timeout,
 195:calypso/clock.c **** 		      uint8_t ws_h, uint8_t ws_l, uint8_t w_en0, uint8_t w_en1)
 196:calypso/clock.c **** {
 428              		.loc 1 196 0
 429              		@ args = 12, pretend = 0, frame = 0
 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431              		@ link register save eliminated.
 432              	.LVL41:
 433 0000 0112A0E1 		mov	r1, r1, asl #4
 197:calypso/clock.c **** 	writew(fac0 | (fac1 << 4) | (timeout << 8), REG_RHEA_CNTL);
 434              		.loc 1 197 0
 435 0004 FF1E01E2 		and	r1, r1, #4080
 436              	.LVL42:
 437              		.loc 1 196 0
 438 0008 FF0000E2 		and	r0, r0, #255
 439              		.loc 1 197 0
 440 000c 010080E1 		orr	r0, r0, r1
 441              	.LVL43:
 442 0010 020480E1 		orr	r0, r0, r2, asl #8
 443              		.loc 1 196 0
 444 0014 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 445 0018 0820DDE5 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 446              	.LVL44:
 447 001c 00C0DDE5 		ldrb	ip, [sp, #0]	@ zero_extendqisi2
 198:calypso/clock.c **** 	writew(ws_h | (ws_l << 5), REG_API_CNTL);
 199:calypso/clock.c **** 	writew(w_en0 | (w_en1 << 1), REG_ARM_RHEA);
 448              		.loc 1 199 0
 449 0020 821081E1 		orr	r1, r1, r2, asl #1
 450              		.loc 1 197 0
 451 0024 0008A0E1 		mov	r0, r0, asl #16
 452 0028 20209FE5 		ldr	r2, .L51
 453              		.loc 1 196 0
 454 002c FF3003E2 		and	r3, r3, #255
 455              		.loc 1 197 0
 456 0030 2008A0E1 		mov	r0, r0, lsr #16
 457 0034 B000C2E1 		strh	r0, [r2, #0]	@ movhi
 458              		.loc 1 198 0
 459 0038 8C3283E1 		orr	r3, r3, ip, asl #5
 460              	.LVL45:
 461 003c 022082E2 		add	r2, r2, #2
 462 0040 B030C2E1 		strh	r3, [r2, #0]	@ movhi
 463              		.loc 1 199 0
 464 0044 08309FE5 		ldr	r3, .L51+4
 465              		.loc 1 196 0
 466              		@ lr needed for prologue
 467              		.loc 1 199 0
 468 0048 B010C3E1 		strh	r1, [r3, #0]	@ movhi
 200:calypso/clock.c **** }
 469              		.loc 1 200 0
 470 004c 1EFF2FE1 		bx	lr
 471              	.L52:
 472              		.align	2
 473              	.L51:
 474 0050 00F9FFFF 		.word	-1792
 475 0054 04F9FFFF 		.word	-1788
 476              	.LFE11:
 590              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 clock.c
     /tmp/ccLPX5o9.s:17     .text.dump_reg16:0000000000000000 dump_reg16
     /tmp/ccLPX5o9.s:26     .text.dump_reg16:0000000000000000 $a
     /tmp/ccLPX5o9.s:38     .text.dump_reg16:000000000000000c $d
     /tmp/ccLPX5o9.s:61     .text.calypso_clk_dump:0000000000000000 calypso_clk_dump
     /tmp/ccLPX5o9.s:67     .text.calypso_clk_dump:0000000000000000 $a
     /tmp/ccLPX5o9.s:95     .text.calypso_clk_dump:0000000000000044 $d
     /tmp/ccLPX5o9.s:111    .text.calypso_pll_set:0000000000000000 calypso_pll_set
     /tmp/ccLPX5o9.s:119    .text.calypso_pll_set:0000000000000000 $a
     /tmp/ccLPX5o9.s:145    .text.calypso_pll_set:0000000000000034 $d
     /tmp/ccLPX5o9.s:152    .text.calypso_reset_set:0000000000000000 calypso_reset_set
     /tmp/ccLPX5o9.s:160    .text.calypso_reset_set:0000000000000000 $a
     /tmp/ccLPX5o9.s:184    .text.calypso_reset_set:0000000000000028 $d
     /tmp/ccLPX5o9.s:191    .text.calypso_reset_get:0000000000000000 calypso_reset_get
     /tmp/ccLPX5o9.s:199    .text.calypso_reset_get:0000000000000000 $a
     /tmp/ccLPX5o9.s:213    .text.calypso_reset_get:0000000000000018 $d
     /tmp/ccLPX5o9.s:220    .text.calypso_clock_set:0000000000000000 calypso_clock_set
     /tmp/ccLPX5o9.s:226    .text.calypso_clock_set:0000000000000000 $a
     /tmp/ccLPX5o9.s:307    .text.calypso_clock_set:0000000000000084 $d
     /tmp/ccLPX5o9.s:320    .text.calypso_mem_cfg:0000000000000000 calypso_mem_cfg
     /tmp/ccLPX5o9.s:328    .text.calypso_mem_cfg:0000000000000000 $a
     /tmp/ccLPX5o9.s:350    .text.calypso_bootrom:0000000000000000 calypso_bootrom
     /tmp/ccLPX5o9.s:358    .text.calypso_bootrom:0000000000000000 $a
     /tmp/ccLPX5o9.s:378    .text.calypso_bootrom:0000000000000024 $d
     /tmp/ccLPX5o9.s:385    .text.calypso_debugunit:0000000000000000 calypso_debugunit
     /tmp/ccLPX5o9.s:393    .text.calypso_debugunit:0000000000000000 $a
     /tmp/ccLPX5o9.s:418    .text.calypso_debugunit:0000000000000024 $d
     /tmp/ccLPX5o9.s:426    .text.calypso_rhea_cfg:0000000000000000 calypso_rhea_cfg
     /tmp/ccLPX5o9.s:433    .text.calypso_rhea_cfg:0000000000000000 $a
     /tmp/ccLPX5o9.s:474    .text.calypso_rhea_cfg:0000000000000050 $d

UNDEFINED SYMBOLS
printf
