   1              		.file	"tsp.c"
   9              	.Ltext0:
  10              		.section	.text.tpu_enq_move,"ax",%progbits
  11              		.align	2
  13              	tpu_enq_move:
  14              	.LFB4:
  15              		.file 1 "include/calypso/tpu.h"
   1:include/calypso/tpu.h **** #ifndef _CALYPSO_TPU_H
   2:include/calypso/tpu.h **** #define _CALYPSO_TPU_H
   3:include/calypso/tpu.h **** 
   4:include/calypso/tpu.h **** #define BITS_PER_TDMA		1250
   5:include/calypso/tpu.h **** #define QBITS_PER_TDMA		(BITS_PER_TDMA * 4)	/* 5000 */
   6:include/calypso/tpu.h **** #define TPU_RANGE		QBITS_PER_TDMA
   7:include/calypso/tpu.h **** #define	SWITCH_TIME		(TPU_RANGE-10)
   8:include/calypso/tpu.h **** 
   9:include/calypso/tpu.h **** /* Assert or de-assert TPU reset */
  10:include/calypso/tpu.h **** void tpu_reset(int active);
  11:include/calypso/tpu.h **** /* Enable or Disable a new scenario loaded into the TPU */
  12:include/calypso/tpu.h **** void tpu_enable(int active);
  13:include/calypso/tpu.h **** /* Enable or Disable the clock of the TPU Module */
  14:include/calypso/tpu.h **** void tpu_clk_enable(int active);
  15:include/calypso/tpu.h **** /* Enable Frame Interrupt generation on next frame.  DSP will reset it */
  16:include/calypso/tpu.h **** void tpu_dsp_frameirq_enable(void);
  17:include/calypso/tpu.h **** /* Is a Frame interrupt still pending for the DSP ? */
  18:include/calypso/tpu.h **** int tpu_dsp_fameirq_pending(void);
  19:include/calypso/tpu.h **** /* Rewind the TPU, i.e. restart enqueueing instructions at the base addr */
  20:include/calypso/tpu.h **** void tpu_rewind(void);
  21:include/calypso/tpu.h **** /* Enqueue a raw TPU instruction */
  22:include/calypso/tpu.h **** void tpu_enqueue(uint16_t instr);
  23:include/calypso/tpu.h **** /* Initialize TPU and TPU driver */
  24:include/calypso/tpu.h **** void tpu_init(void);
  25:include/calypso/tpu.h **** /* (Busy)Wait until TPU is idle */
  26:include/calypso/tpu.h **** void tpu_wait_idle(void);
  27:include/calypso/tpu.h **** /* Enable FRAME interrupt generation */
  28:include/calypso/tpu.h **** void tpu_frame_irq_en(int mcu, int dsp);
  29:include/calypso/tpu.h **** /* Force the generation of a DSP interrupt */
  30:include/calypso/tpu.h **** void tpu_force_dsp_frame_irq(void);
  31:include/calypso/tpu.h **** 
  32:include/calypso/tpu.h **** /* Get the current TPU SYNCHRO register */
  33:include/calypso/tpu.h **** uint16_t tpu_get_synchro(void);
  34:include/calypso/tpu.h **** /* Get the current TPU OFFSET register */
  35:include/calypso/tpu.h **** uint16_t tpu_get_offset(void);
  36:include/calypso/tpu.h **** 
  37:include/calypso/tpu.h **** enum tpu_instr {
  38:include/calypso/tpu.h **** 	TPU_INSTR_AT		= (1 << 13),
  39:include/calypso/tpu.h **** 	TPU_INSTR_OFFSET	= (2 << 13),
  40:include/calypso/tpu.h **** 	TPU_INSTR_SYNCHRO	= (3 << 13),	/* Loading delta synchro value in TPU synchro register */
  41:include/calypso/tpu.h **** 	TPU_INSTR_WAIT		= (5 << 13),	/* Wait a certain period (in GSM qbits) */
  42:include/calypso/tpu.h **** 	TPU_INSTR_SLEEP		= (0 << 13),	/* Stop the sequencer by disabling TPU ENABLE bit in ctrl reg */
  43:include/calypso/tpu.h **** 	/* data processing */
  44:include/calypso/tpu.h **** 	TPU_INSTR_MOVE		= (4 << 13),
  45:include/calypso/tpu.h **** };
  46:include/calypso/tpu.h **** 
  47:include/calypso/tpu.h **** /* Addresses internal to the TPU, only accessible via MOVE */
  48:include/calypso/tpu.h **** enum tpu_reg_int {
  49:include/calypso/tpu.h **** 	TPUI_TSP_CTRL1	= 0x00,
  50:include/calypso/tpu.h **** 	TPUI_TSP_CTRL2	= 0x01,
  51:include/calypso/tpu.h **** 	TPUI_TX_1	= 0x04,
  52:include/calypso/tpu.h **** 	TPUI_TX_2	= 0x03,
  53:include/calypso/tpu.h **** 	TPUI_TX_3	= 0x02,
  54:include/calypso/tpu.h **** 	TPUI_TX_4	= 0x05,
  55:include/calypso/tpu.h **** 	TPUI_TSP_ACT_L	= 0x06,
  56:include/calypso/tpu.h **** 	TPUI_TSP_ACT_U	= 0x07,
  57:include/calypso/tpu.h **** 	TPUI_TSP_SET1	= 0x09,
  58:include/calypso/tpu.h **** 	TPUI_TSP_SET2	= 0x0a,
  59:include/calypso/tpu.h **** 	TPUI_TSP_SET3	= 0x0b,
  60:include/calypso/tpu.h **** 	TPUI_DSP_INT_PG	= 0x10,
  61:include/calypso/tpu.h **** 	TPUI_GAUGING_EN = 0x11,
  62:include/calypso/tpu.h **** };
  63:include/calypso/tpu.h **** 
  64:include/calypso/tpu.h **** enum tpui_ctrl2_bits {
  65:include/calypso/tpu.h **** 	TPUI_CTRL2_RD		= (1 << 0),
  66:include/calypso/tpu.h **** 	TPUI_CTRL2_WR		= (1 << 1),
  67:include/calypso/tpu.h **** };
  68:include/calypso/tpu.h **** 
  69:include/calypso/tpu.h **** static inline uint16_t tpu_mod5000(int16_t time)
  70:include/calypso/tpu.h **** {
  71:include/calypso/tpu.h **** 	if (time < 0)
  72:include/calypso/tpu.h **** 		return time + 5000;
  73:include/calypso/tpu.h **** 	if (time >= 5000)
  74:include/calypso/tpu.h **** 		return time - 5000;
  75:include/calypso/tpu.h **** 	return time;
  76:include/calypso/tpu.h **** }
  77:include/calypso/tpu.h **** 
  78:include/calypso/tpu.h **** /* Enqueue a SLEEP operation (stop sequencer by disabling TPU ENABLE bit) */
  79:include/calypso/tpu.h **** static inline void tpu_enq_sleep(void)
  80:include/calypso/tpu.h **** {
  81:include/calypso/tpu.h **** 	tpu_enqueue(TPU_INSTR_SLEEP);
  82:include/calypso/tpu.h **** }
  83:include/calypso/tpu.h **** 
  84:include/calypso/tpu.h **** /* Enqueue a MOVE operation */
  85:include/calypso/tpu.h **** static inline void tpu_enq_move(uint8_t addr, uint8_t data)
  86:include/calypso/tpu.h **** {
  16              		.loc 1 86 0
  17              		@ args = 0, pretend = 0, frame = 0
  18              		@ frame_needed = 0, uses_anonymous_args = 0
  19              		@ link register save eliminated.
  20              	.LVL0:
  21 0000 FF1001E2 		and	r1, r1, #255
  87:include/calypso/tpu.h **** 	tpu_enqueue(TPU_INSTR_MOVE | (data << 5) | (addr & 0x1f));
  22              		.loc 1 87 0
  23 0004 1F0000E2 		and	r0, r0, #31
  24              	.LVL1:
  25 0008 810280E1 		orr	r0, r0, r1, asl #5
  26 000c 020980E3 		orr	r0, r0, #32768
  27              		.loc 1 86 0
  28              		@ lr needed for prologue
  88:include/calypso/tpu.h **** }
  29              		.loc 1 88 0
  30              		.loc 1 87 0
  31 0010 FEFFFFEA 		b	tpu_enqueue
  32              	.LVL2:
  33              	.LFE4:
  35              		.section	.text.tsp_write,"ax",%progbits
  36              		.align	2
  37              		.global	tsp_write
  39              	tsp_write:
  40              	.LFB10:
  41              		.file 2 "calypso/tsp.c"
   1:calypso/tsp.c **** /* Calypso DBB internal TSP (Time Serial Port) Driver */
   2:calypso/tsp.c **** 
   3:calypso/tsp.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:calypso/tsp.c ****  *
   5:calypso/tsp.c ****  * All Rights Reserved
   6:calypso/tsp.c ****  *
   7:calypso/tsp.c ****  * This program is free software; you can redistribute it and/or modify
   8:calypso/tsp.c ****  * it under the terms of the GNU General Public License as published by
   9:calypso/tsp.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:calypso/tsp.c ****  * (at your option) any later version.
  11:calypso/tsp.c ****  *
  12:calypso/tsp.c ****  * This program is distributed in the hope that it will be useful,
  13:calypso/tsp.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:calypso/tsp.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:calypso/tsp.c ****  * GNU General Public License for more details.
  16:calypso/tsp.c ****  *
  17:calypso/tsp.c ****  * You should have received a copy of the GNU General Public License along
  18:calypso/tsp.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:calypso/tsp.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:calypso/tsp.c ****  *
  21:calypso/tsp.c ****  */
  22:calypso/tsp.c **** 
  23:calypso/tsp.c **** #include <stdint.h>
  24:calypso/tsp.c **** #include <stdio.h>
  25:calypso/tsp.c **** 
  26:calypso/tsp.c **** #include <debug.h>
  27:calypso/tsp.c **** #include <memory.h>
  28:calypso/tsp.c **** #include <calypso/tpu.h>
  29:calypso/tsp.c **** #include <calypso/tsp.h>
  30:calypso/tsp.c **** 
  31:calypso/tsp.c **** static uint16_t tspact_state;
  32:calypso/tsp.c **** 
  33:calypso/tsp.c **** /* initiate a TSP write through the TPU */
  34:calypso/tsp.c **** void tsp_write(uint8_t dev_idx, uint8_t bitlen, uint32_t dout)
  35:calypso/tsp.c **** {
  42              		.loc 2 35 0
  43              		@ args = 0, pretend = 0, frame = 0
  44              		@ frame_needed = 0, uses_anonymous_args = 0
  45              	.LVL3:
  46 0000 F0452DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
  47              	.LCFI0:
  48              		.loc 2 35 0
  49 0004 FF6001E2 		and	r6, r1, #255
  50 0008 0030A0E1 		mov	r3, r0
  36:calypso/tsp.c **** 	if (bitlen <= 8) {
  51              		.loc 2 36 0
  52 000c 080056E3 		cmp	r6, #8
  37:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_1, dout & 0xff);
  53              		.loc 2 37 0
  54 0010 0400A0E3 		mov	r0, #4
  55              	.LVL4:
  56              		.loc 2 35 0
  57 0014 0240A0E1 		mov	r4, r2
  58              		.loc 2 37 0
  59 0018 FF1002E2 		and	r1, r2, #255
  60              	.LVL5:
  61              		.loc 2 35 0
  62 001c FFA003E2 		and	sl, r3, #255
  63              		.loc 2 36 0
  64 0020 2900009A 		bls	.L12
  65              	.LVL6:
  38:calypso/tsp.c **** 	} else if (bitlen <= 16) {
  39:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_1, (dout >> 8) & 0xff);
  66              		.loc 2 39 0
  67 0024 2214A0E1 		mov	r1, r2, lsr #8
  68              		.loc 2 38 0
  69 0028 100056E3 		cmp	r6, #16
  70              		.loc 2 39 0
  71 002c FF1001E2 		and	r1, r1, #255
  72 0030 0400A0E3 		mov	r0, #4
  73 0034 FF8002E2 		and	r8, r2, #255
  74 0038 2274A0E1 		mov	r7, r2, lsr #8
  75 003c 2258A0E1 		mov	r5, r2, lsr #16
  76              		.loc 2 38 0
  77 0040 1300008A 		bhi	.L7
  78              		.loc 2 39 0
  79 0044 FEFFFFEB 		bl	tpu_enq_move
  80              	.LVL7:
  40:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_2, dout & 0xff);
  81              		.loc 2 40 0
  82 0048 0810A0E1 		mov	r1, r8
  83 004c 0300A0E3 		mov	r0, #3
  84 0050 290000EA 		b	.L12
  85              	.LVL8:
  86              	.L7:
  41:calypso/tsp.c **** 	} else if (bitlen <= 24) {
  87              		.loc 2 41 0
  88 0054 180056E3 		cmp	r6, #24
  42:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_1, (dout >> 16) & 0xff);
  89              		.loc 2 42 0
  90 0058 FF1005E2 		and	r1, r5, #255
  91 005c 0400A0E3 		mov	r0, #4
  92              		.loc 2 41 0
  93 0060 1E00008A 		bhi	.L9
  94              		.loc 2 42 0
  95 0064 FEFFFFEB 		bl	tpu_enq_move
  96              	.LVL9:
  43:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_2, (dout >> 8) & 0xff);
  97              		.loc 2 43 0
  98 0068 FF1007E2 		and	r1, r7, #255
  99 006c 0300A0E3 		mov	r0, #3
 100 0070 FEFFFFEB 		bl	tpu_enq_move
  44:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_3, dout & 0xff);
 101              		.loc 2 44 0
 102 0074 0810A0E1 		mov	r1, r8
 103 0078 0200A0E3 		mov	r0, #2
 104 007c 290000EA 		b	.L12
 105              	.LVL10:
 106              	.L9:
  45:calypso/tsp.c **** 	} else {
  46:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_1, (dout >> 24) & 0xff);
 107              		.loc 2 46 0
 108 0080 221CA0E1 		mov	r1, r2, lsr #24
 109 0084 0400A0E3 		mov	r0, #4
 110 0088 FEFFFFEB 		bl	tpu_enq_move
 111              	.LVL11:
  47:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_2, (dout >> 16) & 0xff);
 112              		.loc 2 47 0
 113 008c FF1005E2 		and	r1, r5, #255
 114 0090 0300A0E3 		mov	r0, #3
 115 0094 FEFFFFEB 		bl	tpu_enq_move
  48:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_3, (dout >> 8) & 0xff);
 116              		.loc 2 48 0
 117 0098 FF1007E2 		and	r1, r7, #255
 118 009c 0200A0E3 		mov	r0, #2
 119 00a0 FEFFFFEB 		bl	tpu_enq_move
  49:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_4, dout & 0xff);
 120              		.loc 2 49 0
 121 00a4 0810A0E1 		mov	r1, r8
 122 00a8 0500A0E3 		mov	r0, #5
 123              	.LVL12:
 124              	.L12:
 125 00ac FEFFFFEB 		bl	tpu_enq_move
  50:calypso/tsp.c **** 	}
  51:calypso/tsp.c **** 	tpu_enq_move(TPUI_TSP_CTRL1, (dev_idx << 5) | (bitlen - 1));
 126              		.loc 2 51 0
 127 00b0 011046E2 		sub	r1, r6, #1
 128 00b4 8A1281E1 		orr	r1, r1, sl, asl #5
 129 00b8 0000A0E3 		mov	r0, #0
 130 00bc FF1001E2 		and	r1, r1, #255
 131 00c0 FEFFFFEB 		bl	tpu_enq_move
  52:calypso/tsp.c **** 	tpu_enq_move(TPUI_TSP_CTRL2, TPUI_CTRL2_WR);
 132              		.loc 2 52 0
 133 00c4 0100A0E3 		mov	r0, #1
 134 00c8 0210A0E3 		mov	r1, #2
  53:calypso/tsp.c **** }
 135              		.loc 2 53 0
 136 00cc F045BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 137              		.loc 2 52 0
 138 00d0 FEFFFFEA 		b	tpu_enq_move
 139              	.LFE10:
 141              		.section	.text.tsp_setup,"ax",%progbits
 142              		.align	2
 143              		.global	tsp_setup
 145              	tsp_setup:
 146              	.LFB11:
  54:calypso/tsp.c **** 
  55:calypso/tsp.c **** /* Configure clock edge and chip enable polarity for a device */
  56:calypso/tsp.c **** void tsp_setup(uint8_t dev_idx, int clk_rising, int en_positive, int en_edge)
  57:calypso/tsp.c **** {
 147              		.loc 2 57 0
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151              	.LVL13:
  58:calypso/tsp.c **** 	uint8_t reg = TPUI_TSP_SET1 + (dev_idx / 2);
  59:calypso/tsp.c **** 	uint8_t val = 0;
  60:calypso/tsp.c **** 	uint8_t shift;
  61:calypso/tsp.c **** 
  62:calypso/tsp.c **** 	if (dev_idx & 1)
 152              		.loc 2 62 0
 153 0000 01C010E2 		ands	ip, r0, #1
 154 0004 04C0A013 		movne	ip, #4
 155              	.LVL14:
 156 0008 001051E2 		subs	r1, r1, #0
 157 000c 0110A013 		movne	r1, #1
 158              	.LVL15:
  63:calypso/tsp.c **** 		shift = 4;
  64:calypso/tsp.c **** 	else
  65:calypso/tsp.c **** 		shift = 0;
  66:calypso/tsp.c **** 
  67:calypso/tsp.c **** 	if (clk_rising)
  68:calypso/tsp.c **** 		val |= 1;
  69:calypso/tsp.c **** 	if (en_positive)
 159              		.loc 2 69 0
 160 0010 000052E3 		cmp	r2, #0
  70:calypso/tsp.c **** 		val |= 2;
 161              		.loc 2 70 0
 162 0014 022081E3 		orr	r2, r1, #2
 163              	.LVL16:
 164 0018 FF100212 		andne	r1, r2, #255
  71:calypso/tsp.c **** 	if (en_edge)
 165              		.loc 2 71 0
 166 001c 000053E3 		cmp	r3, #0
  72:calypso/tsp.c **** 		val |= 4;
 167              		.loc 2 72 0
 168 0020 04108113 		orrne	r1, r1, #4
  73:calypso/tsp.c **** 
  74:calypso/tsp.c **** 	tpu_enq_move(reg, (val << shift));
 169              		.loc 2 74 0
 170 0024 111CA0E1 		mov	r1, r1, asl ip
 171              	.LVL17:
 172              		.loc 2 57 0
 173 0028 FF0000E2 		and	r0, r0, #255
 174              		.loc 2 58 0
 175 002c A000A0E1 		mov	r0, r0, lsr #1
 176              	.LVL18:
 177 0030 090080E2 		add	r0, r0, #9
 178              	.LVL19:
 179              		.loc 2 74 0
 180 0034 FF1001E2 		and	r1, r1, #255
 181              		.loc 2 57 0
 182              		@ lr needed for prologue
  75:calypso/tsp.c **** }
 183              		.loc 2 75 0
 184              		.loc 2 74 0
 185 0038 FEFFFFEA 		b	tpu_enq_move
 186              	.LVL20:
 187              	.LFE11:
 189              		.section	.text.tsp_act_update,"ax",%progbits
 190              		.align	2
 191              		.global	tsp_act_update
 193              	tsp_act_update:
 194              	.LFB12:
  76:calypso/tsp.c **** 
  77:calypso/tsp.c **** /* Update the TSPACT state, including enable and disable */
  78:calypso/tsp.c **** void tsp_act_update(uint16_t new_act)
  79:calypso/tsp.c **** {
 195              		.loc 2 79 0
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              	.LVL21:
 199 0000 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 200              	.LCFI1:
  80:calypso/tsp.c **** 	uint8_t low = new_act & 0xff;
  81:calypso/tsp.c **** 	uint8_t high = new_act >> 8;
  82:calypso/tsp.c **** 
  83:calypso/tsp.c **** 	if (low != (tspact_state & 0xff))
 201              		.loc 2 83 0
 202 0004 38509FE5 		ldr	r5, .L28
 203              		.loc 2 79 0
 204 0008 0028A0E1 		mov	r2, r0, asl #16
 205 000c 2268A0E1 		mov	r6, r2, lsr #16
 206              		.loc 2 83 0
 207 0010 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 208 0014 FF1006E2 		and	r1, r6, #255
 209 0018 030051E1 		cmp	r1, r3
  84:calypso/tsp.c **** 		tpu_enq_move(TPUI_TSP_ACT_L, low);
 210              		.loc 2 84 0
 211 001c 0600A0E3 		mov	r0, #6
 212              	.LVL22:
 213              		.loc 2 81 0
 214 0020 224CA0E1 		mov	r4, r2, lsr #24
 215              	.LVL23:
 216              		.loc 2 83 0
 217              		.loc 2 84 0
 218 0024 FEFFFF1B 		blne	tpu_enq_move
 219              	.L23:
  85:calypso/tsp.c **** 	if (high != (tspact_state >> 8))
 220              		.loc 2 85 0
 221 0028 B030D5E1 		ldrh	r3, [r5, #0]
 222 002c 230454E1 		cmp	r4, r3, lsr #8
  86:calypso/tsp.c **** 		tpu_enq_move(TPUI_TSP_ACT_U, high);
 223              		.loc 2 86 0
 224 0030 0410A0E1 		mov	r1, r4
 225 0034 0700A0E3 		mov	r0, #7
 226              		.loc 2 85 0
 227              	.LVL24:
 228              		.loc 2 86 0
 229 0038 FEFFFF1B 		blne	tpu_enq_move
 230              	.LVL25:
 231              	.L25:
  87:calypso/tsp.c **** 
  88:calypso/tsp.c **** 	tspact_state = new_act;
 232              		.loc 2 88 0
 233 003c B060C5E1 		strh	r6, [r5, #0]	@ movhi
  89:calypso/tsp.c **** }
 234              		.loc 2 89 0
 235 0040 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 236              	.L29:
 237              		.align	2
 238              	.L28:
 239 0044 00000000 		.word	tspact_state
 240              	.LFE12:
 242              		.section	.text.tsp_act_enable,"ax",%progbits
 243              		.align	2
 244              		.global	tsp_act_enable
 246              	tsp_act_enable:
 247              	.LFB13:
  90:calypso/tsp.c **** 
  91:calypso/tsp.c **** /* Enable one or multiple TSPACT signals */
  92:calypso/tsp.c **** void tsp_act_enable(uint16_t bitmask)
  93:calypso/tsp.c **** {
 248              		.loc 2 93 0
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252              	.LVL26:
  94:calypso/tsp.c **** 	uint16_t new_act = tspact_state | bitmask;
  95:calypso/tsp.c **** 	tsp_act_update(new_act);
 253              		.loc 2 95 0
 254 0000 10309FE5 		ldr	r3, .L32
 255 0004 B030D3E1 		ldrh	r3, [r3, #0]
 256 0008 030080E1 		orr	r0, r0, r3
 257              	.LVL27:
 258 000c 0008A0E1 		mov	r0, r0, asl #16
 259 0010 2008A0E1 		mov	r0, r0, lsr #16
 260              		.loc 2 93 0
 261              		@ lr needed for prologue
  96:calypso/tsp.c **** }
 262              		.loc 2 96 0
 263              		.loc 2 95 0
 264 0014 FEFFFFEA 		b	tsp_act_update
 265              	.L33:
 266              		.align	2
 267              	.L32:
 268 0018 00000000 		.word	tspact_state
 269              	.LFE13:
 271              		.section	.text.tsp_act_disable,"ax",%progbits
 272              		.align	2
 273              		.global	tsp_act_disable
 275              	tsp_act_disable:
 276              	.LFB14:
  97:calypso/tsp.c **** 
  98:calypso/tsp.c **** /* Disable one or multiple TSPACT signals */
  99:calypso/tsp.c **** void tsp_act_disable(uint16_t bitmask)
 100:calypso/tsp.c **** {
 277              		.loc 2 100 0
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281              	.LVL28:
 101:calypso/tsp.c **** 	uint16_t new_act = tspact_state & ~bitmask;
 102:calypso/tsp.c **** 	tsp_act_update(new_act);
 282              		.loc 2 102 0
 283 0000 08309FE5 		ldr	r3, .L36
 284 0004 B030D3E1 		ldrh	r3, [r3, #0]
 285 0008 0000C3E1 		bic	r0, r3, r0
 286              	.LVL29:
 287              		.loc 2 100 0
 288              		@ lr needed for prologue
 103:calypso/tsp.c **** }
 289              		.loc 2 103 0
 290              		.loc 2 102 0
 291 000c FEFFFFEA 		b	tsp_act_update
 292              	.L37:
 293              		.align	2
 294              	.L36:
 295 0010 00000000 		.word	tspact_state
 296              	.LFE14:
 298              		.section	.text.tsp_act_state,"ax",%progbits
 299              		.align	2
 300              		.global	tsp_act_state
 302              	tsp_act_state:
 303              	.LFB15:
 104:calypso/tsp.c **** 
 105:calypso/tsp.c **** /* Obtain the current tspact state */
 106:calypso/tsp.c **** uint16_t tsp_act_state(void)
 107:calypso/tsp.c **** {
 304              		.loc 2 107 0
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.LVL30:
 108:calypso/tsp.c **** 	return tspact_state;
 109:calypso/tsp.c **** }
 309              		.loc 2 109 0
 310 0000 04309FE5 		ldr	r3, .L40
 311 0004 B000D3E1 		ldrh	r0, [r3, #0]
 312              		.loc 2 107 0
 313              		@ lr needed for prologue
 314              		.loc 2 109 0
 315 0008 1EFF2FE1 		bx	lr
 316              	.L41:
 317              		.align	2
 318              	.L40:
 319 000c 00000000 		.word	tspact_state
 320              	.LFE15:
 322              		.section	.text.tsp_act_toggle,"ax",%progbits
 323              		.align	2
 324              		.global	tsp_act_toggle
 326              	tsp_act_toggle:
 327              	.LFB16:
 110:calypso/tsp.c **** 
 111:calypso/tsp.c **** /* Toggle one or multiple TSPACT signals */
 112:calypso/tsp.c **** void tsp_act_toggle(uint16_t bitmask)
 113:calypso/tsp.c **** {
 328              		.loc 2 113 0
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332              	.LVL31:
 114:calypso/tsp.c **** 	uint16_t new_act = tspact_state ^ bitmask;
 115:calypso/tsp.c **** 	tsp_act_update(new_act);
 333              		.loc 2 115 0
 334 0000 10309FE5 		ldr	r3, .L44
 335 0004 B030D3E1 		ldrh	r3, [r3, #0]
 336 0008 030020E0 		eor	r0, r0, r3
 337              	.LVL32:
 338 000c 0008A0E1 		mov	r0, r0, asl #16
 339 0010 2008A0E1 		mov	r0, r0, lsr #16
 340              		.loc 2 113 0
 341              		@ lr needed for prologue
 116:calypso/tsp.c **** }
 342              		.loc 2 116 0
 343              		.loc 2 115 0
 344 0014 FEFFFFEA 		b	tsp_act_update
 345              	.L45:
 346              		.align	2
 347              	.L44:
 348 0018 00000000 		.word	tspact_state
 349              	.LFE16:
 351              		.section	.text.tsp_init,"ax",%progbits
 352              		.align	2
 353              		.global	tsp_init
 355              	tsp_init:
 356              	.LFB17:
 117:calypso/tsp.c **** 
 118:calypso/tsp.c **** void tsp_init(void)
 119:calypso/tsp.c **** {
 357              		.loc 2 119 0
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 361              	.LVL33:
 120:calypso/tsp.c **** 	tsp_act_update(0);
 362              		.loc 2 120 0
 363 0000 0000A0E3 		mov	r0, #0
 364              		.loc 2 119 0
 365              		@ lr needed for prologue
 121:calypso/tsp.c **** }
 366              		.loc 2 121 0
 367              		.loc 2 120 0
 368 0004 FEFFFFEA 		b	tsp_act_update
 369              	.LFE17:
 371              		.bss
 372              		.align	1
 373              	tspact_state:
 374 0000 0000     		.space	2
 494              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 tsp.c
     /tmp/ccev3M6y.s:13     .text.tpu_enq_move:0000000000000000 tpu_enq_move
     /tmp/ccev3M6y.s:21     .text.tpu_enq_move:0000000000000000 $a
     /tmp/ccev3M6y.s:39     .text.tsp_write:0000000000000000 tsp_write
     /tmp/ccev3M6y.s:46     .text.tsp_write:0000000000000000 $a
     /tmp/ccev3M6y.s:145    .text.tsp_setup:0000000000000000 tsp_setup
     /tmp/ccev3M6y.s:153    .text.tsp_setup:0000000000000000 $a
     /tmp/ccev3M6y.s:193    .text.tsp_act_update:0000000000000000 tsp_act_update
     /tmp/ccev3M6y.s:199    .text.tsp_act_update:0000000000000000 $a
     /tmp/ccev3M6y.s:239    .text.tsp_act_update:0000000000000044 $d
     /tmp/ccev3M6y.s:373    .bss:0000000000000000 tspact_state
     /tmp/ccev3M6y.s:246    .text.tsp_act_enable:0000000000000000 tsp_act_enable
     /tmp/ccev3M6y.s:254    .text.tsp_act_enable:0000000000000000 $a
     /tmp/ccev3M6y.s:268    .text.tsp_act_enable:0000000000000018 $d
     /tmp/ccev3M6y.s:275    .text.tsp_act_disable:0000000000000000 tsp_act_disable
     /tmp/ccev3M6y.s:283    .text.tsp_act_disable:0000000000000000 $a
     /tmp/ccev3M6y.s:295    .text.tsp_act_disable:0000000000000010 $d
     /tmp/ccev3M6y.s:302    .text.tsp_act_state:0000000000000000 tsp_act_state
     /tmp/ccev3M6y.s:310    .text.tsp_act_state:0000000000000000 $a
     /tmp/ccev3M6y.s:319    .text.tsp_act_state:000000000000000c $d
     /tmp/ccev3M6y.s:326    .text.tsp_act_toggle:0000000000000000 tsp_act_toggle
     /tmp/ccev3M6y.s:334    .text.tsp_act_toggle:0000000000000000 $a
     /tmp/ccev3M6y.s:348    .text.tsp_act_toggle:0000000000000018 $d
     /tmp/ccev3M6y.s:355    .text.tsp_init:0000000000000000 tsp_init
     /tmp/ccev3M6y.s:363    .text.tsp_init:0000000000000000 $a
                             .bss:0000000000000000 $d

UNDEFINED SYMBOLS
tpu_enqueue
