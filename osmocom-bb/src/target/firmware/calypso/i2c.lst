   1              		.file	"i2c.c"
   9              	.Ltext0:
  10              		.section	.text.i2c_write,"ax",%progbits
  11              		.align	2
  12              		.global	i2c_write
  14              	i2c_write:
  15              	.LFB2:
  16              		.file 1 "calypso/i2c.c"
   1:calypso/i2c.c **** /* Driver for I2C Master Controller inside TI Calypso */
   2:calypso/i2c.c **** 
   3:calypso/i2c.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:calypso/i2c.c ****  *
   5:calypso/i2c.c ****  * All Rights Reserved
   6:calypso/i2c.c ****  *
   7:calypso/i2c.c ****  * This program is free software; you can redistribute it and/or modify
   8:calypso/i2c.c ****  * it under the terms of the GNU General Public License as published by
   9:calypso/i2c.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:calypso/i2c.c ****  * (at your option) any later version.
  11:calypso/i2c.c ****  *
  12:calypso/i2c.c ****  * This program is distributed in the hope that it will be useful,
  13:calypso/i2c.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:calypso/i2c.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:calypso/i2c.c ****  * GNU General Public License for more details.
  16:calypso/i2c.c ****  *
  17:calypso/i2c.c ****  * You should have received a copy of the GNU General Public License along
  18:calypso/i2c.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:calypso/i2c.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:calypso/i2c.c ****  *
  21:calypso/i2c.c ****  */
  22:calypso/i2c.c **** 
  23:calypso/i2c.c **** #include <stdint.h>
  24:calypso/i2c.c **** #include <stdio.h>
  25:calypso/i2c.c **** 
  26:calypso/i2c.c **** #include <debug.h>
  27:calypso/i2c.c **** #include <memory.h>
  28:calypso/i2c.c **** #include <i2c.h>
  29:calypso/i2c.c **** 
  30:calypso/i2c.c **** #define BASE_ADDR_I2C	0xfffe2800
  31:calypso/i2c.c **** #define I2C_REG(x)	(BASE_ADDR_I2C+(x))
  32:calypso/i2c.c **** 
  33:calypso/i2c.c **** enum i2c_reg {
  34:calypso/i2c.c **** 	DEVICE_REG	= 0,
  35:calypso/i2c.c **** 	ADDRESS_REG,
  36:calypso/i2c.c **** 	DATA_WR_REG,	
  37:calypso/i2c.c **** 	DATA_RD_REG,
  38:calypso/i2c.c **** 	CMD_REG,
  39:calypso/i2c.c **** 	CONF_FIFO_REG,
  40:calypso/i2c.c **** 	CONF_CLK_REG,
  41:calypso/i2c.c **** 	CONF_CLK_FUNC_REF,
  42:calypso/i2c.c **** 	STATUS_FIFO_REG,
  43:calypso/i2c.c **** 	STATUS_ACTIVITY_REG,
  44:calypso/i2c.c **** };
  45:calypso/i2c.c **** 
  46:calypso/i2c.c **** #define I2C_CMD_SOFT_RESET	(1 << 0)
  47:calypso/i2c.c **** #define I2C_CMD_EN_CLK		(1 << 1)
  48:calypso/i2c.c **** #define I2C_CMD_START		(1 << 2)
  49:calypso/i2c.c **** #define I2C_CMD_RW_READ		(1 << 3)
  50:calypso/i2c.c **** #define I2C_CMD_COMP_READ	(1 << 4)
  51:calypso/i2c.c **** #define I2C_CMD_IRQ_ENABLE	(1 << 5)
  52:calypso/i2c.c **** 
  53:calypso/i2c.c **** #define I2C_STATUS_ERROR_DATA	(1 << 0)
  54:calypso/i2c.c **** #define I2C_STATUS_ERROR_DEV	(1 << 1)
  55:calypso/i2c.c **** #define I2C_STATUS_IDLE		(1 << 2) // 1: not idle, 0: idle
  56:calypso/i2c.c **** #define I2C_STATUS_INTERRUPT	(1 << 3)
  57:calypso/i2c.c **** 
  58:calypso/i2c.c **** int i2c_write(uint8_t chip, uint32_t addr, int alen, const uint8_t *buffer, int len)
  59:calypso/i2c.c **** {
  17              		.loc 1 59 0
  18              		@ args = 4, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              	.LVL0:
  21 0000 10402DE9 		stmfd	sp!, {r4, lr}
  22              	.LCFI0:
  60:calypso/i2c.c **** 	uint8_t cmd;
  61:calypso/i2c.c **** 
  62:calypso/i2c.c **** 	/* Calypso I2C controller doesn't support fancy addressing */
  63:calypso/i2c.c **** 	if (alen > 1)
  23              		.loc 1 63 0
  24 0004 010052E3 		cmp	r2, #1
  25              		.loc 1 59 0
  26 0008 01C0A0E1 		mov	ip, r1
  27 000c 0340A0E1 		mov	r4, r3
  28 0010 08E09DE5 		ldr	lr, [sp, #8]
  29              		.loc 1 63 0
  30 0014 200000CA 		bgt	.L2
  31              	.LVL1:
  64:calypso/i2c.c **** 		return -1;
  65:calypso/i2c.c **** 
  66:calypso/i2c.c **** 	/* FIXME: implement writes longer than fifo size */
  67:calypso/i2c.c **** 	if (len > 16)
  32              		.loc 1 67 0
  33 0018 10005EE3 		cmp	lr, #16
  34 001c 200000CA 		bgt	.L2
  68:calypso/i2c.c **** 		return -1;
  69:calypso/i2c.c **** 
  70:calypso/i2c.c **** 	printd("i2c_write(chip=0x%02u, addr=0x%02u): ", chip, addr);
  71:calypso/i2c.c **** 
  72:calypso/i2c.c **** 	writeb(chip & 0x7f, I2C_REG(DEVICE_REG));
  35              		.loc 1 72 0
  36 0020 68309FE5 		ldr	r3, .L15
  37 0024 7F1000E2 		and	r1, r0, #127
  38 0028 0010C3E5 		strb	r1, [r3, #0]
  73:calypso/i2c.c **** 	writeb(addr & 0xff, I2C_REG(ADDRESS_REG));
  39              		.loc 1 73 0
  40 002c FF000CE2 		and	r0, ip, #255
  41              	.LVL2:
  42 0030 013083E2 		add	r3, r3, #1
  74:calypso/i2c.c **** 	
  75:calypso/i2c.c **** 	/* we have to tell the controller how many bits we'll put into the fifo ?!? */
  76:calypso/i2c.c **** 	writeb(len-1, I2C_REG(CONF_FIFO_REG));
  43              		.loc 1 76 0
  44 0034 01204EE2 		sub	r2, lr, #1
  45              	.LVL3:
  46              		.loc 1 73 0
  47 0038 0000C3E5 		strb	r0, [r3, #0]
  48              		.loc 1 76 0
  49 003c FF2002E2 		and	r2, r2, #255
  50 0040 00C0A0E3 		mov	ip, #0
  51              	.LVL4:
  52 0044 043083E2 		add	r3, r3, #4
  53 0048 130000EA 		b	.L14
  54              	.LVL5:
  55              	.L6:
  56              	.LBB2:
  77:calypso/i2c.c **** 
  78:calypso/i2c.c **** 	/* fill the FIFO */
  79:calypso/i2c.c **** 	while (len--) {
  80:calypso/i2c.c **** 		uint8_t byte = *buffer++;
  57              		.loc 1 80 0
  58 004c 0120D4E4 		ldrb	r2, [r4], #1	@ zero_extendqisi2
  81:calypso/i2c.c **** 		writeb(byte, I2C_REG(DATA_WR_REG));
  59              		.loc 1 81 0
  60 0050 3C309FE5 		ldr	r3, .L15+4
  61              	.L14:
  62              	.LBE2:
  63              		.loc 1 79 0
  64 0054 0E005CE1 		cmp	ip, lr
  65              	.LBB3:
  66              		.loc 1 81 0
  67 0058 0020C3E5 		strb	r2, [r3, #0]
  68 005c 01C08CE2 		add	ip, ip, #1
  69              	.LBE3:
  70              		.loc 1 79 0
  71 0060 1100001A 		bne	.L6
  82:calypso/i2c.c **** 		printd("%02X ", byte);
  83:calypso/i2c.c **** 	}
  84:calypso/i2c.c **** 	dputchar('\n');
  85:calypso/i2c.c **** 
  86:calypso/i2c.c **** 	/* start the transfer */
  87:calypso/i2c.c **** 	cmd = readb(I2C_REG(CMD_REG));
  72              		.loc 1 87 0
  73 0064 2C209FE5 		ldr	r2, .L15+8
  74              	.LVL6:
  75 0068 0030D2E5 		ldrb	r3, [r2, #0]	@ zero_extendqisi2
  88:calypso/i2c.c **** 	cmd |= I2C_CMD_START;
  76              		.loc 1 88 0
  77 006c 043083E3 		orr	r3, r3, #4
  78              	.LVL7:
  89:calypso/i2c.c **** 	writeb(cmd, I2C_REG(CMD_REG));
  79              		.loc 1 89 0
  80 0070 0030C2E5 		strb	r3, [r2, #0]
  81              	.L8:
  82              	.LBB4:
  90:calypso/i2c.c **** 
  91:calypso/i2c.c **** 	/* wait until transfer completes */
  92:calypso/i2c.c **** 	while (1) {
  93:calypso/i2c.c **** 		uint8_t reg = readb(I2C_REG(STATUS_ACTIVITY_REG));
  83              		.loc 1 93 0
  84 0074 20309FE5 		ldr	r3, .L15+12
  85              	.LVL8:
  86 0078 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  94:calypso/i2c.c **** 		printd("I2C Status: 0x%02x\n", reg & 0xf);
  95:calypso/i2c.c **** 		if (!(reg & I2C_STATUS_IDLE)) // 0: idle 1: not idle
  87              		.loc 1 95 0
  88 007c 040013E2 		ands	r0, r3, #4
  89 0080 1B00001A 		bne	.L8
  90 0084 1080BDE8 		ldmfd	sp!, {r4, pc}
  91              	.LVL9:
  92              	.L2:
  93 0088 0000E0E3 		mvn	r0, #0
  94              	.LVL10:
  95              	.LBE4:
  96:calypso/i2c.c **** 			break;
  97:calypso/i2c.c **** 	}
  98:calypso/i2c.c **** 	dputs("I2C transfer completed\n");
  99:calypso/i2c.c **** 
 100:calypso/i2c.c **** 	return 0;
 101:calypso/i2c.c **** }
  96              		.loc 1 101 0
  97 008c 1080BDE8 		ldmfd	sp!, {r4, pc}
  98              	.L16:
  99              		.align	2
 100              	.L15:
 101 0090 0028FEFF 		.word	-120832
 102 0094 0228FEFF 		.word	-120830
 103 0098 0428FEFF 		.word	-120828
 104 009c 0928FEFF 		.word	-120823
 105              	.LFE2:
 107              		.section	.text.i2c_init,"ax",%progbits
 108              		.align	2
 109              		.global	i2c_init
 111              	i2c_init:
 112              	.LFB3:
 102:calypso/i2c.c **** 
 103:calypso/i2c.c **** void i2c_init(int speed, int slaveadd)
 104:calypso/i2c.c **** {
 113              		.loc 1 104 0
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117              	.LVL11:
 105:calypso/i2c.c **** 	/* scl_out = clk_func_ref / 3,
 106:calypso/i2c.c **** 	   clk_func_ref = master_clock_freq / (divisor_2 + 1)
 107:calypso/i2c.c **** 	   master_clock_freq = ext_clock_freq / divisor_1 */
 108:calypso/i2c.c **** 	/* clk_func_ref = scl_out * 3,
 109:calypso/i2c.c **** 	   divisor_2 = (master_clock_freq / clk_func_ref) - 1
 110:calypso/i2c.c **** 	   divisor_1 = ext_clock_freq / master_clock_freq */
 111:calypso/i2c.c **** 	/* for a target freq of 200kHz:
 112:calypso/i2c.c **** 		ext_clock_freq = 13MHz
 113:calypso/i2c.c **** 		clk_func_ref = 3 * 300kHZ = 600kHz
 114:calypso/i2c.c **** 		divisor_1 = 1 => master_clock_freq = ext_clock_freq = 13MHz
 115:calypso/i2c.c **** 		divisor_2 = 21 => clk_func_ref = 13MHz / (21+2) = 590.91 kHz
 116:calypso/i2c.c **** 		scl_out = clk_func_ref / 3 = 509.91 kHz / 3 = 196.97kHz */
 117:calypso/i2c.c **** 	writeb(I2C_CMD_SOFT_RESET, I2C_REG(CMD_REG));
 118              		.loc 1 117 0
 119 0000 24109FE5 		ldr	r1, .L19
 120              	.LVL12:
 121 0004 0130A0E3 		mov	r3, #1
 122 0008 0030C1E5 		strb	r3, [r1, #0]
 118:calypso/i2c.c **** 
 119:calypso/i2c.c **** 	writeb(0x00, I2C_REG(CONF_CLK_REG));
 123              		.loc 1 119 0
 124 000c 1C309FE5 		ldr	r3, .L19+4
 125 0010 0020A0E3 		mov	r2, #0
 126 0014 0120C3E4 		strb	r2, [r3], #1
 120:calypso/i2c.c **** 	writeb(21, I2C_REG(CONF_CLK_FUNC_REF));
 127              		.loc 1 120 0
 128 0018 152082E2 		add	r2, r2, #21
 129 001c 0020C3E5 		strb	r2, [r3, #0]
 121:calypso/i2c.c **** 
 122:calypso/i2c.c **** 	writeb(I2C_CMD_EN_CLK, I2C_REG(CMD_REG));
 130              		.loc 1 122 0
 131 0020 0230A0E3 		mov	r3, #2
 132              		.loc 1 104 0
 133              		@ lr needed for prologue
 134              		.loc 1 122 0
 135 0024 0030C1E5 		strb	r3, [r1, #0]
 123:calypso/i2c.c **** }
 136              		.loc 1 123 0
 137 0028 1EFF2FE1 		bx	lr
 138              	.L20:
 139              		.align	2
 140              	.L19:
 141 002c 0428FEFF 		.word	-120828
 142 0030 0628FEFF 		.word	-120826
 143              	.LFE3:
 186              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 i2c.c
     /tmp/ccQ2qGif.s:14     .text.i2c_write:0000000000000000 i2c_write
     /tmp/ccQ2qGif.s:21     .text.i2c_write:0000000000000000 $a
     /tmp/ccQ2qGif.s:101    .text.i2c_write:0000000000000090 $d
     /tmp/ccQ2qGif.s:111    .text.i2c_init:0000000000000000 i2c_init
     /tmp/ccQ2qGif.s:119    .text.i2c_init:0000000000000000 $a
     /tmp/ccQ2qGif.s:141    .text.i2c_init:000000000000002c $d

NO UNDEFINED SYMBOLS
