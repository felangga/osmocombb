   1              		.file	"init.c"
   9              	.Ltext0:
  10              		.section	.rodata.str1.4,"aMS",%progbits,1
  11              		.align	2
  12              	.LC0:
  13 0000 0A0A5448 		.ascii	"\012\012THIS FIRMWARE WAS COMPILED WITHOUT TX SUPPO"
  13      49532046 
  13      49524D57 
  13      41524520 
  13      57415320 
  14 002d 52542121 		.ascii	"RT!!!\012\000"
  14      210A00
  15              		.section	.text.layer1_init,"ax",%progbits
  16              		.align	2
  17              		.global	layer1_init
  19              	layer1_init:
  20              	.LFB50:
  21              		.file 1 "layer1/init.c"
   1:layer1/init.c **** /* OsmocomBB Layer1 initialization */
   2:layer1/init.c **** 
   3:layer1/init.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/init.c ****  *
   5:layer1/init.c ****  * All Rights Reserved
   6:layer1/init.c ****  *
   7:layer1/init.c ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/init.c ****  * it under the terms of the GNU General Public License as published by
   9:layer1/init.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/init.c ****  * (at your option) any later version.
  11:layer1/init.c ****  *
  12:layer1/init.c ****  * This program is distributed in the hope that it will be useful,
  13:layer1/init.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/init.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/init.c ****  * GNU General Public License for more details.
  16:layer1/init.c ****  *
  17:layer1/init.c ****  * You should have received a copy of the GNU General Public License along
  18:layer1/init.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/init.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/init.c ****  *
  21:layer1/init.c ****  */
  22:layer1/init.c **** 
  23:layer1/init.c **** 
  24:layer1/init.c **** #include <stdint.h>
  25:layer1/init.c **** #include <stdio.h>
  26:layer1/init.c **** 
  27:layer1/init.c **** #include <rffe.h>
  28:layer1/init.c **** #include <rf/trf6151.h>
  29:layer1/init.c **** #include <abb/twl3025.h>
  30:layer1/init.c **** #include <calypso/tpu.h>
  31:layer1/init.c **** #include <calypso/tsp.h>
  32:layer1/init.c **** #include <calypso/dsp.h>
  33:layer1/init.c **** #include <calypso/irq.h>
  34:layer1/init.c **** 
  35:layer1/init.c **** #include <layer1/sync.h>
  36:layer1/init.c **** #include <layer1/async.h>
  37:layer1/init.c **** #include <layer1/l23_api.h>
  38:layer1/init.c **** 
  39:layer1/init.c **** void layer1_init(void)
  40:layer1/init.c **** {
  22              		.loc 1 40 0
  23              		@ args = 0, pretend = 0, frame = 0
  24              		@ frame_needed = 0, uses_anonymous_args = 0
  25              	.LVL0:
  26 0000 04E02DE5 		str	lr, [sp, #-4]!
  27              	.LCFI0:
  41:layer1/init.c **** #ifndef CONFIG_TX_ENABLE
  42:layer1/init.c **** 	printf("\n\nTHIS FIRMWARE WAS COMPILED WITHOUT TX SUPPORT!!!\n\n");
  28              		.loc 1 42 0
  29 0004 44009FE5 		ldr	r0, .L3
  30 0008 FEFFFFEB 		bl	puts
  43:layer1/init.c **** #endif
  44:layer1/init.c **** 
  45:layer1/init.c **** 	/* initialize asynchronous part of L1 */
  46:layer1/init.c **** 	l1a_init();
  31              		.loc 1 46 0
  32 000c FEFFFFEB 		bl	l1a_init
  47:layer1/init.c **** 	/* initialize TDMA Frame IRQ driven synchronous L1 */
  48:layer1/init.c **** 	l1s_init();
  33              		.loc 1 48 0
  34 0010 FEFFFFEB 		bl	l1s_init
  49:layer1/init.c **** 	/* power up the DSP */
  50:layer1/init.c **** 	dsp_power_on();
  35              		.loc 1 50 0
  36 0014 FEFFFFEB 		bl	dsp_power_on
  51:layer1/init.c **** 
  52:layer1/init.c **** 	/* Initialize TPU, TSP and TRF drivers */
  53:layer1/init.c **** 	tpu_init();
  37              		.loc 1 53 0
  38 0018 FEFFFFEB 		bl	tpu_init
  54:layer1/init.c **** 	tsp_init();
  39              		.loc 1 54 0
  40 001c FEFFFFEB 		bl	tsp_init
  55:layer1/init.c **** 
  56:layer1/init.c **** 	rffe_init();
  41              		.loc 1 56 0
  42 0020 FEFFFFEB 		bl	rffe_init
  43              	.LBB2:
  44              		.file 2 "include/calypso/tpu.h"
   1:include/calypso/tpu.h **** #ifndef _CALYPSO_TPU_H
   2:include/calypso/tpu.h **** #define _CALYPSO_TPU_H
   3:include/calypso/tpu.h **** 
   4:include/calypso/tpu.h **** #define BITS_PER_TDMA		1250
   5:include/calypso/tpu.h **** #define QBITS_PER_TDMA		(BITS_PER_TDMA * 4)	/* 5000 */
   6:include/calypso/tpu.h **** #define TPU_RANGE		QBITS_PER_TDMA
   7:include/calypso/tpu.h **** #define	SWITCH_TIME		(TPU_RANGE-10)
   8:include/calypso/tpu.h **** 
   9:include/calypso/tpu.h **** /* Assert or de-assert TPU reset */
  10:include/calypso/tpu.h **** void tpu_reset(int active);
  11:include/calypso/tpu.h **** /* Enable or Disable a new scenario loaded into the TPU */
  12:include/calypso/tpu.h **** void tpu_enable(int active);
  13:include/calypso/tpu.h **** /* Enable or Disable the clock of the TPU Module */
  14:include/calypso/tpu.h **** void tpu_clk_enable(int active);
  15:include/calypso/tpu.h **** /* Enable Frame Interrupt generation on next frame.  DSP will reset it */
  16:include/calypso/tpu.h **** void tpu_dsp_frameirq_enable(void);
  17:include/calypso/tpu.h **** /* Is a Frame interrupt still pending for the DSP ? */
  18:include/calypso/tpu.h **** int tpu_dsp_fameirq_pending(void);
  19:include/calypso/tpu.h **** /* Rewind the TPU, i.e. restart enqueueing instructions at the base addr */
  20:include/calypso/tpu.h **** void tpu_rewind(void);
  21:include/calypso/tpu.h **** /* Enqueue a raw TPU instruction */
  22:include/calypso/tpu.h **** void tpu_enqueue(uint16_t instr);
  23:include/calypso/tpu.h **** /* Initialize TPU and TPU driver */
  24:include/calypso/tpu.h **** void tpu_init(void);
  25:include/calypso/tpu.h **** /* (Busy)Wait until TPU is idle */
  26:include/calypso/tpu.h **** void tpu_wait_idle(void);
  27:include/calypso/tpu.h **** /* Enable FRAME interrupt generation */
  28:include/calypso/tpu.h **** void tpu_frame_irq_en(int mcu, int dsp);
  29:include/calypso/tpu.h **** /* Force the generation of a DSP interrupt */
  30:include/calypso/tpu.h **** void tpu_force_dsp_frame_irq(void);
  31:include/calypso/tpu.h **** 
  32:include/calypso/tpu.h **** /* Get the current TPU SYNCHRO register */
  33:include/calypso/tpu.h **** uint16_t tpu_get_synchro(void);
  34:include/calypso/tpu.h **** /* Get the current TPU OFFSET register */
  35:include/calypso/tpu.h **** uint16_t tpu_get_offset(void);
  36:include/calypso/tpu.h **** 
  37:include/calypso/tpu.h **** enum tpu_instr {
  38:include/calypso/tpu.h **** 	TPU_INSTR_AT		= (1 << 13),
  39:include/calypso/tpu.h **** 	TPU_INSTR_OFFSET	= (2 << 13),
  40:include/calypso/tpu.h **** 	TPU_INSTR_SYNCHRO	= (3 << 13),	/* Loading delta synchro value in TPU synchro register */
  41:include/calypso/tpu.h **** 	TPU_INSTR_WAIT		= (5 << 13),	/* Wait a certain period (in GSM qbits) */
  42:include/calypso/tpu.h **** 	TPU_INSTR_SLEEP		= (0 << 13),	/* Stop the sequencer by disabling TPU ENABLE bit in ctrl reg */
  43:include/calypso/tpu.h **** 	/* data processing */
  44:include/calypso/tpu.h **** 	TPU_INSTR_MOVE		= (4 << 13),
  45:include/calypso/tpu.h **** };
  46:include/calypso/tpu.h **** 
  47:include/calypso/tpu.h **** /* Addresses internal to the TPU, only accessible via MOVE */
  48:include/calypso/tpu.h **** enum tpu_reg_int {
  49:include/calypso/tpu.h **** 	TPUI_TSP_CTRL1	= 0x00,
  50:include/calypso/tpu.h **** 	TPUI_TSP_CTRL2	= 0x01,
  51:include/calypso/tpu.h **** 	TPUI_TX_1	= 0x04,
  52:include/calypso/tpu.h **** 	TPUI_TX_2	= 0x03,
  53:include/calypso/tpu.h **** 	TPUI_TX_3	= 0x02,
  54:include/calypso/tpu.h **** 	TPUI_TX_4	= 0x05,
  55:include/calypso/tpu.h **** 	TPUI_TSP_ACT_L	= 0x06,
  56:include/calypso/tpu.h **** 	TPUI_TSP_ACT_U	= 0x07,
  57:include/calypso/tpu.h **** 	TPUI_TSP_SET1	= 0x09,
  58:include/calypso/tpu.h **** 	TPUI_TSP_SET2	= 0x0a,
  59:include/calypso/tpu.h **** 	TPUI_TSP_SET3	= 0x0b,
  60:include/calypso/tpu.h **** 	TPUI_DSP_INT_PG	= 0x10,
  61:include/calypso/tpu.h **** 	TPUI_GAUGING_EN = 0x11,
  62:include/calypso/tpu.h **** };
  63:include/calypso/tpu.h **** 
  64:include/calypso/tpu.h **** enum tpui_ctrl2_bits {
  65:include/calypso/tpu.h **** 	TPUI_CTRL2_RD		= (1 << 0),
  66:include/calypso/tpu.h **** 	TPUI_CTRL2_WR		= (1 << 1),
  67:include/calypso/tpu.h **** };
  68:include/calypso/tpu.h **** 
  69:include/calypso/tpu.h **** static inline uint16_t tpu_mod5000(int16_t time)
  70:include/calypso/tpu.h **** {
  71:include/calypso/tpu.h **** 	if (time < 0)
  72:include/calypso/tpu.h **** 		return time + 5000;
  73:include/calypso/tpu.h **** 	if (time >= 5000)
  74:include/calypso/tpu.h **** 		return time - 5000;
  75:include/calypso/tpu.h **** 	return time;
  76:include/calypso/tpu.h **** }
  77:include/calypso/tpu.h **** 
  78:include/calypso/tpu.h **** /* Enqueue a SLEEP operation (stop sequencer by disabling TPU ENABLE bit) */
  79:include/calypso/tpu.h **** static inline void tpu_enq_sleep(void)
  80:include/calypso/tpu.h **** {
  81:include/calypso/tpu.h **** 	tpu_enqueue(TPU_INSTR_SLEEP);
  45              		.loc 2 81 0
  46 0024 0000A0E3 		mov	r0, #0
  47 0028 FEFFFFEB 		bl	tpu_enqueue
  48              	.LBE2:
  57:layer1/init.c **** 
  58:layer1/init.c **** #if 0 /* only if RX TPU window is disabled! */
  59:layer1/init.c **** 	/* Put TWL3025 in downlink mode (includes calibration) */
  60:layer1/init.c **** 	twl3025_downlink(1, 1000);
  61:layer1/init.c **** #endif
  62:layer1/init.c **** 
  63:layer1/init.c **** 	/* issue the TRF and TWL initialization sequence */
  64:layer1/init.c **** 	tpu_enq_sleep();
  65:layer1/init.c **** 	tpu_enable(1);
  49              		.loc 1 65 0
  50 002c 0100A0E3 		mov	r0, #1
  51 0030 FEFFFFEB 		bl	tpu_enable
  66:layer1/init.c **** 	tpu_wait_idle();
  52              		.loc 1 66 0
  53 0034 FEFFFFEB 		bl	tpu_wait_idle
  67:layer1/init.c **** 
  68:layer1/init.c **** 	/* Disable RTC interrupt as it causes lost TDMA frames */
  69:layer1/init.c **** 	irq_disable(IRQ_RTC_TIMER);
  54              		.loc 1 69 0
  55 0038 0900A0E3 		mov	r0, #9
  56 003c FEFFFFEB 		bl	irq_disable
  70:layer1/init.c **** 
  71:layer1/init.c **** 	/* inform l2 and upwards that we are ready for orders */
  72:layer1/init.c **** 	l1ctl_tx_reset(L1CTL_RESET_IND, L1CTL_RES_T_BOOT);
  57              		.loc 1 72 0
  58 0040 0700A0E3 		mov	r0, #7
  59 0044 0010A0E3 		mov	r1, #0
  73:layer1/init.c **** }
  60              		.loc 1 73 0
  61 0048 04E09DE4 		ldr	lr, [sp], #4
  62              		.loc 1 72 0
  63 004c FEFFFFEA 		b	l1ctl_tx_reset
  64              	.L4:
  65              		.align	2
  66              	.L3:
  67 0050 00000000 		.word	.LC0
  68              	.LFE50:
 100              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 init.c
     /tmp/cc7CiHZb.s:19     .text.layer1_init:0000000000000000 layer1_init
     /tmp/cc7CiHZb.s:26     .text.layer1_init:0000000000000000 $a
     /tmp/cc7CiHZb.s:67     .text.layer1_init:0000000000000050 $d

UNDEFINED SYMBOLS
puts
l1a_init
l1s_init
dsp_power_on
tpu_init
tsp_init
rffe_init
tpu_enqueue
tpu_enable
tpu_wait_idle
irq_disable
l1ctl_tx_reset
