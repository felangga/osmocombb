   1              		.file	"avg.c"
   9              	.Ltext0:
  10              		.section	.text.runavg_input,"ax",%progbits
  11              		.align	2
  12              		.global	runavg_input
  14              	runavg_input:
  15              	.LFB2:
  16              		.file 1 "layer1/avg.c"
   1:layer1/avg.c  **** /* Averaging Implementation */
   2:layer1/avg.c  **** 
   3:layer1/avg.c  **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/avg.c  ****  *
   5:layer1/avg.c  ****  * All Rights Reserved
   6:layer1/avg.c  ****  *
   7:layer1/avg.c  ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/avg.c  ****  * it under the terms of the GNU General Public License as published by
   9:layer1/avg.c  ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/avg.c  ****  * (at your option) any later version.
  11:layer1/avg.c  ****  *
  12:layer1/avg.c  ****  * This program is distributed in the hope that it will be useful,
  13:layer1/avg.c  ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/avg.c  ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/avg.c  ****  * GNU General Public License for more details.
  16:layer1/avg.c  ****  *
  17:layer1/avg.c  ****  * You should have received a copy of the GNU General Public License along
  18:layer1/avg.c  ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/avg.c  ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/avg.c  ****  *
  21:layer1/avg.c  ****  */
  22:layer1/avg.c  **** 
  23:layer1/avg.c  **** #include <stdint.h>
  24:layer1/avg.c  **** 
  25:layer1/avg.c  **** #include <layer1/avg.h>
  26:layer1/avg.c  **** 
  27:layer1/avg.c  **** /* input a new sample into the averaging process */
  28:layer1/avg.c  **** void runavg_input(struct running_avg *ravg, int32_t val, int valid)
  29:layer1/avg.c  **** {
  17              		.loc 1 29 0
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
  30:layer1/avg.c  **** 	ravg->num_samples++;
  22              		.loc 1 30 0
  23 0000 B830D0E1 		ldrh	r3, [r0, #8]
  31:layer1/avg.c  **** 	if (valid) {
  24              		.loc 1 31 0
  25 0004 000052E3 		cmp	r2, #0
  26              		.loc 1 30 0
  27 0008 013083E2 		add	r3, r3, #1
  28              		.loc 1 29 0
  29              		@ lr needed for prologue
  30              		.loc 1 30 0
  31 000c B830C0E1 		strh	r3, [r0, #8]	@ movhi
  32              		.loc 1 31 0
  33 0010 1EFF2F01 		bxeq	lr
  32:layer1/avg.c  **** 		ravg->acc_val += val;
  34              		.loc 1 32 0
  35 0014 042090E5 		ldr	r2, [r0, #4]
  36              	.LVL1:
  33:layer1/avg.c  **** 		ravg->num_samples_valid++;
  37              		.loc 1 33 0
  38 0018 BA30D0E1 		ldrh	r3, [r0, #10]
  39              		.loc 1 32 0
  40 001c 012082E0 		add	r2, r2, r1
  41              		.loc 1 33 0
  42 0020 013083E2 		add	r3, r3, #1
  43 0024 BA30C0E1 		strh	r3, [r0, #10]	@ movhi
  44              		.loc 1 32 0
  45 0028 042080E5 		str	r2, [r0, #4]
  46 002c 1EFF2FE1 		bx	lr
  47              	.LFE2:
  49              		.global	__divsi3
  50              		.section	.text.runavg_check_output,"ax",%progbits
  51              		.align	2
  52              		.global	runavg_check_output
  54              	runavg_check_output:
  55              	.LFB3:
  34:layer1/avg.c  **** 	}
  35:layer1/avg.c  **** }
  36:layer1/avg.c  **** 
  37:layer1/avg.c  **** /* check if sufficient samples have been obtained, and call outfn() */
  38:layer1/avg.c  **** int runavg_check_output(struct running_avg *ravg)
  39:layer1/avg.c  **** {
  56              		.loc 1 39 0
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              	.LVL2:
  60 0000 10402DE9 		stmfd	sp!, {r4, lr}
  61              	.LCFI0:
  40:layer1/avg.c  **** 	if (ravg->num_samples < ravg->period)
  62              		.loc 1 40 0
  63 0004 B820D0E1 		ldrh	r2, [r0, #8]
  64 0008 B030D0E1 		ldrh	r3, [r0, #0]
  65 000c 030052E1 		cmp	r2, r3
  66              		.loc 1 39 0
  67 0010 0040A0E1 		mov	r4, r0
  68              		.loc 1 40 0
  69 0014 1500003A 		bcc	.L6
  70              	.LVL3:
  41:layer1/avg.c  **** 		return 0;
  42:layer1/avg.c  **** 
  43:layer1/avg.c  **** 	if (ravg->num_samples_valid >= ravg->min_valid) {
  71              		.loc 1 43 0
  72 0018 BA20D0E1 		ldrh	r2, [r0, #10]
  73 001c B230D0E1 		ldrh	r3, [r0, #2]
  74 0020 020053E1 		cmp	r3, r2
  75              	.LBB2:
  44:layer1/avg.c  **** 		int32_t avg = ravg->acc_val / ravg->num_samples_valid;
  45:layer1/avg.c  **** 
  46:layer1/avg.c  **** 		ravg->outfn(ravg, avg);
  76              		.loc 1 46 0
  77 0024 0210A0E1 		mov	r1, r2
  78              	.LBE2:
  79              		.loc 1 43 0
  80 0028 1500008A 		bhi	.L6
  81              	.LVL4:
  82              	.LBB3:
  83              		.loc 1 46 0
  84 002c 040090E5 		ldr	r0, [r0, #4]
  85              	.LVL5:
  86 0030 FEFFFFEB 		bl	__divsi3
  87 0034 0010A0E1 		mov	r1, r0
  88 0038 0400A0E1 		mov	r0, r4
  89 003c 0FE0A0E1 		mov	lr, pc
  90 0040 0CF094E5 		ldr	pc, [r4, #12]
  47:layer1/avg.c  **** 
  48:layer1/avg.c  **** 		ravg->num_samples = ravg->num_samples_valid = 0;
  91              		.loc 1 48 0
  92 0044 0030A0E3 		mov	r3, #0
  49:layer1/avg.c  **** 		ravg->acc_val = 0;
  93              		.loc 1 49 0
  94 0048 0100A0E3 		mov	r0, #1
  95 004c 043084E5 		str	r3, [r4, #4]
  96              		.loc 1 48 0
  97 0050 BA30C4E1 		strh	r3, [r4, #10]	@ movhi
  98 0054 B830C4E1 		strh	r3, [r4, #8]	@ movhi
  99 0058 1080BDE8 		ldmfd	sp!, {r4, pc}
 100              	.LVL6:
 101              	.L6:
  50:layer1/avg.c  **** 
  51:layer1/avg.c  **** 		return 1;
 102              		.loc 1 51 0
 103 005c 0000A0E3 		mov	r0, #0
 104              	.LBE3:
  52:layer1/avg.c  **** 	}
  53:layer1/avg.c  **** 
  54:layer1/avg.c  **** 	return 0;
  55:layer1/avg.c  **** }
 105              		.loc 1 55 0
 106 0060 1080BDE8 		ldmfd	sp!, {r4, pc}
 107              	.LFE3:
 151              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 avg.c
     /tmp/ccQvnKFQ.s:14     .text.runavg_input:0000000000000000 runavg_input
     /tmp/ccQvnKFQ.s:23     .text.runavg_input:0000000000000000 $a
     /tmp/ccQvnKFQ.s:54     .text.runavg_check_output:0000000000000000 runavg_check_output
     /tmp/ccQvnKFQ.s:60     .text.runavg_check_output:0000000000000000 $a

UNDEFINED SYMBOLS
__divsi3
