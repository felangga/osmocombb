   1              		.file	"async.c"
   9              	.Ltext0:
  10              		.section	.text.l1a_txq_msgb_enq,"ax",%progbits
  11              		.align	2
  12              		.global	l1a_txq_msgb_enq
  14              	l1a_txq_msgb_enq:
  15              	.LFB41:
  16              		.file 1 "layer1/async.c"
   1:layer1/async.c **** /* Asynchronous part of GSM Layer 1 */
   2:layer1/async.c **** 
   3:layer1/async.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/async.c ****  *
   5:layer1/async.c ****  * All Rights Reserved
   6:layer1/async.c ****  *
   7:layer1/async.c ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/async.c ****  * it under the terms of the GNU General Public License as published by
   9:layer1/async.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/async.c ****  * (at your option) any later version.
  11:layer1/async.c ****  *
  12:layer1/async.c ****  * This program is distributed in the hope that it will be useful,
  13:layer1/async.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/async.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/async.c ****  * GNU General Public License for more details.
  16:layer1/async.c ****  *
  17:layer1/async.c ****  * You should have received a copy of the GNU General Public License along
  18:layer1/async.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/async.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/async.c ****  *
  21:layer1/async.c ****  */
  22:layer1/async.c **** 
  23:layer1/async.c **** #include <stdint.h>
  24:layer1/async.c **** 
  25:layer1/async.c **** #include <debug.h>
  26:layer1/async.c **** #include <arm.h>
  27:layer1/async.c **** #include <asm/system.h>
  28:layer1/async.c **** 
  29:layer1/async.c **** #include <osmocom/core/msgb.h>
  30:layer1/async.c **** #include <osmocom/gsm/protocol/gsm_04_08.h>
  31:layer1/async.c **** 
  32:layer1/async.c **** #include <layer1/sync.h>
  33:layer1/async.c **** #include <layer1/async.h>
  34:layer1/async.c **** #include <layer1/mframe_sched.h>
  35:layer1/async.c **** #include <layer1/sched_gsmtime.h>
  36:layer1/async.c **** #include <layer1/l23_api.h>
  37:layer1/async.c **** #include <calypso/l1_environment.h>
  38:layer1/async.c **** 
  39:layer1/async.c **** extern const struct tdma_sched_item rach_sched_set_ul[];
  40:layer1/async.c **** 
  41:layer1/async.c **** /* safely enable a message into the L1S TX queue */
  42:layer1/async.c **** void l1a_txq_msgb_enq(struct llist_head *queue, struct msgb *msg)
  43:layer1/async.c **** {
  17              		.loc 1 43 0
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              	.LVL0:
  21 0000 10402DE9 		stmfd	sp!, {r4, lr}
  22              	.LCFI0:
  23              	.LBB2:
  44:layer1/async.c **** 	unsigned long flags;
  45:layer1/async.c **** 
  46:layer1/async.c **** 	local_firq_save(flags);
  24              		.loc 1 46 0
  25 0004 00400FE1 		mrs	r4, cpsr		@ local_firq_save
  26 0008 C03084E3 		orr	r3, r4, #0xC0
  27 000c 03F021E1 		msr	cpsr_c, r3
  28              	.LVL1:
  29              	.LBE2:
  47:layer1/async.c **** 	msgb_enqueue(queue, msg);
  30              		.loc 1 47 0
  31 0010 FEFFFFEB 		bl	msgb_enqueue
  32              	.LVL2:
  48:layer1/async.c **** 	local_irq_restore(flags);
  33              		.loc 1 48 0
  34 0014 04F021E1 		msr	cpsr_c, r4		@ local_irq_restore
  35              	
  49:layer1/async.c **** }
  36              		.loc 1 49 0
  37 0018 1080BDE8 		ldmfd	sp!, {r4, pc}
  38              	.LFE41:
  40              		.section	.text.l1a_meas_msgb_set,"ax",%progbits
  41              		.align	2
  42              		.global	l1a_meas_msgb_set
  44              	l1a_meas_msgb_set:
  45              	.LFB42:
  50:layer1/async.c **** 
  51:layer1/async.c **** void l1a_meas_msgb_set(struct msgb *msg)
  52:layer1/async.c **** {
  46              		.loc 1 52 0
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              	.LVL3:
  50 0000 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
  51              	.LCFI1:
  52              		.loc 1 52 0
  53 0004 0050A0E1 		mov	r5, r0
  54              	.LBB3:
  53:layer1/async.c **** 	unsigned long flags;
  54:layer1/async.c **** 
  55:layer1/async.c **** 	local_firq_save(flags);
  55              		.loc 1 55 0
  56 0008 00400FE1 		mrs	r4, cpsr		@ local_firq_save
  57 000c C03084E3 		orr	r3, r4, #0xC0
  58 0010 03F021E1 		msr	cpsr_c, r3
  59              	.LVL4:
  60              	.LBE3:
  56:layer1/async.c **** 	if (l1s.tx_meas)
  61              		.loc 1 56 0
  62 0014 14609FE5 		ldr	r6, .L7
  63 0018 6C0A96E5 		ldr	r0, [r6, #2668]
  64              	.LVL5:
  65 001c 000050E3 		cmp	r0, #0
  57:layer1/async.c **** 		msgb_free(l1s.tx_meas);
  66              		.loc 1 57 0
  67 0020 FEFFFF1B 		blne	msgb_free
  68              	.LVL6:
  69              	.L4:
  58:layer1/async.c **** 	l1s.tx_meas = msg;
  70              		.loc 1 58 0
  71 0024 6C5A86E5 		str	r5, [r6, #2668]
  59:layer1/async.c **** 	local_irq_restore(flags);
  72              		.loc 1 59 0
  73 0028 04F021E1 		msr	cpsr_c, r4		@ local_irq_restore
  74              	
  60:layer1/async.c **** }
  75              		.loc 1 60 0
  76 002c 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
  77              	.L8:
  78              		.align	2
  79              	.L7:
  80 0030 00000000 		.word	l1s
  81              	.LFE42:
  83              		.section	.text.l1a_txq_msgb_flush,"ax",%progbits
  84              		.align	2
  85              		.global	l1a_txq_msgb_flush
  87              	l1a_txq_msgb_flush:
  88              	.LFB44:
  61:layer1/async.c **** 
  62:layer1/async.c **** /* safely count messages in the L1S TX queue */
  63:layer1/async.c **** int l1a_txq_msgb_count(struct llist_head *queue)
  64:layer1/async.c **** {
  65:layer1/async.c **** 	unsigned long flags;
  66:layer1/async.c **** 	int num = 0;
  67:layer1/async.c **** 	struct llist_head *le;
  68:layer1/async.c **** 
  69:layer1/async.c **** 	local_firq_save(flags);
  70:layer1/async.c **** 	llist_for_each(le, queue)
  71:layer1/async.c **** 		num++;
  72:layer1/async.c **** 	local_irq_restore(flags);
  73:layer1/async.c **** 
  74:layer1/async.c **** 	return num;
  75:layer1/async.c **** }
  76:layer1/async.c **** 
  77:layer1/async.c **** /* safely flush all pending msgb */
  78:layer1/async.c **** void l1a_txq_msgb_flush(struct llist_head *queue)
  79:layer1/async.c **** {
  89              		.loc 1 79 0
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              	.LVL7:
  93 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
  94              	.LCFI2:
  95              		.loc 1 79 0
  96 0004 0050A0E1 		mov	r5, r0
  97              	.LBB4:
  80:layer1/async.c **** 	struct msgb *msg;
  81:layer1/async.c **** 	unsigned long flags;
  82:layer1/async.c **** 
  83:layer1/async.c **** 	local_firq_save(flags);
  98              		.loc 1 83 0
  99 0008 00400FE1 		mrs	r4, cpsr		@ local_firq_save
 100 000c C03084E3 		orr	r3, r4, #0xC0
 101 0010 03F021E1 		msr	cpsr_c, r3
 102              	.LVL8:
 103 0014 050000EA 		b	.L10
 104              	.LVL9:
 105              	.L11:
 106              	.LBE4:
  84:layer1/async.c **** 	while ((msg = msgb_dequeue(queue)))
  85:layer1/async.c **** 		msgb_free(msg);
 107              		.loc 1 85 0
 108 0018 FEFFFFEB 		bl	msgb_free
 109              	.LVL10:
 110              	.L10:
 111              		.loc 1 84 0
 112 001c 0500A0E1 		mov	r0, r5
 113 0020 FEFFFFEB 		bl	msgb_dequeue
 114              	.LVL11:
 115 0024 000050E3 		cmp	r0, #0
 116 0028 0400001A 		bne	.L11
  86:layer1/async.c **** 	local_irq_restore(flags);
 117              		.loc 1 86 0
 118 002c 04F021E1 		msr	cpsr_c, r4		@ local_irq_restore
 119              	
  87:layer1/async.c **** }
 120              		.loc 1 87 0
 121 0030 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 122              	.LFE44:
 124              		.section	.text.l1a_mftask_enable,"ax",%progbits
 125              		.align	2
 126              		.global	l1a_mftask_enable
 128              	l1a_mftask_enable:
 129              	.LFB45:
  88:layer1/async.c **** 
  89:layer1/async.c **** /* Enable a repeating multiframe task */
  90:layer1/async.c **** void l1a_mftask_enable(enum mframe_task task)
  91:layer1/async.c **** {
 130              		.loc 1 91 0
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134              	.LVL12:
 135              		@ lr needed for prologue
  92:layer1/async.c **** 	/* we don't need locking here as L1S only reads mframe.tasks */
  93:layer1/async.c **** 	mframe_enable(task);
  94:layer1/async.c **** }
 136              		.loc 1 94 0
 137              		.loc 1 93 0
 138 0000 FEFFFFEA 		b	mframe_enable
 139              	.LVL13:
 140              	.LFE45:
 142              		.section	.text.l1a_mftask_disable,"ax",%progbits
 143              		.align	2
 144              		.global	l1a_mftask_disable
 146              	l1a_mftask_disable:
 147              	.LFB46:
  95:layer1/async.c **** 
  96:layer1/async.c **** /* Disable a repeating multiframe task */
  97:layer1/async.c **** void l1a_mftask_disable(enum mframe_task task)
  98:layer1/async.c **** {
 148              		.loc 1 98 0
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 152              	.LVL14:
 153              		@ lr needed for prologue
  99:layer1/async.c **** 	/* we don't need locking here as L1S only reads mframe.tasks */
 100:layer1/async.c **** 	mframe_disable(task);
 101:layer1/async.c **** }
 154              		.loc 1 101 0
 155              		.loc 1 100 0
 156 0000 FEFFFFEA 		b	mframe_disable
 157              	.LVL15:
 158              	.LFE46:
 160              		.section	.text.l1a_mftask_set,"ax",%progbits
 161              		.align	2
 162              		.global	l1a_mftask_set
 164              	l1a_mftask_set:
 165              	.LFB47:
 102:layer1/async.c **** 
 103:layer1/async.c **** /* Set the mask for repeating multiframe tasks */
 104:layer1/async.c **** void l1a_mftask_set(uint32_t tasks)
 105:layer1/async.c **** {
 166              		.loc 1 105 0
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 170              	.LVL16:
 171              		@ lr needed for prologue
 106:layer1/async.c **** 	/* we don't need locking here as L1S only reads mframe.tasks */
 107:layer1/async.c **** 	mframe_set(tasks);
 108:layer1/async.c **** }
 172              		.loc 1 108 0
 173              		.loc 1 107 0
 174 0000 FEFFFFEA 		b	mframe_set
 175              	.LVL17:
 176              	.LFE47:
 178              		.section	.text.l1a_tch_mode_set,"ax",%progbits
 179              		.align	2
 180              		.global	l1a_tch_mode_set
 182              	l1a_tch_mode_set:
 183              	.LFB48:
 109:layer1/async.c **** 
 110:layer1/async.c **** /* Set TCH mode */
 111:layer1/async.c **** uint8_t l1a_tch_mode_set(uint8_t mode)
 112:layer1/async.c **** {
 184              		.loc 1 112 0
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188              	.LVL18:
 189 0000 FF0000E2 		and	r0, r0, #255
 113:layer1/async.c **** 	switch (mode) {
 190              		.loc 1 113 0
 191 0004 010050E3 		cmp	r0, #1
 192              		.loc 1 112 0
 193              		@ lr needed for prologue
 194              		.loc 1 113 0
 195 0008 0300000A 		beq	.L22
 196 000c 210050E3 		cmp	r0, #33
 197 0010 0600001A 		bne	.L21
 198              	.L22:
 114:layer1/async.c **** 	case GSM48_CMODE_SPEECH_V1:
 115:layer1/async.c **** 	case GSM48_CMODE_SPEECH_EFR:
 116:layer1/async.c **** 		l1s.tch_mode = mode;
 199              		.loc 1 116 0
 200 0014 1C309FE5 		ldr	r3, .L25
 201 0018 4A0AC3E5 		strb	r0, [r3, #2634]
 202 001c 090000EA 		b	.L23
 203              	.L21:
 117:layer1/async.c **** 		break;
 118:layer1/async.c **** 	default:
 119:layer1/async.c **** 		l1s.tch_mode = GSM48_CMODE_SIGN;
 204              		.loc 1 119 0
 205 0020 10309FE5 		ldr	r3, .L25
 206 0024 0020A0E3 		mov	r2, #0
 207 0028 4A2AC3E5 		strb	r2, [r3, #2634]
 208              	.L23:
 120:layer1/async.c **** 	}
 121:layer1/async.c **** 
 122:layer1/async.c **** 	return l1s.tch_mode;
 123:layer1/async.c **** }
 209              		.loc 1 123 0
 210 002c 04309FE5 		ldr	r3, .L25
 211 0030 4A0AD3E5 		ldrb	r0, [r3, #2634]	@ zero_extendqisi2
 212              	.LVL19:
 213 0034 1EFF2FE1 		bx	lr
 214              	.L26:
 215              		.align	2
 216              	.L25:
 217 0038 00000000 		.word	l1s
 218              	.LFE48:
 220              		.section	.text.l1a_audio_mode_set,"ax",%progbits
 221              		.align	2
 222              		.global	l1a_audio_mode_set
 224              	l1a_audio_mode_set:
 225              	.LFB49:
 124:layer1/async.c **** 
 125:layer1/async.c **** /* Set Audio routing mode */
 126:layer1/async.c **** uint8_t l1a_audio_mode_set(uint8_t mode)
 127:layer1/async.c **** {
 226              		.loc 1 127 0
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230              	.LVL20:
 128:layer1/async.c **** 	l1s.audio_mode = mode;
 231              		.loc 1 128 0
 232 0000 08309FE5 		ldr	r3, .L29
 233              		.loc 1 127 0
 234 0004 FF0000E2 		and	r0, r0, #255
 235              		@ lr needed for prologue
 236              		.loc 1 128 0
 237 0008 4C0AC3E5 		strb	r0, [r3, #2636]
 238              	.LVL21:
 129:layer1/async.c **** 	return mode;
 130:layer1/async.c **** }
 239              		.loc 1 130 0
 240 000c 1EFF2FE1 		bx	lr
 241              	.L30:
 242              		.align	2
 243              	.L29:
 244 0010 00000000 		.word	l1s
 245              	.LFE49:
 247              		.section	.text.l1a_init,"ax",%progbits
 248              		.align	2
 249              		.global	l1a_init
 251              	l1a_init:
 252              	.LFB50:
 131:layer1/async.c **** 
 132:layer1/async.c **** /* Initialize asynchronous part of Layer1 */
 133:layer1/async.c **** void l1a_init(void)
 134:layer1/async.c **** {
 253              		.loc 1 134 0
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 257              	.LVL22:
 258              		@ lr needed for prologue
 135:layer1/async.c **** 	l1a_l23api_init();
 136:layer1/async.c **** }
 259              		.loc 1 136 0
 260              		.loc 1 135 0
 261 0000 FEFFFFEA 		b	l1a_l23api_init
 262              	.LFE50:
 264              		.section	.text.l1a_compl_execute,"ax",%progbits
 265              		.align	2
 266              		.global	l1a_compl_execute
 268              	l1a_compl_execute:
 269              	.LFB51:
 137:layer1/async.c **** 
 138:layer1/async.c **** /* Execute pending L1A completions */
 139:layer1/async.c **** void l1a_compl_execute(void)
 140:layer1/async.c **** {
 270              		.loc 1 140 0
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              	.LVL23:
 274 0000 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 275              	.LCFI3:
 276              	.LBB5:
 141:layer1/async.c **** 	unsigned long flags;
 142:layer1/async.c **** 	unsigned int scheduled;
 143:layer1/async.c **** 	unsigned int i;
 144:layer1/async.c **** 
 145:layer1/async.c **** 	/* get and reset the currently scheduled tasks */
 146:layer1/async.c **** 	local_firq_save(flags);
 277              		.loc 1 146 0
 278 0004 00200FE1 		mrs	r2, cpsr		@ local_firq_save
 279 0008 C03082E3 		orr	r3, r2, #0xC0
 280 000c 03F021E1 		msr	cpsr_c, r3
 281              	.LVL24:
 282              	.LBE5:
 147:layer1/async.c **** 	scheduled = l1s.scheduled_compl;
 283              		.loc 1 147 0
 284 0010 3C309FE5 		ldr	r3, .L41
 285              	.LVL25:
 148:layer1/async.c **** 	l1s.scheduled_compl = 0;
 286              		.loc 1 148 0
 287 0014 0010A0E3 		mov	r1, #0
 288              		.loc 1 147 0
 289 0018 706A93E5 		ldr	r6, [r3, #2672]
 290              	.LVL26:
 291              		.loc 1 148 0
 292 001c 701A83E5 		str	r1, [r3, #2672]
 149:layer1/async.c **** 	local_irq_restore(flags);
 293              		.loc 1 149 0
 294 0020 02F021E1 		msr	cpsr_c, r2		@ local_irq_restore
 295              	
 296 0024 2C509FE5 		ldr	r5, .L41+4
 297 0028 0140A0E1 		mov	r4, r1
 298              	.LVL27:
 299              	.LVL28:
 300              	.L34:
 150:layer1/async.c **** 
 151:layer1/async.c **** 	/* Iterate over list of scheduled completions, call their
 152:layer1/async.c **** 	 * respective completion handler */
 153:layer1/async.c **** 	for (i = 0; i < 32; i++) {
 154:layer1/async.c **** 		if (!(scheduled & (1 << i)))
 301              		.loc 1 154 0
 302 002c 0130A0E3 		mov	r3, #1
 303 0030 133416E0 		ands	r3, r6, r3, asl r4
 155:layer1/async.c **** 			continue;
 156:layer1/async.c **** 		/* call completion function */
 157:layer1/async.c **** 		l1s.completion[i](i);
 304              		.loc 1 157 0
 305 0034 0400A0E1 		mov	r0, r4
 306              		.loc 1 153 0
 307 0038 014084E2 		add	r4, r4, #1
 308              		.loc 1 154 0
 309              		.loc 1 157 0
 310 003c 0FE0A011 		movne	lr, pc
 311 0040 00F09515 		ldrne	pc, [r5, #0]
 312              	.LVL29:
 313              	.L35:
 314              		.loc 1 153 0
 315 0044 200054E3 		cmp	r4, #32
 316 0048 045085E2 		add	r5, r5, #4
 317 004c 0900001A 		bne	.L34
 158:layer1/async.c **** 	}
 159:layer1/async.c **** }
 318              		.loc 1 159 0
 319 0050 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 320              	.L42:
 321              		.align	2
 322              	.L41:
 323 0054 00000000 		.word	l1s
 324 0058 740A0000 		.word	l1s+2676
 325              	.LFE51:
 327              		.section	.text.l1a_txq_msgb_count,"ax",%progbits
 328              		.align	2
 329              		.global	l1a_txq_msgb_count
 331              	l1a_txq_msgb_count:
 332              	.LFB43:
 333              		.loc 1 64 0
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 337              	.LVL30:
 338              		@ lr needed for prologue
 339              		.loc 1 64 0
 340 0000 0010A0E1 		mov	r1, r0
 341              	.LBB6:
 342              		.loc 1 69 0
 343 0004 00200FE1 		mrs	r2, cpsr		@ local_firq_save
 344 0008 C03082E3 		orr	r3, r2, #0xC0
 345 000c 03F021E1 		msr	cpsr_c, r3
 346              	.LVL31:
 347              	.LBE6:
 348              		.loc 1 70 0
 349 0010 003090E5 		ldr	r3, [r0, #0]
 350              	.LVL32:
 351 0014 0000A0E3 		mov	r0, #0
 352              	.LVL33:
 353 0018 070000EA 		b	.L44
 354              	.L45:
 355 001c 003093E5 		ldr	r3, [r3, #0]
 356              		.loc 1 71 0
 357 0020 010080E2 		add	r0, r0, #1
 358              	.L44:
 359              		.loc 1 70 0
 360 0024 010053E1 		cmp	r3, r1
 361 0028 0500001A 		bne	.L45
 362              		.loc 1 72 0
 363 002c 02F021E1 		msr	cpsr_c, r2		@ local_irq_restore
 364              	
 365              	.LVL34:
 366              		.loc 1 75 0
 367 0030 1EFF2FE1 		bx	lr
 368              	.LFE43:
 524              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 async.c
     /tmp/ccxChOgx.s:14     .text.l1a_txq_msgb_enq:0000000000000000 l1a_txq_msgb_enq
     /tmp/ccxChOgx.s:21     .text.l1a_txq_msgb_enq:0000000000000000 $a
     /tmp/ccxChOgx.s:44     .text.l1a_meas_msgb_set:0000000000000000 l1a_meas_msgb_set
     /tmp/ccxChOgx.s:50     .text.l1a_meas_msgb_set:0000000000000000 $a
     /tmp/ccxChOgx.s:80     .text.l1a_meas_msgb_set:0000000000000030 $d
     /tmp/ccxChOgx.s:87     .text.l1a_txq_msgb_flush:0000000000000000 l1a_txq_msgb_flush
     /tmp/ccxChOgx.s:93     .text.l1a_txq_msgb_flush:0000000000000000 $a
     /tmp/ccxChOgx.s:128    .text.l1a_mftask_enable:0000000000000000 l1a_mftask_enable
     /tmp/ccxChOgx.s:138    .text.l1a_mftask_enable:0000000000000000 $a
     /tmp/ccxChOgx.s:146    .text.l1a_mftask_disable:0000000000000000 l1a_mftask_disable
     /tmp/ccxChOgx.s:156    .text.l1a_mftask_disable:0000000000000000 $a
     /tmp/ccxChOgx.s:164    .text.l1a_mftask_set:0000000000000000 l1a_mftask_set
     /tmp/ccxChOgx.s:174    .text.l1a_mftask_set:0000000000000000 $a
     /tmp/ccxChOgx.s:182    .text.l1a_tch_mode_set:0000000000000000 l1a_tch_mode_set
     /tmp/ccxChOgx.s:189    .text.l1a_tch_mode_set:0000000000000000 $a
     /tmp/ccxChOgx.s:217    .text.l1a_tch_mode_set:0000000000000038 $d
     /tmp/ccxChOgx.s:224    .text.l1a_audio_mode_set:0000000000000000 l1a_audio_mode_set
     /tmp/ccxChOgx.s:232    .text.l1a_audio_mode_set:0000000000000000 $a
     /tmp/ccxChOgx.s:244    .text.l1a_audio_mode_set:0000000000000010 $d
     /tmp/ccxChOgx.s:251    .text.l1a_init:0000000000000000 l1a_init
     /tmp/ccxChOgx.s:261    .text.l1a_init:0000000000000000 $a
     /tmp/ccxChOgx.s:268    .text.l1a_compl_execute:0000000000000000 l1a_compl_execute
     /tmp/ccxChOgx.s:274    .text.l1a_compl_execute:0000000000000000 $a
     /tmp/ccxChOgx.s:323    .text.l1a_compl_execute:0000000000000054 $d
     /tmp/ccxChOgx.s:331    .text.l1a_txq_msgb_count:0000000000000000 l1a_txq_msgb_count
     /tmp/ccxChOgx.s:340    .text.l1a_txq_msgb_count:0000000000000000 $a

UNDEFINED SYMBOLS
msgb_enqueue
msgb_free
l1s
msgb_dequeue
mframe_enable
mframe_disable
mframe_set
l1a_l23api_init
