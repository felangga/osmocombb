   1              		.file	"sched_gsmtime.c"
   9              	.Ltext0:
  10              		.data
  11              		.align	2
  14              	inactive_evts:
  15 0000 00000000 		.word	inactive_evts
  16 0004 00000000 		.word	inactive_evts
  17              		.align	2
  20              	active_evts:
  21 0008 08000000 		.word	active_evts
  22 000c 08000000 		.word	active_evts
  23              		.section	.text.llist_add,"ax",%progbits
  24              		.align	2
  26              	llist_add:
  27              	.LFB4:
  28              		.file 1 "../../shared/libosmocore/include/osmocom/core/linuxlist.h"
   1:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #ifndef _LINUX_LLIST_H
   2:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define _LINUX_LLIST_H
   3:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
   4:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #include <stddef.h>
   5:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
   6:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #ifndef inline
   7:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define inline __inline__
   8:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #endif
   9:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  10:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void prefetch(__attribute__((unused)) const void *x) {;}
  11:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  12:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
  13:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * container_of - cast a member of a structure out to the containing structure
  14:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  15:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @ptr:	the pointer to the member.
  16:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @type:	the type of the container struct this is embedded in.
  17:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @member:	the name of the member within the struct.
  18:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  19:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  20:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define container_of(ptr, type, member) ({			\
  21:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         const typeof( ((type *)0)->member ) *__mptr = (typeof( ((type *)0)->member ) *)(ptr);	\
  22:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         (type *)( (char *)__mptr - offsetof(type, member) );})
  23:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  24:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  25:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  26:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * These are non-NULL pointers that will result in page faults
  27:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * under normal circumstances, used to verify that nobody uses
  28:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * non-initialized llist entries.
  29:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  30:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_POISON1  ((void *) 0x00100100)
  31:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_POISON2  ((void *) 0x00200200)
  32:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  33:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  34:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Simple doubly linked llist implementation.
  35:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  36:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Some of the internal functions ("__xxx") are useful when
  37:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * manipulating whole llists rather than single entries, as
  38:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * sometimes we already know the next/prev entries and we can
  39:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * generate better code by using them directly rather than
  40:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * using the generic single-entry routines.
  41:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  42:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  43:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** struct llist_head {
  44:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	struct llist_head *next, *prev;
  45:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** };
  46:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  47:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_HEAD_INIT(name) { &(name), &(name) }
  48:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  49:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_HEAD(name) \
  50:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	struct llist_head name = LLIST_HEAD_INIT(name)
  51:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  52:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define INIT_LLIST_HEAD(ptr) do { \
  53:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	(ptr)->next = (ptr); (ptr)->prev = (ptr); \
  54:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** } while (0)
  55:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  56:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  57:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Insert a new entry between two known consecutive entries. 
  58:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  59:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is only for internal llist manipulation where we know
  60:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * the prev/next entries already!
  61:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  62:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void __llist_add(struct llist_head *_new,
  63:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 			      struct llist_head *prev,
  64:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 			      struct llist_head *next)
  65:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
  66:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = _new;
  67:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->next = next;
  68:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->prev = prev;
  69:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = _new;
  70:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
  71:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  72:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
  73:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_add - add a new entry
  74:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @new: new entry to be added
  75:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: llist head to add it after
  76:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  77:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Insert a new entry after the specified head.
  78:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is good for implementing stacks.
  79:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  80:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_add(struct llist_head *_new, struct llist_head *head)
  81:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
  29              		.loc 1 81 0
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  82:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head, head->next);
  34              		.loc 1 82 0
  35 0000 003091E5 		ldr	r3, [r1, #0]
  36              	.LVL1:
  37              		.loc 1 81 0
  38              		@ lr needed for prologue
  39              	.LBB2:
  40              		.loc 1 67 0
  41 0004 003080E5 		str	r3, [r0, #0]
  42              		.loc 1 66 0
  43 0008 040083E5 		str	r0, [r3, #4]
  44              		.loc 1 69 0
  45 000c 000081E5 		str	r0, [r1, #0]
  46              		.loc 1 68 0
  47 0010 041080E5 		str	r1, [r0, #4]
  48              	.LBE2:
  83:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
  49              		.loc 1 83 0
  50 0014 1EFF2FE1 		bx	lr
  51              	.LFE4:
  53              		.section	.text.llist_del,"ax",%progbits
  54              		.align	2
  56              	llist_del:
  57              	.LFB7:
  84:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  85:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
  86:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_add_tail - add a new entry
  87:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @new: new entry to be added
  88:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: llist head to add it before
  89:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  90:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Insert a new entry before the specified head.
  91:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is useful for implementing queues.
  92:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  93:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_add_tail(struct llist_head *_new, struct llist_head *head)
  94:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
  95:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head->prev, head);
  96:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
  97:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  98:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  99:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Delete a llist entry by making the prev/next entries
 100:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * point to each other.
 101:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
 102:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is only for internal llist manipulation where we know
 103:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * the prev/next entries already!
 104:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 105:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void __llist_del(struct llist_head * prev, struct llist_head * next)
 106:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 107:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = prev;
 108:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = next;
 109:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
 110:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 111:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 112:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_del - deletes entry from llist.
 113:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @entry: the element to delete from the llist.
 114:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Note: llist_empty on entry does not return true after this, the entry is
 115:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * in an undefined state.
 116:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 117:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_del(struct llist_head *entry)
 118:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
  58              		.loc 1 118 0
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62              	.LVL2:
 119:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_del(entry->prev, entry->next);
  63              		.loc 1 119 0
  64 0000 041090E5 		ldr	r1, [r0, #4]
  65              	.LVL3:
  66 0004 002090E5 		ldr	r2, [r0, #0]
  67              	.LVL4:
 120:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	entry->next = (struct llist_head *)LLIST_POISON1;
  68              		.loc 1 120 0
  69 0008 14309FE5 		ldr	r3, .L5
  70              	.LBB3:
  71              		.loc 1 108 0
  72 000c 002081E5 		str	r2, [r1, #0]
  73              	.LBE3:
  74              		.loc 1 120 0
  75 0010 003080E5 		str	r3, [r0, #0]
 121:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	entry->prev = (struct llist_head *)LLIST_POISON2;
  76              		.loc 1 121 0
  77 0014 0C309FE5 		ldr	r3, .L5+4
  78              	.LBB4:
  79              		.loc 1 107 0
  80 0018 041082E5 		str	r1, [r2, #4]
  81              	.LBE4:
  82              		.loc 1 118 0
  83              		@ lr needed for prologue
  84              		.loc 1 121 0
  85 001c 043080E5 		str	r3, [r0, #4]
 122:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
  86              		.loc 1 122 0
  87 0020 1EFF2FE1 		bx	lr
  88              	.L6:
  89              		.align	2
  90              	.L5:
  91 0024 00011000 		.word	1048832
  92 0028 00022000 		.word	2097664
  93              	.LFE7:
  95              		.section	.text.sched_gsmtime_execute,"ax",%progbits
  96              		.align	2
  97              		.global	sched_gsmtime_execute
  99              	sched_gsmtime_execute:
 100              	.LFB16:
 101              		.file 2 "layer1/sched_gsmtime.c"
   1:layer1/sched_gsmtime.c **** /* GSM-Time One-shot Event Scheduler Implementation (on top of TDMA sched) */
   2:layer1/sched_gsmtime.c **** 
   3:layer1/sched_gsmtime.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/sched_gsmtime.c ****  *
   5:layer1/sched_gsmtime.c ****  * All Rights Reserved
   6:layer1/sched_gsmtime.c ****  *
   7:layer1/sched_gsmtime.c ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/sched_gsmtime.c ****  * it under the terms of the GNU General Public License as published by
   9:layer1/sched_gsmtime.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/sched_gsmtime.c ****  * (at your option) any later version.
  11:layer1/sched_gsmtime.c ****  *
  12:layer1/sched_gsmtime.c ****  * This program is distributed in the hope that it will be useful,
  13:layer1/sched_gsmtime.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/sched_gsmtime.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/sched_gsmtime.c ****  * GNU General Public License for more details.
  16:layer1/sched_gsmtime.c ****  *
  17:layer1/sched_gsmtime.c ****  * You should have received a copy of the GNU General Public License along
  18:layer1/sched_gsmtime.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/sched_gsmtime.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/sched_gsmtime.c ****  *
  21:layer1/sched_gsmtime.c ****  */
  22:layer1/sched_gsmtime.c **** 
  23:layer1/sched_gsmtime.c **** #include <stdint.h>
  24:layer1/sched_gsmtime.c **** #include <errno.h>
  25:layer1/sched_gsmtime.c **** 
  26:layer1/sched_gsmtime.c **** #include <debug.h>
  27:layer1/sched_gsmtime.c **** #include <osmocom/core/linuxlist.h>
  28:layer1/sched_gsmtime.c **** 
  29:layer1/sched_gsmtime.c **** #include <layer1/tdma_sched.h>
  30:layer1/sched_gsmtime.c **** #include <layer1/sched_gsmtime.h>
  31:layer1/sched_gsmtime.c **** 
  32:layer1/sched_gsmtime.c **** static struct sched_gsmtime_event sched_gsmtime_events[16];
  33:layer1/sched_gsmtime.c **** static LLIST_HEAD(active_evts);
  34:layer1/sched_gsmtime.c **** static LLIST_HEAD(inactive_evts);
  35:layer1/sched_gsmtime.c **** 
  36:layer1/sched_gsmtime.c **** /* Scheduling of a tdma_sched_item list one-shot at a given GSM time */
  37:layer1/sched_gsmtime.c **** int sched_gsmtime(const struct tdma_sched_item *si, uint32_t fn, uint16_t p3)
  38:layer1/sched_gsmtime.c **** {
  39:layer1/sched_gsmtime.c **** 	struct llist_head *lh;
  40:layer1/sched_gsmtime.c **** 	struct sched_gsmtime_event *evt, *cur;
  41:layer1/sched_gsmtime.c **** 
  42:layer1/sched_gsmtime.c **** 	printd("sched_gsmtime(si=%p, fn=%u)\n", si, fn);
  43:layer1/sched_gsmtime.c **** 
  44:layer1/sched_gsmtime.c **** 	/* obtain a free/inactive event structure */
  45:layer1/sched_gsmtime.c **** 	if (llist_empty(&inactive_evts))
  46:layer1/sched_gsmtime.c **** 		return -EBUSY;
  47:layer1/sched_gsmtime.c **** 	lh = inactive_evts.next;
  48:layer1/sched_gsmtime.c **** 	llist_del(lh);
  49:layer1/sched_gsmtime.c **** 	evt = llist_entry(lh, struct sched_gsmtime_event, list);
  50:layer1/sched_gsmtime.c **** 
  51:layer1/sched_gsmtime.c **** 	evt->fn = fn;
  52:layer1/sched_gsmtime.c **** 	evt->si = si;
  53:layer1/sched_gsmtime.c **** 	evt->p3 = p3;
  54:layer1/sched_gsmtime.c **** 
  55:layer1/sched_gsmtime.c **** 	/* do a sorted insert into the list, i.e. insert the new
  56:layer1/sched_gsmtime.c **** 	 * event _before_ the first entry that has a higher fn */
  57:layer1/sched_gsmtime.c **** 	llist_for_each_entry(cur, &active_evts, list) {
  58:layer1/sched_gsmtime.c **** 		if (cur->fn > evt->fn) {
  59:layer1/sched_gsmtime.c **** 			llist_add_tail(lh, &cur->list);
  60:layer1/sched_gsmtime.c **** 			return 0;
  61:layer1/sched_gsmtime.c **** 		}
  62:layer1/sched_gsmtime.c **** 	}
  63:layer1/sched_gsmtime.c **** 
  64:layer1/sched_gsmtime.c **** 	/* if we reach here, active_evts is empty _OR_ new event
  65:layer1/sched_gsmtime.c **** 	 * is after all the other events: append at end of list */
  66:layer1/sched_gsmtime.c **** 	llist_add_tail(lh, &active_evts);
  67:layer1/sched_gsmtime.c **** 
  68:layer1/sched_gsmtime.c **** 	return 0;
  69:layer1/sched_gsmtime.c **** }
  70:layer1/sched_gsmtime.c **** 
  71:layer1/sched_gsmtime.c **** /* how many TDMA frame ticks should we schedule events ahead? */
  72:layer1/sched_gsmtime.c **** #define SCHEDULE_AHEAD	2
  73:layer1/sched_gsmtime.c **** 
  74:layer1/sched_gsmtime.c **** /* how long do we need to tell the DSP in advance what we want to do? */
  75:layer1/sched_gsmtime.c **** #define SCHEDULE_LATENCY	1
  76:layer1/sched_gsmtime.c **** 
  77:layer1/sched_gsmtime.c **** /* execute all GSMTIME one-shot events pending for 'fn' */
  78:layer1/sched_gsmtime.c **** int sched_gsmtime_execute(uint32_t fn)
  79:layer1/sched_gsmtime.c **** {
 102              		.loc 2 79 0
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              	.LVL5:
 106 0000 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 107              	.LCFI0:
 108              	.LBB5:
  80:layer1/sched_gsmtime.c **** 	struct sched_gsmtime_event *evt, *evt2;
  81:layer1/sched_gsmtime.c **** 	int num = 0;
  82:layer1/sched_gsmtime.c **** 
  83:layer1/sched_gsmtime.c **** 	llist_for_each_entry_safe(evt, evt2, &active_evts, list) {
 109              		.loc 2 83 0
 110 0004 70309FE5 		ldr	r3, .L15
 111 0008 004093E5 		ldr	r4, [r3, #0]
 112              	.LVL6:
 113              	.LBE5:
 114              	.LBB6:
 115 000c 005094E5 		ldr	r5, [r4, #0]
 116              	.LVL7:
 117              	.LBE6:
 118              		.loc 2 79 0
 119 0010 0080A0E1 		mov	r8, r0
 120              	.LBB7:
 121              		.loc 2 83 0
 122 0014 0070A0E3 		mov	r7, #0
 123              	.LVL8:
 124 0018 160000EA 		b	.L8
 125              	.LVL9:
 126              	.L9:
 127              	.LBE7:
  84:layer1/sched_gsmtime.c **** 		if (evt->fn == fn + SCHEDULE_AHEAD) {
 128              		.loc 2 84 0
 129 001c 0C3094E5 		ldr	r3, [r4, #12]
 130 0020 060053E1 		cmp	r3, r6
 131 0024 1100001A 		bne	.L10
  85:layer1/sched_gsmtime.c **** 			printd("sched_gsmtime_execute(time=%u): fn=%u si=%p\n", fn, evt->fn, evt->si);
  86:layer1/sched_gsmtime.c **** 			tdma_schedule_set(SCHEDULE_AHEAD-SCHEDULE_LATENCY,
 132              		.loc 2 86 0
 133 0028 081094E5 		ldr	r1, [r4, #8]
 134 002c B021D4E1 		ldrh	r2, [r4, #16]
 135 0030 FEFFFFEB 		bl	tdma_schedule_set
  87:layer1/sched_gsmtime.c **** 					  evt->si, evt->p3);
  88:layer1/sched_gsmtime.c **** 			llist_del(&evt->list);
 136              		.loc 2 88 0
 137 0034 0400A0E1 		mov	r0, r4
 138 0038 FEFFFFEB 		bl	llist_del
  89:layer1/sched_gsmtime.c **** 			/* put event back in list of inactive (free) events */
  90:layer1/sched_gsmtime.c **** 			llist_add(&evt->list, &inactive_evts);
 139              		.loc 2 90 0
 140 003c 0400A0E1 		mov	r0, r4
 141 0040 38109FE5 		ldr	r1, .L15+4
  91:layer1/sched_gsmtime.c **** 			num++;
 142              		.loc 2 91 0
 143 0044 017087E2 		add	r7, r7, #1
 144              		.loc 2 90 0
 145 0048 FEFFFFEB 		bl	llist_add
 146              	.L10:
  92:layer1/sched_gsmtime.c **** 		} if (evt->fn > fn + SCHEDULE_AHEAD) {
 147              		.loc 2 92 0
 148 004c 0C3094E5 		ldr	r3, [r4, #12]
 149 0050 060053E1 		cmp	r3, r6
 150              	.LBB8:
 151              		.loc 2 83 0
 152 0054 0540A0E1 		mov	r4, r5
 153              	.LBE8:
 154              		.loc 2 92 0
 155 0058 1B00008A 		bhi	.L12
 156              	.LBB9:
 157              		.loc 2 83 0
 158 005c 005095E5 		ldr	r5, [r5, #0]
 159              	.LVL10:
 160              	.L8:
 161              	.LBE9:
 162 0060 14309FE5 		ldr	r3, .L15
 163 0064 030054E1 		cmp	r4, r3
 164              		.loc 2 86 0
 165 0068 0100A0E3 		mov	r0, #1
 166              		.loc 2 84 0
 167 006c 026088E2 		add	r6, r8, #2
 168              		.loc 2 83 0
 169 0070 0500001A 		bne	.L9
 170              	.L12:
  93:layer1/sched_gsmtime.c **** 			/* break the loop as our list is ordered */
  94:layer1/sched_gsmtime.c **** 			break;
  95:layer1/sched_gsmtime.c **** 		}
  96:layer1/sched_gsmtime.c **** 	}
  97:layer1/sched_gsmtime.c **** 	return num;
  98:layer1/sched_gsmtime.c **** }
 171              		.loc 2 98 0
 172 0074 0700A0E1 		mov	r0, r7
 173 0078 F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
 174              	.L16:
 175              		.align	2
 176              	.L15:
 177 007c 08000000 		.word	active_evts
 178 0080 00000000 		.word	inactive_evts
 179              	.LFE16:
 181              		.section	.text.sched_gsmtime_init,"ax",%progbits
 182              		.align	2
 183              		.global	sched_gsmtime_init
 185              	sched_gsmtime_init:
 186              	.LFB17:
  99:layer1/sched_gsmtime.c **** 
 100:layer1/sched_gsmtime.c **** void sched_gsmtime_init(void)
 101:layer1/sched_gsmtime.c **** {
 187              		.loc 2 101 0
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              	.LVL11:
 191 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 192              	.LCFI1:
 193 0004 20509FE5 		ldr	r5, .L23
 194              		.loc 2 101 0
 195 0008 0040A0E3 		mov	r4, #0
 196              	.LVL12:
 197              	.L18:
 102:layer1/sched_gsmtime.c **** 	unsigned int i;
 103:layer1/sched_gsmtime.c **** 
 104:layer1/sched_gsmtime.c **** 	printd("sched_gsmtime_init()\n");
 105:layer1/sched_gsmtime.c **** 
 106:layer1/sched_gsmtime.c **** 	for (i = 0; i < ARRAY_SIZE(sched_gsmtime_events); i++)
 107:layer1/sched_gsmtime.c **** 		llist_add(&sched_gsmtime_events[i].list, &inactive_evts);
 198              		.loc 2 107 0
 199 000c 0500A0E1 		mov	r0, r5
 200              		.loc 2 106 0
 201 0010 014084E2 		add	r4, r4, #1
 202              		.loc 2 107 0
 203 0014 14109FE5 		ldr	r1, .L23+4
 204 0018 FEFFFFEB 		bl	llist_add
 205              		.loc 2 106 0
 206 001c 100054E3 		cmp	r4, #16
 207 0020 145085E2 		add	r5, r5, #20
 208 0024 0100001A 		bne	.L18
 108:layer1/sched_gsmtime.c **** }
 209              		.loc 2 108 0
 210 0028 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 211              	.L24:
 212              		.align	2
 213              	.L23:
 214 002c 00000000 		.word	sched_gsmtime_events
 215 0030 00000000 		.word	inactive_evts
 216              	.LFE17:
 218              		.section	.text.sched_gsmtime_reset,"ax",%progbits
 219              		.align	2
 220              		.global	sched_gsmtime_reset
 222              	sched_gsmtime_reset:
 223              	.LFB18:
 109:layer1/sched_gsmtime.c **** 
 110:layer1/sched_gsmtime.c **** void sched_gsmtime_reset(void)
 111:layer1/sched_gsmtime.c **** {
 224              		.loc 2 111 0
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              	.LVL13:
 228 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 229              	.LCFI2:
 230              	.LBB10:
 112:layer1/sched_gsmtime.c **** 	struct sched_gsmtime_event *evt, *evt2;
 113:layer1/sched_gsmtime.c **** 
 114:layer1/sched_gsmtime.c **** 	llist_for_each_entry_safe(evt, evt2, &active_evts, list) {
 231              		.loc 2 114 0
 232 0004 34309FE5 		ldr	r3, .L30
 233 0008 004093E5 		ldr	r4, [r3, #0]
 234              	.LVL14:
 235              	.LBE10:
 236              	.LBB11:
 237 000c 005094E5 		ldr	r5, [r4, #0]
 238              	.LVL15:
 239 0010 090000EA 		b	.L26
 240              	.L27:
 241              	.LBE11:
 115:layer1/sched_gsmtime.c **** 		llist_del(&evt->list);
 242              		.loc 2 115 0
 243 0014 FEFFFFEB 		bl	llist_del
 116:layer1/sched_gsmtime.c **** 		/* put event back in list of inactive (free) events */
 117:layer1/sched_gsmtime.c **** 		llist_add(&evt->list, &inactive_evts);
 244              		.loc 2 117 0
 245 0018 0400A0E1 		mov	r0, r4
 246 001c 20109FE5 		ldr	r1, .L30+4
 247 0020 FEFFFFEB 		bl	llist_add
 248              	.LBB12:
 249              		.loc 2 114 0
 250 0024 0540A0E1 		mov	r4, r5
 251 0028 005095E5 		ldr	r5, [r5, #0]
 252              	.L26:
 253              	.LBE12:
 254 002c 0C309FE5 		ldr	r3, .L30
 255 0030 030054E1 		cmp	r4, r3
 256              		.loc 2 115 0
 257 0034 0400A0E1 		mov	r0, r4
 258              		.loc 2 114 0
 259 0038 0300001A 		bne	.L27
 118:layer1/sched_gsmtime.c **** 	}
 119:layer1/sched_gsmtime.c **** }
 260              		.loc 2 119 0
 261 003c 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 262              	.L31:
 263              		.align	2
 264              	.L30:
 265 0040 08000000 		.word	active_evts
 266 0044 00000000 		.word	inactive_evts
 267              	.LFE18:
 269              		.section	.text.llist_add_tail,"ax",%progbits
 270              		.align	2
 272              	llist_add_tail:
 273              	.LFB5:
 274              		.loc 1 94 0
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278              	.LVL16:
 279              		.loc 1 95 0
 280 0000 043091E5 		ldr	r3, [r1, #4]
 281              	.LVL17:
 282              	.LBB13:
 283              		.loc 1 67 0
 284 0004 001080E5 		str	r1, [r0, #0]
 285              		.loc 1 66 0
 286 0008 040081E5 		str	r0, [r1, #4]
 287              	.LBE13:
 288              		.loc 1 94 0
 289              		@ lr needed for prologue
 290              	.LBB14:
 291              		.loc 1 69 0
 292 000c 000083E5 		str	r0, [r3, #0]
 293              		.loc 1 68 0
 294 0010 043080E5 		str	r3, [r0, #4]
 295              	.LBE14:
 296              		.loc 1 96 0
 297 0014 1EFF2FE1 		bx	lr
 298              	.LFE5:
 300              		.section	.text.sched_gsmtime,"ax",%progbits
 301              		.align	2
 302              		.global	sched_gsmtime
 304              	sched_gsmtime:
 305              	.LFB15:
 306              		.loc 2 38 0
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              	.LVL18:
 310 0000 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 311              	.LCFI3:
 312              	.LBB15:
 313              	.LBB16:
 123:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 124:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 125:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_del_init - deletes entry from llist and reinitialize it.
 126:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @entry: the element to delete from the llist.
 127:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 128:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_del_init(struct llist_head *entry)
 129:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 130:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_del(entry->prev, entry->next);
 131:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	INIT_LLIST_HEAD(entry); 
 132:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
 133:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 134:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 135:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_move - delete from one llist and add as another's head
 136:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @llist: the entry to move
 137:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: the head that will precede our entry
 138:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 139:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_move(struct llist_head *llist, struct llist_head *head)
 140:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 141:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         __llist_del(llist->prev, llist->next);
 142:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         llist_add(llist, head);
 143:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
 144:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 145:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 146:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_move_tail - delete from one llist and add as another's tail
 147:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @llist: the entry to move
 148:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: the head that will follow our entry
 149:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 150:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_move_tail(struct llist_head *llist,
 151:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 				  struct llist_head *head)
 152:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 153:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         __llist_del(llist->prev, llist->next);
 154:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         llist_add_tail(llist, head);
 155:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
 156:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 157:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 158:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_empty - tests whether a llist is empty
 159:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: the llist to test.
 160:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 161:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline int llist_empty(const struct llist_head *head)
 162:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 163:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	return head->next == head;
 314              		.loc 1 163 0
 315 0004 80309FE5 		ldr	r3, .L45
 316 0008 004093E5 		ldr	r4, [r3, #0]
 317              	.LBE16:
 318              	.LBE15:
 319              		.loc 2 38 0
 320 000c 0228A0E1 		mov	r2, r2, asl #16
 321              	.LVL19:
 322              		.loc 2 45 0
 323 0010 030054E1 		cmp	r4, r3
 324              		.loc 2 38 0
 325 0014 0070A0E1 		mov	r7, r0
 326 0018 0150A0E1 		mov	r5, r1
 327 001c 2268A0E1 		mov	r6, r2, lsr #16
 328              	.LVL20:
 329              		.loc 2 45 0
 330 0020 0F00E003 		mvneq	r0, #15
 331              	.LVL21:
 332 0024 F080BD08 		ldmeqfd	sp!, {r4, r5, r6, r7, pc}
 333              	.LVL22:
 334 0028 0D0000EA 		b	.L35
 335              	.LVL23:
 336              	.L44:
 337              		.loc 2 59 0
 338 002c 0400A0E1 		mov	r0, r4
 339 0030 FEFFFFEB 		bl	llist_add_tail
 340              	.LVL24:
 341 0034 0000A0E3 		mov	r0, #0
 342 0038 F080BDE8 		ldmfd	sp!, {r4, r5, r6, r7, pc}
 343              	.LVL25:
 344              	.L35:
 345              		.loc 2 48 0
 346 003c 0400A0E1 		mov	r0, r4
 347 0040 FEFFFFEB 		bl	llist_del
 348              	.LBB17:
 349              		.loc 2 57 0
 350 0044 44309FE5 		ldr	r3, .L45+4
 351 0048 001093E5 		ldr	r1, [r3, #0]
 352              	.LVL26:
 353              	.LBE17:
 354              		.loc 2 51 0
 355 004c 0C5084E5 		str	r5, [r4, #12]
 356              		.loc 2 52 0
 357 0050 087084E5 		str	r7, [r4, #8]
 358              		.loc 2 53 0
 359 0054 B061C4E1 		strh	r6, [r4, #16]	@ movhi
 360 0058 1A0000EA 		b	.L38
 361              	.L39:
 362              		.loc 2 58 0
 363 005c 0C2091E5 		ldr	r2, [r1, #12]
 364 0060 0C3094E5 		ldr	r3, [r4, #12]
 365 0064 030052E1 		cmp	r2, r3
 366 0068 0900008A 		bhi	.L44
 367              	.LBB18:
 368              		.loc 2 57 0
 369 006c 001091E5 		ldr	r1, [r1, #0]
 370              	.L38:
 371              	.LBE18:
 372 0070 18309FE5 		ldr	r3, .L45+4
 373 0074 030051E1 		cmp	r1, r3
 374 0078 1500001A 		bne	.L39
 375              		.loc 2 66 0
 376 007c 0400A0E1 		mov	r0, r4
 377 0080 FEFFFFEB 		bl	llist_add_tail
 378              	.LVL27:
 379 0084 0000A0E3 		mov	r0, #0
 380              		.loc 2 69 0
 381 0088 F080BDE8 		ldmfd	sp!, {r4, r5, r6, r7, pc}
 382              	.L46:
 383              		.align	2
 384              	.L45:
 385 008c 00000000 		.word	inactive_evts
 386 0090 08000000 		.word	active_evts
 387              	.LFE15:
 389              		.bss
 390              		.align	2
 391              	sched_gsmtime_events:
 392 0000 00000000 		.space	320
 392      00000000 
 392      00000000 
 392      00000000 
 392      00000000 
 518              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sched_gsmtime.c
     /tmp/ccxuYrdr.s:14     .data:0000000000000000 inactive_evts
     /tmp/ccxuYrdr.s:15     .data:0000000000000000 $d
     /tmp/ccxuYrdr.s:20     .data:0000000000000008 active_evts
     /tmp/ccxuYrdr.s:26     .text.llist_add:0000000000000000 llist_add
     /tmp/ccxuYrdr.s:35     .text.llist_add:0000000000000000 $a
     /tmp/ccxuYrdr.s:56     .text.llist_del:0000000000000000 llist_del
     /tmp/ccxuYrdr.s:64     .text.llist_del:0000000000000000 $a
     /tmp/ccxuYrdr.s:91     .text.llist_del:0000000000000024 $d
     /tmp/ccxuYrdr.s:99     .text.sched_gsmtime_execute:0000000000000000 sched_gsmtime_execute
     /tmp/ccxuYrdr.s:106    .text.sched_gsmtime_execute:0000000000000000 $a
     /tmp/ccxuYrdr.s:177    .text.sched_gsmtime_execute:000000000000007c $d
     /tmp/ccxuYrdr.s:185    .text.sched_gsmtime_init:0000000000000000 sched_gsmtime_init
     /tmp/ccxuYrdr.s:191    .text.sched_gsmtime_init:0000000000000000 $a
     /tmp/ccxuYrdr.s:214    .text.sched_gsmtime_init:000000000000002c $d
     /tmp/ccxuYrdr.s:391    .bss:0000000000000000 sched_gsmtime_events
     /tmp/ccxuYrdr.s:222    .text.sched_gsmtime_reset:0000000000000000 sched_gsmtime_reset
     /tmp/ccxuYrdr.s:228    .text.sched_gsmtime_reset:0000000000000000 $a
     /tmp/ccxuYrdr.s:265    .text.sched_gsmtime_reset:0000000000000040 $d
     /tmp/ccxuYrdr.s:272    .text.llist_add_tail:0000000000000000 llist_add_tail
     /tmp/ccxuYrdr.s:280    .text.llist_add_tail:0000000000000000 $a
     /tmp/ccxuYrdr.s:304    .text.sched_gsmtime:0000000000000000 sched_gsmtime
     /tmp/ccxuYrdr.s:310    .text.sched_gsmtime:0000000000000000 $a
     /tmp/ccxuYrdr.s:385    .text.sched_gsmtime:000000000000008c $d

UNDEFINED SYMBOLS
tdma_schedule_set
