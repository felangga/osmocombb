   1              		.file	"toa.c"
   9              	.Ltext0:
  10              		.data
  11              		.align	2
  14              	toa_state:
  15 0000 FA00     		.short	250
  16 0002 7D00     		.short	125
  17 0004 00000000 		.space	8
  17      00000000 
  18 000c 00000000 		.word	toa_ravg_output
  19 0010 00000000 		.space	4
  20              		.section	.text.toa_input,"ax",%progbits
  21              		.align	2
  22              		.global	toa_input
  24              	toa_input:
  25              	.LFB18:
  26              		.file 1 "layer1/toa.c"
   1:layer1/toa.c  **** /* AFC (Automatic Frequency Correction) Implementation */
   2:layer1/toa.c  **** 
   3:layer1/toa.c  **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/toa.c  ****  * (C) 2011 by Andreas Eversberg <jolly@eversberg.eu>
   5:layer1/toa.c  ****  *
   6:layer1/toa.c  ****  * All Rights Reserved
   7:layer1/toa.c  ****  *
   8:layer1/toa.c  ****  * This program is free software; you can redistribute it and/or modify
   9:layer1/toa.c  ****  * it under the terms of the GNU General Public License as published by
  10:layer1/toa.c  ****  * the Free Software Foundation; either version 2 of the License, or
  11:layer1/toa.c  ****  * (at your option) any later version.
  12:layer1/toa.c  ****  *
  13:layer1/toa.c  ****  * This program is distributed in the hope that it will be useful,
  14:layer1/toa.c  ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:layer1/toa.c  ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:layer1/toa.c  ****  * GNU General Public License for more details.
  17:layer1/toa.c  ****  *
  18:layer1/toa.c  ****  * You should have received a copy of the GNU General Public License along
  19:layer1/toa.c  ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  20:layer1/toa.c  ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  21:layer1/toa.c  ****  *
  22:layer1/toa.c  ****  */
  23:layer1/toa.c  **** 
  24:layer1/toa.c  **** #include <stdint.h>
  25:layer1/toa.c  **** #include <stdio.h>
  26:layer1/toa.c  **** 
  27:layer1/toa.c  **** #include <debug.h>
  28:layer1/toa.c  **** #include <osmocom/gsm/gsm_utils.h>
  29:layer1/toa.c  **** 
  30:layer1/toa.c  **** #include <layer1/toa.h>
  31:layer1/toa.c  **** #include <layer1/avg.h>
  32:layer1/toa.c  **** #include <layer1/sync.h>
  33:layer1/toa.c  **** 
  34:layer1/toa.c  **** /* Over how many TDMA frames do we want to average? */
  35:layer1/toa.c  **** #define TOA_PERIOD		250
  36:layer1/toa.c  **** /* How many of our measurements have to be valid? */
  37:layer1/toa.c  **** #define TOA_MIN_MUN_VALID	125
  38:layer1/toa.c  **** 
  39:layer1/toa.c  **** // FIXME:
  40:layer1/toa.c  **** #define TOA_SNR_THRESHOLD       2560    /* 2.5 dB in fx6.10 */
  41:layer1/toa.c  **** 
  42:layer1/toa.c  **** struct toa_state {
  43:layer1/toa.c  **** 	struct running_avg ravg;		/* running average */
  44:layer1/toa.c  **** };
  45:layer1/toa.c  **** 
  46:layer1/toa.c  **** 
  47:layer1/toa.c  **** static void toa_ravg_output(struct running_avg *ravg, int32_t avg);
  48:layer1/toa.c  **** 
  49:layer1/toa.c  **** static struct toa_state toa_state = {
  50:layer1/toa.c  **** 	.ravg = {
  51:layer1/toa.c  **** 		.outfn = &toa_ravg_output,
  52:layer1/toa.c  **** 		.period = TOA_PERIOD,
  53:layer1/toa.c  **** 		.min_valid = TOA_MIN_MUN_VALID,
  54:layer1/toa.c  **** 	},
  55:layer1/toa.c  **** };
  56:layer1/toa.c  **** 
  57:layer1/toa.c  **** void toa_input(int32_t offset, uint32_t snr)
  58:layer1/toa.c  **** {
  27              		.loc 1 58 0
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  59:layer1/toa.c  **** 	int valid = 1;
  60:layer1/toa.c  **** 
  61:layer1/toa.c  **** 	if (snr < TOA_SNR_THRESHOLD || offset < 0 || offset >31)
  31              		.loc 1 61 0
  32 0000 0A0C51E3 		cmp	r1, #2560
  33 0004 0010A023 		movcs	r1, #0
  34 0008 0110A033 		movcc	r1, #1
  35              	.LVL1:
  36 000c A01F91E1 		orrs	r1, r1, r0, lsr #31
  37              		.loc 1 58 0
  38 0010 04E02DE5 		str	lr, [sp, #-4]!
  39              	.LCFI0:
  40              		.loc 1 61 0
  41 0014 0700001A 		bne	.L2
  42 0018 1F0050E3 		cmp	r0, #31
  43 001c 0120A0E3 		mov	r2, #1
  44              	.LVL2:
  45 0020 080000DA 		ble	.L5
  46              	.L2:
  47 0024 0020A0E3 		mov	r2, #0
  48              	.L5:
  62:layer1/toa.c  **** 		valid = 0;
  63:layer1/toa.c  **** 	runavg_input(&toa_state.ravg, offset, valid);
  49              		.loc 1 63 0
  50 0028 0010A0E1 		mov	r1, r0
  51 002c 0C009FE5 		ldr	r0, .L7
  52              	.LVL3:
  53 0030 FEFFFFEB 		bl	runavg_input
  54              	.LVL4:
  64:layer1/toa.c  **** 	runavg_check_output(&toa_state.ravg);
  55              		.loc 1 64 0
  56 0034 04009FE5 		ldr	r0, .L7
  65:layer1/toa.c  **** }
  57              		.loc 1 65 0
  58 0038 04E09DE4 		ldr	lr, [sp], #4
  59              		.loc 1 64 0
  60 003c FEFFFFEA 		b	runavg_check_output
  61              	.L8:
  62              		.align	2
  63              	.L7:
  64 0040 00000000 		.word	toa_state
  65              	.LFE18:
  67              		.section	.text.toa_reset,"ax",%progbits
  68              		.align	2
  69              		.global	toa_reset
  71              	toa_reset:
  72              	.LFB19:
  66:layer1/toa.c  **** 
  67:layer1/toa.c  **** void toa_reset(void)
  68:layer1/toa.c  **** {
  73              		.loc 1 68 0
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77              	.LVL5:
  69:layer1/toa.c  **** 	toa_state.ravg.num_samples = toa_state.ravg.num_samples_valid = 0;
  78              		.loc 1 69 0
  79 0000 10209FE5 		ldr	r2, .L11
  80 0004 0030A0E3 		mov	r3, #0
  81              		.loc 1 68 0
  82              		@ lr needed for prologue
  70:layer1/toa.c  **** 	toa_state.ravg.acc_val = 0;
  83              		.loc 1 70 0
  84 0008 043082E5 		str	r3, [r2, #4]
  85              		.loc 1 69 0
  86 000c BA30C2E1 		strh	r3, [r2, #10]	@ movhi
  87 0010 B830C2E1 		strh	r3, [r2, #8]	@ movhi
  71:layer1/toa.c  **** }
  88              		.loc 1 71 0
  89 0014 1EFF2FE1 		bx	lr
  90              	.L12:
  91              		.align	2
  92              	.L11:
  93 0018 00000000 		.word	toa_state
  94              	.LFE19:
  96              		.section	.rodata.str1.4,"aMS",%progbits,1
  97              		.align	2
  98              	.LC0:
  99 0000 544F4120 		.ascii	"TOA AVG is not 16 qbits, correcting (got %ld)\012\000"
  99      41564720 
  99      6973206E 
  99      6F742031 
  99      36207162 
 100 002f 00       		.section	.text.toa_ravg_output,"ax",%progbits
 101              		.align	2
 103              	toa_ravg_output:
 104              	.LFB20:
  72:layer1/toa.c  **** 
  73:layer1/toa.c  **** /* callback function for runavg */
  74:layer1/toa.c  **** static void toa_ravg_output(struct running_avg *ravg, int32_t avg)
  75:layer1/toa.c  **** {
 105              		.loc 1 75 0
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              	.LVL6:
  76:layer1/toa.c  **** 	if (avg != 16) {
 109              		.loc 1 76 0
 110 0000 100051E3 		cmp	r1, #16
 111              		.loc 1 75 0
 112 0004 10402DE9 		stmfd	sp!, {r4, lr}
 113              	.LCFI1:
  77:layer1/toa.c  **** 		printf("TOA AVG is not 16 qbits, correcting (got %ld)\n", avg);
 114              		.loc 1 77 0
 115 0008 18009FE5 		ldr	r0, .L17
 116              	.LVL7:
 117              		.loc 1 75 0
 118 000c 0140A0E1 		mov	r4, r1
 119              		.loc 1 76 0
 120 0010 1080BD08 		ldmeqfd	sp!, {r4, pc}
 121              	.LVL8:
 122              		.loc 1 77 0
 123 0014 FEFFFFEB 		bl	printf
  78:layer1/toa.c  **** 		l1s.tpu_offset_correction = avg - 16;
 124              		.loc 1 78 0
 125 0018 0C309FE5 		ldr	r3, .L17+4
 126 001c 102044E2 		sub	r2, r4, #16
 127 0020 442A83E5 		str	r2, [r3, #2628]
 128 0024 1080BDE8 		ldmfd	sp!, {r4, pc}
 129              	.L18:
 130              		.align	2
 131              	.L17:
 132 0028 00000000 		.word	.LC0
 133 002c 00000000 		.word	l1s
 134              	.LFE20:
 198              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 toa.c
     /tmp/ccOuqNtX.s:14     .data:0000000000000000 toa_state
     /tmp/ccOuqNtX.s:18     .data:000000000000000c $d
     /tmp/ccOuqNtX.s:103    .text.toa_ravg_output:0000000000000000 toa_ravg_output
     /tmp/ccOuqNtX.s:24     .text.toa_input:0000000000000000 toa_input
     /tmp/ccOuqNtX.s:32     .text.toa_input:0000000000000000 $a
     /tmp/ccOuqNtX.s:64     .text.toa_input:0000000000000040 $d
     /tmp/ccOuqNtX.s:71     .text.toa_reset:0000000000000000 toa_reset
     /tmp/ccOuqNtX.s:79     .text.toa_reset:0000000000000000 $a
     /tmp/ccOuqNtX.s:93     .text.toa_reset:0000000000000018 $d
     /tmp/ccOuqNtX.s:110    .text.toa_ravg_output:0000000000000000 $a
     /tmp/ccOuqNtX.s:132    .text.toa_ravg_output:0000000000000028 $d

UNDEFINED SYMBOLS
runavg_input
runavg_check_output
printf
l1s
