   1              		.file	"timer.c"
   9              	.Ltext0:
  10              		.data
  11              		.align	2
  14              	timer_list:
  15 0000 00000000 		.word	timer_list
  16 0004 00000000 		.word	timer_list
  17              		.section	.text.osmo_timer_del,"ax",%progbits
  18              		.align	2
  19              		.global	osmo_timer_del
  21              	osmo_timer_del:
  22              	.LFB17:
  23              		.file 1 "comm/timer.c"
   1:comm/timer.c  **** /* (C) 2008 by Holger Hans Peter Freyther <zecke@selfish.org>
   2:comm/timer.c  ****  * (C) 2010 by Harald Welte <laforge@gnumonks.org>
   3:comm/timer.c  ****  * All Rights Reserved
   4:comm/timer.c  ****  *
   5:comm/timer.c  ****  * This program is free software; you can redistribute it and/or modify
   6:comm/timer.c  ****  * it under the terms of the GNU General Public License as published by
   7:comm/timer.c  ****  * the Free Software Foundation; either version 2 of the License, or
   8:comm/timer.c  ****  * (at your option) any later version.
   9:comm/timer.c  ****  *
  10:comm/timer.c  ****  * This program is distributed in the hope that it will be useful,
  11:comm/timer.c  ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:comm/timer.c  ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:comm/timer.c  ****  * GNU General Public License for more details.
  14:comm/timer.c  ****  *
  15:comm/timer.c  ****  * You should have received a copy of the GNU General Public License along
  16:comm/timer.c  ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  17:comm/timer.c  ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  18:comm/timer.c  ****  *
  19:comm/timer.c  ****  */
  20:comm/timer.c  **** 
  21:comm/timer.c  **** #include <stdint.h>
  22:comm/timer.c  **** #include <debug.h>
  23:comm/timer.c  **** #include <osmocom/core/linuxlist.h>
  24:comm/timer.c  **** 
  25:comm/timer.c  **** #include <comm/timer.h>
  26:comm/timer.c  **** 
  27:comm/timer.c  **** #include <calypso/timer.h>
  28:comm/timer.c  **** #include <calypso/irq.h>
  29:comm/timer.c  **** 
  30:comm/timer.c  **** #include <keypad.h>
  31:comm/timer.c  **** 
  32:comm/timer.c  **** static LLIST_HEAD(timer_list);
  33:comm/timer.c  **** 
  34:comm/timer.c  **** unsigned long volatile jiffies;
  35:comm/timer.c  **** 
  36:comm/timer.c  **** #define time_after(a,b)         \
  37:comm/timer.c  **** 	(typecheck(unsigned long, a) && \
  38:comm/timer.c  **** 	 typecheck(unsigned long, b) && \
  39:comm/timer.c  **** 	 ((long)(b) - (long)(a) < 0))
  40:comm/timer.c  **** #define time_before(a,b)        time_after(b,a)
  41:comm/timer.c  **** 
  42:comm/timer.c  **** void osmo_timer_add(struct osmo_timer_list *timer)
  43:comm/timer.c  **** {
  44:comm/timer.c  **** 	struct osmo_timer_list *list_timer;
  45:comm/timer.c  **** 
  46:comm/timer.c  **** 	/* TODO: Optimize and remember the closest item... */
  47:comm/timer.c  **** 	timer->active = 1;
  48:comm/timer.c  **** 
  49:comm/timer.c  **** 	/* this might be called from within osmo_timers_update */
  50:comm/timer.c  **** 	llist_for_each_entry(list_timer, &timer_list, entry)
  51:comm/timer.c  **** 		if (timer == list_timer)
  52:comm/timer.c  **** 			return;
  53:comm/timer.c  **** 
  54:comm/timer.c  **** 	timer->in_list = 1;
  55:comm/timer.c  **** 	llist_add(&timer->entry, &timer_list);
  56:comm/timer.c  **** }
  57:comm/timer.c  **** 
  58:comm/timer.c  **** void osmo_timer_schedule(struct osmo_timer_list *timer, int milliseconds)
  59:comm/timer.c  **** {
  60:comm/timer.c  **** 	timer->expires = jiffies + ((milliseconds * HZ) / 1000);
  61:comm/timer.c  **** 	osmo_timer_add(timer);
  62:comm/timer.c  **** }
  63:comm/timer.c  **** 
  64:comm/timer.c  **** void osmo_timer_del(struct osmo_timer_list *timer)
  65:comm/timer.c  **** {
  24              		.loc 1 65 0
  25              		@ args = 0, pretend = 0, frame = 0
  26              		@ frame_needed = 0, uses_anonymous_args = 0
  27              		@ link register save eliminated.
  28              	.LVL0:
  66:comm/timer.c  **** 	if (timer->in_list) {
  29              		.loc 1 66 0
  30 0000 0C30D0E5 		ldrb	r3, [r0, #12]	@ zero_extendqisi2
  31 0004 040013E3 		tst	r3, #4
  32              		.loc 1 65 0
  33              		@ lr needed for prologue
  67:comm/timer.c  **** 		timer->active = 0;
  34              		.loc 1 67 0
  35 0008 0120C3E3 		bic	r2, r3, #1
  36              		.loc 1 66 0
  37 000c 1EFF2F01 		bxeq	lr
  38              		.loc 1 67 0
  39 0010 0C20C0E5 		strb	r2, [r0, #12]
  68:comm/timer.c  **** 		timer->in_list = 0;
  40              		.loc 1 68 0
  41 0014 0C30D0E5 		ldrb	r3, [r0, #12]	@ zero_extendqisi2
  42 0018 0430C3E3 		bic	r3, r3, #4
  43              	.LBB2:
  44              	.LBB3:
  45              		.file 2 "../../shared/libosmocore/include/osmocom/core/linuxlist.h"
   1:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #ifndef _LINUX_LLIST_H
   2:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define _LINUX_LLIST_H
   3:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
   4:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #include <stddef.h>
   5:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
   6:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #ifndef inline
   7:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define inline __inline__
   8:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #endif
   9:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  10:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void prefetch(__attribute__((unused)) const void *x) {;}
  11:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  12:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
  13:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * container_of - cast a member of a structure out to the containing structure
  14:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  15:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @ptr:	the pointer to the member.
  16:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @type:	the type of the container struct this is embedded in.
  17:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @member:	the name of the member within the struct.
  18:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  19:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  20:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define container_of(ptr, type, member) ({			\
  21:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         const typeof( ((type *)0)->member ) *__mptr = (typeof( ((type *)0)->member ) *)(ptr);	\
  22:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         (type *)( (char *)__mptr - offsetof(type, member) );})
  23:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  24:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  25:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  26:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * These are non-NULL pointers that will result in page faults
  27:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * under normal circumstances, used to verify that nobody uses
  28:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * non-initialized llist entries.
  29:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  30:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_POISON1  ((void *) 0x00100100)
  31:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_POISON2  ((void *) 0x00200200)
  32:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  33:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  34:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Simple doubly linked llist implementation.
  35:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  36:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Some of the internal functions ("__xxx") are useful when
  37:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * manipulating whole llists rather than single entries, as
  38:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * sometimes we already know the next/prev entries and we can
  39:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * generate better code by using them directly rather than
  40:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * using the generic single-entry routines.
  41:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  42:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  43:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** struct llist_head {
  44:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	struct llist_head *next, *prev;
  45:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** };
  46:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  47:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_HEAD_INIT(name) { &(name), &(name) }
  48:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  49:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_HEAD(name) \
  50:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	struct llist_head name = LLIST_HEAD_INIT(name)
  51:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  52:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define INIT_LLIST_HEAD(ptr) do { \
  53:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	(ptr)->next = (ptr); (ptr)->prev = (ptr); \
  54:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** } while (0)
  55:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  56:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  57:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Insert a new entry between two known consecutive entries. 
  58:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  59:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is only for internal llist manipulation where we know
  60:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * the prev/next entries already!
  61:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  62:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void __llist_add(struct llist_head *_new,
  63:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 			      struct llist_head *prev,
  64:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 			      struct llist_head *next)
  65:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
  66:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = _new;
  67:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->next = next;
  68:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->prev = prev;
  69:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = _new;
  70:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
  71:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  72:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
  73:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_add - add a new entry
  74:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @new: new entry to be added
  75:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: llist head to add it after
  76:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  77:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Insert a new entry after the specified head.
  78:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is good for implementing stacks.
  79:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  80:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_add(struct llist_head *_new, struct llist_head *head)
  81:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
  82:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head, head->next);
  83:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
  84:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  85:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
  86:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_add_tail - add a new entry
  87:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @new: new entry to be added
  88:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: llist head to add it before
  89:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  90:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Insert a new entry before the specified head.
  91:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is useful for implementing queues.
  92:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  93:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_add_tail(struct llist_head *_new, struct llist_head *head)
  94:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
  95:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head->prev, head);
  96:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
  97:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  98:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  99:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Delete a llist entry by making the prev/next entries
 100:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * point to each other.
 101:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
 102:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is only for internal llist manipulation where we know
 103:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * the prev/next entries already!
 104:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 105:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void __llist_del(struct llist_head * prev, struct llist_head * next)
 106:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 107:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = prev;
 108:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = next;
 109:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
 110:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 111:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 112:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_del - deletes entry from llist.
 113:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @entry: the element to delete from the llist.
 114:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Note: llist_empty on entry does not return true after this, the entry is
 115:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * in an undefined state.
 116:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 117:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_del(struct llist_head *entry)
 118:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 119:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_del(entry->prev, entry->next);
  46              		.loc 2 119 0
  47 001c 041090E5 		ldr	r1, [r0, #4]
  48              	.LVL1:
  49 0020 002090E5 		ldr	r2, [r0, #0]
  50              	.LVL2:
  51              	.LBE3:
  52              	.LBE2:
  53              		.loc 1 68 0
  54 0024 0C30C0E5 		strb	r3, [r0, #12]
  55              	.LBB4:
  56              	.LBB5:
 120:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	entry->next = (struct llist_head *)LLIST_POISON1;
  57              		.loc 2 120 0
  58 0028 14309FE5 		ldr	r3, .L5
  59              	.LBB6:
  60              		.loc 2 108 0
  61 002c 002081E5 		str	r2, [r1, #0]
  62              	.LBE6:
  63              		.loc 2 120 0
  64 0030 003080E5 		str	r3, [r0, #0]
 121:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	entry->prev = (struct llist_head *)LLIST_POISON2;
  65              		.loc 2 121 0
  66 0034 0C309FE5 		ldr	r3, .L5+4
  67              	.LBB7:
  68              		.loc 2 107 0
  69 0038 041082E5 		str	r1, [r2, #4]
  70              	.LBE7:
  71              		.loc 2 121 0
  72 003c 043080E5 		str	r3, [r0, #4]
  73 0040 1EFF2FE1 		bx	lr
  74              	.L6:
  75              		.align	2
  76              	.L5:
  77 0044 00011000 		.word	1048832
  78 0048 00022000 		.word	2097664
  79              	.LBE5:
  80              	.LBE4:
  81              	.LFE17:
  83              		.section	.text.osmo_timer_pending,"ax",%progbits
  84              		.align	2
  85              		.global	osmo_timer_pending
  87              	osmo_timer_pending:
  88              	.LFB18:
  69:comm/timer.c  **** 		llist_del(&timer->entry);
  70:comm/timer.c  **** 	}
  71:comm/timer.c  **** }
  72:comm/timer.c  **** 
  73:comm/timer.c  **** int osmo_timer_pending(struct osmo_timer_list *timer)
  74:comm/timer.c  **** {
  89              		.loc 1 74 0
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              	.LVL3:
  94 0000 0C00D0E5 		ldrb	r0, [r0, #12]	@ zero_extendqisi2
  95              	.LVL4:
  75:comm/timer.c  **** 	return timer->active;
  76:comm/timer.c  **** }
  96              		.loc 1 76 0
  97 0004 010000E2 		and	r0, r0, #1
  98              		.loc 1 74 0
  99              		@ lr needed for prologue
 100              		.loc 1 76 0
 101 0008 1EFF2FE1 		bx	lr
 102              	.LFE18:
 104              		.section	.text.timer_irq,"ax",%progbits
 105              		.align	2
 107              	timer_irq:
 108              	.LFB21:
  77:comm/timer.c  **** 
  78:comm/timer.c  **** #if 0
  79:comm/timer.c  **** /*
  80:comm/timer.c  ****  * if we have a nearest time return the delta between the current
  81:comm/timer.c  ****  * time and the time of the nearest timer.
  82:comm/timer.c  ****  * If the nearest timer timed out return NULL and then we will
  83:comm/timer.c  ****  * dispatch everything after the select
  84:comm/timer.c  ****  */
  85:comm/timer.c  **** struct timeval *nearest_timer()
  86:comm/timer.c  **** {
  87:comm/timer.c  **** 	struct timeval current_time;
  88:comm/timer.c  **** 
  89:comm/timer.c  **** 	if (s_nearest_time.tv_sec == 0 && s_nearest_time.tv_usec == 0)
  90:comm/timer.c  **** 		return NULL;
  91:comm/timer.c  **** 
  92:comm/timer.c  **** 	if (gettimeofday(&current_time, NULL) == -1)
  93:comm/timer.c  **** 		return NULL;
  94:comm/timer.c  **** 
  95:comm/timer.c  **** 	unsigned long long nearestTime = s_nearest_time.tv_sec * MICRO_SECONDS + s_nearest_time.tv_usec;
  96:comm/timer.c  **** 	unsigned long long currentTime = current_time.tv_sec * MICRO_SECONDS + current_time.tv_usec;
  97:comm/timer.c  **** 
  98:comm/timer.c  **** 	if (nearestTime < currentTime) {
  99:comm/timer.c  **** 		s_select_time.tv_sec = 0;
 100:comm/timer.c  **** 		s_select_time.tv_usec = 0;
 101:comm/timer.c  **** 	} else {
 102:comm/timer.c  **** 		s_select_time.tv_sec = (nearestTime - currentTime) / MICRO_SECONDS;
 103:comm/timer.c  **** 		s_select_time.tv_usec = (nearestTime - currentTime) % MICRO_SECONDS;
 104:comm/timer.c  **** 	}
 105:comm/timer.c  **** 
 106:comm/timer.c  **** 	return &s_select_time;
 107:comm/timer.c  **** }
 108:comm/timer.c  **** 
 109:comm/timer.c  **** /*
 110:comm/timer.c  ****  * Find the nearest time and update s_nearest_time
 111:comm/timer.c  ****  */
 112:comm/timer.c  **** void prepare_timers()
 113:comm/timer.c  **** {
 114:comm/timer.c  **** 	struct osmo_timer_list *timer, *nearest_timer = NULL;
 115:comm/timer.c  **** 	llist_for_each_entry(timer, &timer_list, entry) {
 116:comm/timer.c  **** 		if (!nearest_timer || time_before(timer->expires, nearest_timer->expires)) {
 117:comm/timer.c  **** 			nearest_timer = timer;
 118:comm/timer.c  **** 		}
 119:comm/timer.c  **** 	}
 120:comm/timer.c  **** 
 121:comm/timer.c  **** 	if (nearest_timer) {
 122:comm/timer.c  **** 		s_nearest_time = nearest_timer->timeout;
 123:comm/timer.c  **** 	} else {
 124:comm/timer.c  **** 		memset(&s_nearest_time, 0, sizeof(struct timeval));
 125:comm/timer.c  **** 	}
 126:comm/timer.c  **** }
 127:comm/timer.c  **** #endif
 128:comm/timer.c  **** 
 129:comm/timer.c  **** /*
 130:comm/timer.c  ****  * fire all timers... and remove them
 131:comm/timer.c  ****  */
 132:comm/timer.c  **** int osmo_timers_update(void)
 133:comm/timer.c  **** {
 134:comm/timer.c  **** 	struct osmo_timer_list *timer, *tmp;
 135:comm/timer.c  **** 	int work = 0;
 136:comm/timer.c  **** 
 137:comm/timer.c  **** 	/*
 138:comm/timer.c  **** 	 * The callbacks might mess with our list and in this case
 139:comm/timer.c  **** 	 * even llist_for_each_entry_safe is not safe to use. To allow
 140:comm/timer.c  **** 	 * osmo_timer_del, osmo_timer_add, osmo_timer_schedule to be called from within
 141:comm/timer.c  **** 	 * the callback we jump through some loops.
 142:comm/timer.c  **** 	 *
 143:comm/timer.c  **** 	 * First we set the handled flag of each active timer to zero,
 144:comm/timer.c  **** 	 * then we iterate over the list and execute the callbacks. As the
 145:comm/timer.c  **** 	 * list might have been changed (specially the next) from within
 146:comm/timer.c  **** 	 * the callback we have to start over again. Once every callback
 147:comm/timer.c  **** 	 * is dispatched we will remove the non-active from the list.
 148:comm/timer.c  **** 	 *
 149:comm/timer.c  **** 	 * TODO: If this is a performance issue we can poison a global
 150:comm/timer.c  **** 	 * variable in osmo_timer_add and osmo_timer_del and only then restart.
 151:comm/timer.c  **** 	 */
 152:comm/timer.c  **** 	llist_for_each_entry(timer, &timer_list, entry) {
 153:comm/timer.c  **** 		timer->handled = 0;
 154:comm/timer.c  **** 	}
 155:comm/timer.c  **** 
 156:comm/timer.c  **** restart:
 157:comm/timer.c  **** 	llist_for_each_entry(timer, &timer_list, entry) {
 158:comm/timer.c  **** 		if (!timer->handled && time_before(timer->expires, jiffies)) {
 159:comm/timer.c  **** 			timer->handled = 1;
 160:comm/timer.c  **** 			timer->active = 0;
 161:comm/timer.c  **** 			(*timer->cb)(timer->data);
 162:comm/timer.c  **** 			work = 1;
 163:comm/timer.c  **** 			goto restart;
 164:comm/timer.c  **** 		}
 165:comm/timer.c  **** 	}
 166:comm/timer.c  **** 
 167:comm/timer.c  **** 	llist_for_each_entry_safe(timer, tmp, &timer_list, entry) {
 168:comm/timer.c  **** 		timer->handled = 0;
 169:comm/timer.c  **** 		if (!timer->active) {
 170:comm/timer.c  **** 			osmo_timer_del(timer);
 171:comm/timer.c  **** 		}
 172:comm/timer.c  **** 	}
 173:comm/timer.c  **** 
 174:comm/timer.c  **** 	return work;
 175:comm/timer.c  **** }
 176:comm/timer.c  **** 
 177:comm/timer.c  **** int osmo_timers_check(void)
 178:comm/timer.c  **** {
 179:comm/timer.c  **** 	struct osmo_timer_list *timer;
 180:comm/timer.c  **** 	int i = 0;
 181:comm/timer.c  **** 
 182:comm/timer.c  **** 	llist_for_each_entry(timer, &timer_list, entry) {
 183:comm/timer.c  **** 		i++;
 184:comm/timer.c  **** 	}
 185:comm/timer.c  **** 	return i;
 186:comm/timer.c  **** }
 187:comm/timer.c  **** 
 188:comm/timer.c  **** static void timer_irq(enum irq_nr irq)
 189:comm/timer.c  **** {
 109              		.loc 1 189 0
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113              	.LVL5:
 190:comm/timer.c  **** 	/* we only increment jiffies here.  FIXME: does this need to be atomic? */
 191:comm/timer.c  **** 	jiffies++;
 114              		.loc 1 191 0
 115 0000 0C209FE5 		ldr	r2, .L11
 116 0004 003092E5 		ldr	r3, [r2, #0]
 117 0008 013083E2 		add	r3, r3, #1
 118              		.loc 1 189 0
 119              		@ lr needed for prologue
 120              		.loc 1 191 0
 121 000c 003082E5 		str	r3, [r2, #0]
 192:comm/timer.c  **** 
 193:comm/timer.c  **** 	keypad_poll();
 194:comm/timer.c  **** }
 122              		.loc 1 194 0
 123              		.loc 1 193 0
 124 0010 FEFFFFEA 		b	keypad_poll
 125              	.LVL6:
 126              	.L12:
 127              		.align	2
 128              	.L11:
 129 0014 00000000 		.word	jiffies
 130              	.LFE21:
 132              		.section	.text.timer_init,"ax",%progbits
 133              		.align	2
 134              		.global	timer_init
 136              	timer_init:
 137              	.LFB22:
 195:comm/timer.c  **** 
 196:comm/timer.c  **** void timer_init(void)
 197:comm/timer.c  **** {
 138              		.loc 1 197 0
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              	.LVL7:
 142 0000 04E02DE5 		str	lr, [sp, #-4]!
 143              	.LCFI0:
 198:comm/timer.c  **** 	/* configure TIMER2 for our purpose */
 199:comm/timer.c  **** 	hwtimer_enable(2, 1);
 144              		.loc 1 199 0
 145 0004 0200A0E3 		mov	r0, #2
 146 0008 0110A0E3 		mov	r1, #1
 147 000c FEFFFFEB 		bl	hwtimer_enable
 200:comm/timer.c  **** 	/* The timer runs at 13MHz / 32, i.e. 406.25kHz */
 201:comm/timer.c  **** #if (HZ == 100)
 202:comm/timer.c  **** 	hwtimer_load(2, 4062);
 148              		.loc 1 202 0
 149 0010 0200A0E3 		mov	r0, #2
 150 0014 48109FE5 		ldr	r1, .L15
 151 0018 FEFFFFEB 		bl	hwtimer_load
 203:comm/timer.c  **** 	hwtimer_config(2, 0, 1);
 152              		.loc 1 203 0
 153 001c 0120A0E3 		mov	r2, #1
 154 0020 0200A0E3 		mov	r0, #2
 155 0024 0010A0E3 		mov	r1, #0
 156 0028 FEFFFFEB 		bl	hwtimer_config
 204:comm/timer.c  **** #elif (HZ == 10)
 205:comm/timer.c  **** 	/* prescaler 4, 1015 ticks until expiry */
 206:comm/timer.c  **** 	hwtimer_load(2, 1015);
 207:comm/timer.c  **** 	hwtimer_config(2, 4, 1);
 208:comm/timer.c  **** #endif
 209:comm/timer.c  **** 	hwtimer_enable(2, 1);
 157              		.loc 1 209 0
 158 002c 0200A0E3 		mov	r0, #2
 159 0030 0110A0E3 		mov	r1, #1
 160 0034 FEFFFFEB 		bl	hwtimer_enable
 210:comm/timer.c  **** 
 211:comm/timer.c  **** 	/* register interrupt handler with default priority, EDGE triggered */
 212:comm/timer.c  **** 	irq_register_handler(IRQ_TIMER2, &timer_irq);
 161              		.loc 1 212 0
 162 0038 0200A0E3 		mov	r0, #2
 163 003c 24109FE5 		ldr	r1, .L15+4
 164 0040 FEFFFFEB 		bl	irq_register_handler
 213:comm/timer.c  **** 	irq_config(IRQ_TIMER2, 0, 1, -1);
 165              		.loc 1 213 0
 166 0044 0200A0E3 		mov	r0, #2
 167 0048 0010A0E3 		mov	r1, #0
 168 004c 0120A0E3 		mov	r2, #1
 169 0050 0030E0E3 		mvn	r3, #0
 170 0054 FEFFFFEB 		bl	irq_config
 214:comm/timer.c  **** 	irq_enable(IRQ_TIMER2);
 171              		.loc 1 214 0
 172 0058 0200A0E3 		mov	r0, #2
 215:comm/timer.c  **** }
 173              		.loc 1 215 0
 174 005c 04E09DE4 		ldr	lr, [sp], #4
 175              		.loc 1 214 0
 176 0060 FEFFFFEA 		b	irq_enable
 177              	.L16:
 178              		.align	2
 179              	.L15:
 180 0064 DE0F0000 		.word	4062
 181 0068 00000000 		.word	timer_irq
 182              	.LFE22:
 184              		.section	.text.osmo_timer_add,"ax",%progbits
 185              		.align	2
 186              		.global	osmo_timer_add
 188              	osmo_timer_add:
 189              	.LFB15:
 190              		.loc 1 43 0
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194              	.LVL8:
 195              		.loc 1 47 0
 196 0000 0C30D0E5 		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 197 0004 013083E3 		orr	r3, r3, #1
 198 0008 0C30C0E5 		strb	r3, [r0, #12]
 199              	.LBB8:
 200              		.loc 1 50 0
 201 000c 40309FE5 		ldr	r3, .L24
 202 0010 002093E5 		ldr	r2, [r3, #0]
 203              	.LVL9:
 204              	.LBE8:
 205              		.loc 1 43 0
 206              		@ lr needed for prologue
 207 0014 070000EA 		b	.L18
 208              	.L19:
 209              		.loc 1 51 0
 210 0018 020050E1 		cmp	r0, r2
 211 001c 1EFF2F01 		bxeq	lr
 212              	.LBB9:
 213              		.loc 1 50 0
 214 0020 002092E5 		ldr	r2, [r2, #0]
 215              	.L18:
 216              	.LBE9:
 217 0024 28309FE5 		ldr	r3, .L24
 218 0028 030052E1 		cmp	r2, r3
 219 002c 0400001A 		bne	.L19
 220              		.loc 1 54 0
 221 0030 0C30D0E5 		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 222 0034 043083E3 		orr	r3, r3, #4
 223 0038 0C30C0E5 		strb	r3, [r0, #12]
 224              	.LBB10:
 225              	.LBB11:
 226              		.loc 2 82 0
 227 003c 003092E5 		ldr	r3, [r2, #0]
 228              	.LVL10:
 229              	.LBB12:
 230              		.loc 2 67 0
 231 0040 003080E5 		str	r3, [r0, #0]
 232              		.loc 2 66 0
 233 0044 040083E5 		str	r0, [r3, #4]
 234              		.loc 2 69 0
 235 0048 000082E5 		str	r0, [r2, #0]
 236              		.loc 2 68 0
 237 004c 042080E5 		str	r2, [r0, #4]
 238 0050 1EFF2FE1 		bx	lr
 239              	.L25:
 240              		.align	2
 241              	.L24:
 242 0054 00000000 		.word	timer_list
 243              	.LBE12:
 244              	.LBE11:
 245              	.LBE10:
 246              	.LFE15:
 248              		.global	__divsi3
 249              		.section	.text.osmo_timer_schedule,"ax",%progbits
 250              		.align	2
 251              		.global	osmo_timer_schedule
 253              	osmo_timer_schedule:
 254              	.LFB16:
 255              		.loc 1 59 0
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258              	.LVL11:
 259 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 260              	.LCFI1:
 261              		.loc 1 60 0
 262 0004 24309FE5 		ldr	r3, .L28
 263              		.loc 1 59 0
 264 0008 0050A0E1 		mov	r5, r0
 265              		.loc 1 60 0
 266 000c 0100A0E1 		mov	r0, r1
 267              	.LVL12:
 268 0010 0A10A0E3 		mov	r1, #10
 269              	.LVL13:
 270 0014 004093E5 		ldr	r4, [r3, #0]
 271 0018 FEFFFFEB 		bl	__divsi3
 272              	.LVL14:
 273 001c 004084E0 		add	r4, r4, r0
 274              		.loc 1 61 0
 275 0020 0500A0E1 		mov	r0, r5
 276              		.loc 1 60 0
 277 0024 084085E5 		str	r4, [r5, #8]
 278              		.loc 1 62 0
 279 0028 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 280              		.loc 1 61 0
 281 002c FEFFFFEA 		b	osmo_timer_add
 282              	.L29:
 283              		.align	2
 284              	.L28:
 285 0030 00000000 		.word	jiffies
 286              	.LFE16:
 288              		.section	.text.osmo_timers_update,"ax",%progbits
 289              		.align	2
 290              		.global	osmo_timers_update
 292              	osmo_timers_update:
 293              	.LFB19:
 294              		.loc 1 133 0
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              	.LVL15:
 298 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 299              	.LCFI2:
 300              	.LBB13:
 301              		.loc 1 152 0
 302 0004 D0309FE5 		ldr	r3, .L47
 303 0008 002093E5 		ldr	r2, [r3, #0]
 304              	.LVL16:
 305 000c 060000EA 		b	.L31
 306              	.L32:
 307              	.LBE13:
 308              		.loc 1 153 0
 309 0010 0C30D2E5 		ldrb	r3, [r2, #12]	@ zero_extendqisi2
 310 0014 0230C3E3 		bic	r3, r3, #2
 311 0018 0C30C2E5 		strb	r3, [r2, #12]
 312              	.LBB14:
 313              		.loc 1 152 0
 314 001c 002092E5 		ldr	r2, [r2, #0]
 315              	.L31:
 316              	.LBE14:
 317 0020 B4309FE5 		ldr	r3, .L47
 318 0024 030052E1 		cmp	r2, r3
 319 0028 0200001A 		bne	.L32
 320 002c 0050A0E3 		mov	r5, #0
 321              	.LVL17:
 322              	.L34:
 323              	.LBB15:
 324              		.loc 1 157 0
 325 0030 A4309FE5 		ldr	r3, .L47
 326 0034 00C093E5 		ldr	ip, [r3, #0]
 327              	.LVL18:
 328 0038 0C10A0E1 		mov	r1, ip
 329              	.LVL19:
 330 003c 220000EA 		b	.L35
 331              	.L36:
 332              	.LBE15:
 333              		.loc 1 158 0
 334 0040 0C00D1E5 		ldrb	r0, [r1, #12]	@ zero_extendqisi2
 335 0044 020010E3 		tst	r0, #2
 336 0048 2100001A 		bne	.L37
 337 004c 8C309FE5 		ldr	r3, .L47+4
 338 0050 002093E5 		ldr	r2, [r3, #0]
 339              	.LVL20:
 340 0054 083091E5 		ldr	r3, [r1, #8]
 341 0058 033062E0 		rsb	r3, r2, r3
 342 005c 000053E3 		cmp	r3, #0
 343 0060 210000AA 		bge	.L37
 344              		.loc 1 159 0
 345 0064 023080E3 		orr	r3, r0, #2
 346 0068 0C30C1E5 		strb	r3, [r1, #12]
 347              		.loc 1 160 0
 348 006c 0C30D1E5 		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 349 0070 0130C3E3 		bic	r3, r3, #1
 350 0074 0C30C1E5 		strb	r3, [r1, #12]
 351              		.loc 1 161 0
 352 0078 140091E5 		ldr	r0, [r1, #20]
 353 007c 0FE0A0E1 		mov	lr, pc
 354 0080 10F091E5 		ldr	pc, [r1, #16]
 355              	.LVL21:
 356 0084 0150A0E3 		mov	r5, #1
 357 0088 0A0000EA 		b	.L34
 358              	.LVL22:
 359              	.L37:
 360              	.LBB16:
 361              		.loc 1 157 0
 362 008c 001091E5 		ldr	r1, [r1, #0]
 363              	.L35:
 364              	.LBE16:
 365 0090 44309FE5 		ldr	r3, .L47
 366 0094 030051E1 		cmp	r1, r3
 367 0098 0E00001A 		bne	.L36
 368              	.LBB17:
 369              		.loc 1 167 0
 370 009c 00409CE5 		ldr	r4, [ip, #0]
 371              	.LVL23:
 372 00a0 2F0000EA 		b	.L41
 373              	.LVL24:
 374              	.L42:
 375              	.LBE17:
 376              		.loc 1 168 0
 377 00a4 0C30DCE5 		ldrb	r3, [ip, #12]	@ zero_extendqisi2
 378 00a8 0230C3E3 		bic	r3, r3, #2
 379 00ac 0C30CCE5 		strb	r3, [ip, #12]
 380              		.loc 1 169 0
 381 00b0 0C30DCE5 		ldrb	r3, [ip, #12]	@ zero_extendqisi2
 382 00b4 010013E3 		tst	r3, #1
 383              	.LVL25:
 384              		.loc 1 170 0
 385 00b8 FEFFFF0B 		bleq	osmo_timer_del
 386              	.LVL26:
 387              	.L43:
 388              	.LBB18:
 389              		.loc 1 167 0
 390 00bc 04C0A0E1 		mov	ip, r4
 391 00c0 004094E5 		ldr	r4, [r4, #0]
 392              	.L41:
 393              	.LBE18:
 394 00c4 10309FE5 		ldr	r3, .L47
 395 00c8 03005CE1 		cmp	ip, r3
 396              		.loc 1 170 0
 397 00cc 0C00A0E1 		mov	r0, ip
 398              		.loc 1 167 0
 399 00d0 2700001A 		bne	.L42
 400              	.LVL27:
 401              		.loc 1 175 0
 402 00d4 0500A0E1 		mov	r0, r5
 403              	.LVL28:
 404 00d8 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 405              	.L48:
 406              		.align	2
 407              	.L47:
 408 00dc 00000000 		.word	timer_list
 409 00e0 00000000 		.word	jiffies
 410              	.LFE19:
 412              		.section	.text.osmo_timers_check,"ax",%progbits
 413              		.align	2
 414              		.global	osmo_timers_check
 416              	osmo_timers_check:
 417              	.LFB20:
 418              		.loc 1 178 0
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 422              	.LVL29:
 423              	.LBB19:
 424              		.loc 1 182 0
 425 0000 20309FE5 		ldr	r3, .L54
 426 0004 002093E5 		ldr	r2, [r3, #0]
 427              	.LVL30:
 428 0008 0000A0E3 		mov	r0, #0
 429              	.LVL31:
 430              	.LBE19:
 431              		.loc 1 178 0
 432              		@ lr needed for prologue
 433 000c 040000EA 		b	.L50
 434              	.L51:
 435              	.LBB20:
 436              		.loc 1 182 0
 437 0010 002092E5 		ldr	r2, [r2, #0]
 438              	.LBE20:
 439              		.loc 1 183 0
 440 0014 010080E2 		add	r0, r0, #1
 441              	.L50:
 442              		.loc 1 182 0
 443 0018 08309FE5 		ldr	r3, .L54
 444 001c 030052E1 		cmp	r2, r3
 445 0020 0200001A 		bne	.L51
 446              		.loc 1 186 0
 447 0024 1EFF2FE1 		bx	lr
 448              	.L55:
 449              		.align	2
 450              	.L54:
 451 0028 00000000 		.word	timer_list
 452              	.LFE20:
 454              		.comm	jiffies,4,4
 563              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccQwtfbW.s:14     .data:0000000000000000 timer_list
     /tmp/ccQwtfbW.s:15     .data:0000000000000000 $d
     /tmp/ccQwtfbW.s:21     .text.osmo_timer_del:0000000000000000 osmo_timer_del
     /tmp/ccQwtfbW.s:30     .text.osmo_timer_del:0000000000000000 $a
     /tmp/ccQwtfbW.s:77     .text.osmo_timer_del:0000000000000044 $d
     /tmp/ccQwtfbW.s:87     .text.osmo_timer_pending:0000000000000000 osmo_timer_pending
     /tmp/ccQwtfbW.s:94     .text.osmo_timer_pending:0000000000000000 $a
     /tmp/ccQwtfbW.s:107    .text.timer_irq:0000000000000000 timer_irq
     /tmp/ccQwtfbW.s:115    .text.timer_irq:0000000000000000 $a
     /tmp/ccQwtfbW.s:129    .text.timer_irq:0000000000000014 $d
                            *COM*:0000000000000004 jiffies
     /tmp/ccQwtfbW.s:136    .text.timer_init:0000000000000000 timer_init
     /tmp/ccQwtfbW.s:142    .text.timer_init:0000000000000000 $a
     /tmp/ccQwtfbW.s:180    .text.timer_init:0000000000000064 $d
     /tmp/ccQwtfbW.s:188    .text.osmo_timer_add:0000000000000000 osmo_timer_add
     /tmp/ccQwtfbW.s:196    .text.osmo_timer_add:0000000000000000 $a
     /tmp/ccQwtfbW.s:242    .text.osmo_timer_add:0000000000000054 $d
     /tmp/ccQwtfbW.s:253    .text.osmo_timer_schedule:0000000000000000 osmo_timer_schedule
     /tmp/ccQwtfbW.s:259    .text.osmo_timer_schedule:0000000000000000 $a
     /tmp/ccQwtfbW.s:285    .text.osmo_timer_schedule:0000000000000030 $d
     /tmp/ccQwtfbW.s:292    .text.osmo_timers_update:0000000000000000 osmo_timers_update
     /tmp/ccQwtfbW.s:298    .text.osmo_timers_update:0000000000000000 $a
     /tmp/ccQwtfbW.s:408    .text.osmo_timers_update:00000000000000dc $d
     /tmp/ccQwtfbW.s:416    .text.osmo_timers_check:0000000000000000 osmo_timers_check
     /tmp/ccQwtfbW.s:425    .text.osmo_timers_check:0000000000000000 $a
     /tmp/ccQwtfbW.s:451    .text.osmo_timers_check:0000000000000028 $d

UNDEFINED SYMBOLS
keypad_poll
hwtimer_enable
hwtimer_load
hwtimer_config
irq_register_handler
irq_config
irq_enable
__divsi3
