   1              		.file	"msgb.c"
   9              	.Ltext0:
  10              		.section	.rodata.str1.4,"aMS",%progbits,1
  11              		.align	2
  12              	.LC0:
  13 0000 756E6162 		.ascii	"unable to allocate msgb\012\000"
  13      6C652074 
  13      6F20616C 
  13      6C6F6361 
  13      7465206D 
  14 0019 000000   		.section	.text._talloc_zero,"ax",%progbits
  15              		.align	2
  16              		.global	_talloc_zero
  18              	_talloc_zero:
  19              	.LFB38:
  20              		.file 1 "comm/msgb.c"
   1:comm/msgb.c   **** /* (C) 2008-2010 by Harald Welte <laforge@gnumonks.org>
   2:comm/msgb.c   ****  * All Rights Reserved
   3:comm/msgb.c   ****  *
   4:comm/msgb.c   ****  * This program is free software; you can redistribute it and/or modify
   5:comm/msgb.c   ****  * it under the terms of the GNU General Public License as published by
   6:comm/msgb.c   ****  * the Free Software Foundation; either version 2 of the License, or
   7:comm/msgb.c   ****  * (at your option) any later version.
   8:comm/msgb.c   ****  *
   9:comm/msgb.c   ****  * This program is distributed in the hope that it will be useful,
  10:comm/msgb.c   ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:comm/msgb.c   ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:comm/msgb.c   ****  * GNU General Public License for more details.
  13:comm/msgb.c   ****  *
  14:comm/msgb.c   ****  * You should have received a copy of the GNU General Public License along
  15:comm/msgb.c   ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  16:comm/msgb.c   ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  17:comm/msgb.c   ****  *
  18:comm/msgb.c   ****  */
  19:comm/msgb.c   **** 
  20:comm/msgb.c   **** 
  21:comm/msgb.c   **** #include <stdint.h>
  22:comm/msgb.c   **** #include <stdio.h>
  23:comm/msgb.c   **** #include <string.h>
  24:comm/msgb.c   **** #include <sys/types.h>
  25:comm/msgb.c   **** #include <asm/system.h>
  26:comm/msgb.c   **** 
  27:comm/msgb.c   **** #include <debug.h>
  28:comm/msgb.c   **** #include <delay.h>
  29:comm/msgb.c   **** #include <console.h>
  30:comm/msgb.c   **** 
  31:comm/msgb.c   **** #include <osmocom/core/msgb.h>
  32:comm/msgb.c   **** 
  33:comm/msgb.c   **** #define NO_TALLOC
  34:comm/msgb.c   **** 
  35:comm/msgb.c   **** #ifdef NO_TALLOC
  36:comm/msgb.c   **** /* This is a poor mans static allocator for msgb objects */
  37:comm/msgb.c   **** #define MSGB_DATA_SIZE	256+4
  38:comm/msgb.c   **** #define MSGB_NUM	32
  39:comm/msgb.c   **** struct supermsg {
  40:comm/msgb.c   **** 	uint8_t allocated;
  41:comm/msgb.c   **** 	struct msgb msg;
  42:comm/msgb.c   **** 	uint8_t buf[MSGB_DATA_SIZE];
  43:comm/msgb.c   **** };
  44:comm/msgb.c   **** static struct supermsg msgs[MSGB_NUM];
  45:comm/msgb.c   **** void *_talloc_zero(void *ctx, unsigned int size, const char *name)
  46:comm/msgb.c   **** {
  21              		.loc 1 46 0
  22              		@ args = 0, pretend = 0, frame = 0
  23              		@ frame_needed = 0, uses_anonymous_args = 0
  24              	.LVL0:
  25 0000 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
  26              	.LCFI0:
  27              	.LBB2:
  47:comm/msgb.c   **** 	unsigned long flags;
  48:comm/msgb.c   **** 	unsigned int i;
  49:comm/msgb.c   **** 
  50:comm/msgb.c   **** 	local_firq_save(flags);
  28              		.loc 1 50 0
  29 0004 00800FE1 		mrs	r8, cpsr		@ local_firq_save
  30 0008 C03088E3 		orr	r3, r8, #0xC0
  31 000c 03F021E1 		msr	cpsr_c, r3
  32              	.LVL1:
  33              	.LBE2:
  51:comm/msgb.c   **** 
  52:comm/msgb.c   **** 	if (size > sizeof(struct msgb) + MSGB_DATA_SIZE)
  34              		.loc 1 52 0
  35 0010 520F51E3 		cmp	r1, #328
  36 0014 0D00008A 		bhi	.L2
  53:comm/msgb.c   **** 		goto panic;
  37              		.loc 1 53 0
  38 0018 74309FE5 		ldr	r3, .L11
  39              	.LVL2:
  40 001c 0040A0E3 		mov	r4, #0
  41              	.LVL3:
  42              	.L4:
  54:comm/msgb.c   **** 
  55:comm/msgb.c   **** 	for (i = 0; i < ARRAY_SIZE(msgs); i++) {
  56:comm/msgb.c   **** 		if (!msgs[i].allocated) {
  43              		.loc 1 56 0
  44 0020 0070D3E5 		ldrb	r7, [r3, #0]	@ zero_extendqisi2
  45 0024 000057E3 		cmp	r7, #0
  46              		.loc 1 55 0
  47 0028 533F83E2 		add	r3, r3, #332
  48              		.loc 1 56 0
  49 002c 1000000A 		beq	.L9
  50              		.loc 1 55 0
  51 0030 014084E2 		add	r4, r4, #1
  52 0034 200054E3 		cmp	r4, #32
  53 0038 0600001A 		bne	.L4
  54              	.LVL4:
  55              	.L2:
  57:comm/msgb.c   **** 			msgs[i].allocated = 1;
  58:comm/msgb.c   **** 			memset(&msgs[i].msg, 0, sizeof(msgs[i].msg));
  59:comm/msgb.c   **** 			memset(&msgs[i].buf, 0, sizeof(msgs[i].buf));
  60:comm/msgb.c   **** 			local_irq_restore(flags);
  61:comm/msgb.c   **** 			return &msgs[i].msg;
  62:comm/msgb.c   **** 		}
  63:comm/msgb.c   **** 	}
  64:comm/msgb.c   **** 
  65:comm/msgb.c   **** panic:
  66:comm/msgb.c   **** 	cons_puts("unable to allocate msgb\n");
  56              		.loc 1 66 0
  57 003c 54009FE5 		ldr	r0, .L11+4
  58              	.LVL5:
  59 0040 FEFFFFEB 		bl	cons_puts
  60              	.LVL6:
  61              	.L7:
  62 0044 0F0000EA 		b	.L7
  63              	.LVL7:
  64              	.L9:
  65              		.loc 1 57 0
  66 0048 533FA0E3 		mov	r3, #332
  67 004c 930404E0 		mul	r4, r3, r4
  68              	.LVL8:
  69 0050 3C509FE5 		ldr	r5, .L11
  70              		.loc 1 58 0
  71 0054 046084E2 		add	r6, r4, #4
  72              		.loc 1 57 0
  73 0058 0130A0E3 		mov	r3, #1
  74              		.loc 1 58 0
  75 005c 056086E0 		add	r6, r6, r5
  76              		.loc 1 57 0
  77 0060 0530C4E7 		strb	r3, [r4, r5]
  78              		.loc 1 58 0
  79 0064 0710A0E1 		mov	r1, r7
  80              	.LVL9:
  81 0068 0600A0E1 		mov	r0, r6
  82              	.LVL10:
  83 006c 4420A0E3 		mov	r2, #68
  84              	.LVL11:
  85              		.loc 1 59 0
  86 0070 484084E2 		add	r4, r4, #72
  87              		.loc 1 58 0
  88 0074 FEFFFFEB 		bl	memset
  89              		.loc 1 59 0
  90 0078 050084E0 		add	r0, r4, r5
  91 007c 0710A0E1 		mov	r1, r7
  92 0080 412FA0E3 		mov	r2, #260
  93 0084 FEFFFFEB 		bl	memset
  94              		.loc 1 60 0
  95 0088 08F021E1 		msr	cpsr_c, r8		@ local_irq_restore
  96              	
  67:comm/msgb.c   **** 	while (1);
  68:comm/msgb.c   **** 
  69:comm/msgb.c   **** 	return NULL; /* not reached */
  70:comm/msgb.c   **** }
  97              		.loc 1 70 0
  98 008c 0600A0E1 		mov	r0, r6
  99 0090 F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
 100              	.L12:
 101              		.align	2
 102              	.L11:
 103 0094 00000000 		.word	msgs
 104 0098 00000000 		.word	.LC0
 105              	.LFE38:
 107              		.section	.text.talloc_free,"ax",%progbits
 108              		.align	2
 109              		.global	talloc_free
 111              	talloc_free:
 112              	.LFB39:
  71:comm/msgb.c   **** void talloc_free(void *msg)
  72:comm/msgb.c   **** {
 113              		.loc 1 72 0
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117              	.LVL12:
  73:comm/msgb.c   **** 	struct supermsg *smsg = container_of(msg, struct supermsg, msg);
 118              		.loc 1 73 0
 119 0000 0030A0E3 		mov	r3, #0
 120              		.loc 1 72 0
 121              		@ lr needed for prologue
 122              		.loc 1 73 0
 123 0004 043040E5 		strb	r3, [r0, #-4]
  74:comm/msgb.c   **** 	/* no locking required, since this is atomic */
  75:comm/msgb.c   **** 	smsg->allocated = 0;
  76:comm/msgb.c   **** }
 124              		.loc 1 76 0
 125 0008 1EFF2FE1 		bx	lr
 126              	.LFE39:
 128              		.bss
 129              		.align	2
 130              	msgs:
 131 0000 00000000 		.space	10624
 131      00000000 
 131      00000000 
 131      00000000 
 131      00000000 
 183              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 msgb.c
     /tmp/ccQgimYM.s:18     .text._talloc_zero:0000000000000000 _talloc_zero
     /tmp/ccQgimYM.s:25     .text._talloc_zero:0000000000000000 $a
     /tmp/ccQgimYM.s:103    .text._talloc_zero:0000000000000094 $d
     /tmp/ccQgimYM.s:130    .bss:0000000000000000 msgs
     /tmp/ccQgimYM.s:111    .text.talloc_free:0000000000000000 talloc_free
     /tmp/ccQgimYM.s:119    .text.talloc_free:0000000000000000 $a
                             .bss:0000000000000000 $d

UNDEFINED SYMBOLS
cons_puts
memset
