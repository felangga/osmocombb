   1              		.file	"readfile.c"
   9              	.Ltext0:
  10              		.section	.rodata.str1.4,"aMS",%progbits,1
  11              		.align	2
  12              	.LC0:
  13 0000 54494646 		.ascii	"TIFFS error: inode #%x has no valid termination\012"
  13      53206572 
  13      726F723A 
  13      20696E6F 
  13      64652023 
  14 0030 00       		.ascii	"\000"
  15              		.section	.text.find_endofchunk,"ax",%progbits
  16              		.align	2
  18              	find_endofchunk:
  19              	.LFB4:
  20              		.file 1 "tiffs/readfile.c"
   1:tiffs/readfile.c **** /* TIFFS (TI Flash File System) reader implementation */
   2:tiffs/readfile.c **** 
   3:tiffs/readfile.c **** /*
   4:tiffs/readfile.c ****  * This code was written by Mychaela Falconia <falcon@freecalypso.org>
   5:tiffs/readfile.c ****  * who refuses to claim copyright on it and has released it as public domain
   6:tiffs/readfile.c ****  * instead. NO rights reserved, all rights relinquished.
   7:tiffs/readfile.c ****  *
   8:tiffs/readfile.c ****  * Tweaked (coding style changes) by Vadim Yanitskiy <axilirator@gmail.com>
   9:tiffs/readfile.c ****  *
  10:tiffs/readfile.c ****  * This program is free software; you can redistribute it and/or modify
  11:tiffs/readfile.c ****  * it under the terms of the GNU General Public License as published by
  12:tiffs/readfile.c ****  * the Free Software Foundation; either version 2 of the License, or
  13:tiffs/readfile.c ****  * (at your option) any later version.
  14:tiffs/readfile.c ****  *
  15:tiffs/readfile.c ****  * This program is distributed in the hope that it will be useful,
  16:tiffs/readfile.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17:tiffs/readfile.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  18:tiffs/readfile.c ****  * GNU General Public License for more details.
  19:tiffs/readfile.c ****  *
  20:tiffs/readfile.c ****  * You should have received a copy of the GNU General Public License along
  21:tiffs/readfile.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  22:tiffs/readfile.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  23:tiffs/readfile.c ****  *
  24:tiffs/readfile.c ****  */
  25:tiffs/readfile.c **** 
  26:tiffs/readfile.c **** #include <stdio.h>
  27:tiffs/readfile.c **** #include <stdint.h>
  28:tiffs/readfile.c **** #include <string.h>
  29:tiffs/readfile.c **** 
  30:tiffs/readfile.c **** #include <tiffs.h>
  31:tiffs/readfile.c **** #include "globals.h"
  32:tiffs/readfile.c **** 
  33:tiffs/readfile.c **** extern char *index();
  34:tiffs/readfile.c **** 
  35:tiffs/readfile.c **** #define	MAX_FN_COMPONENT	20
  36:tiffs/readfile.c **** 
  37:tiffs/readfile.c **** static unsigned find_named_child(unsigned start, const char *seekname)
  38:tiffs/readfile.c **** {
  39:tiffs/readfile.c **** 	struct tiffs_inode *irec;
  40:tiffs/readfile.c **** 	unsigned ino;
  41:tiffs/readfile.c **** 
  42:tiffs/readfile.c **** 	for (ino = start; ino != 0xFFFF; ino = irec->sibling) {
  43:tiffs/readfile.c **** 		irec = tiffs_active_index + ino;
  44:tiffs/readfile.c **** 		if (!irec->type)
  45:tiffs/readfile.c **** 			continue;
  46:tiffs/readfile.c **** 		if (!strcmp((const char *) INODE_TO_DATAPTR(irec), seekname))
  47:tiffs/readfile.c **** 			return ino;
  48:tiffs/readfile.c **** 	}
  49:tiffs/readfile.c **** 
  50:tiffs/readfile.c **** 	return 0;
  51:tiffs/readfile.c **** }
  52:tiffs/readfile.c **** 
  53:tiffs/readfile.c **** static int pathname_to_inode(const char *pathname)
  54:tiffs/readfile.c **** {
  55:tiffs/readfile.c **** 	char seekname[MAX_FN_COMPONENT + 1];
  56:tiffs/readfile.c **** 	struct tiffs_inode *irec;
  57:tiffs/readfile.c **** 	const char *cur, *next;
  58:tiffs/readfile.c **** 	unsigned ino, namelen;
  59:tiffs/readfile.c **** 
  60:tiffs/readfile.c **** 	cur = pathname;
  61:tiffs/readfile.c **** 	if (*cur == '/')
  62:tiffs/readfile.c **** 		cur++;
  63:tiffs/readfile.c **** 
  64:tiffs/readfile.c **** 	for (ino = tiffs_root_ino; cur; cur = next) {
  65:tiffs/readfile.c **** 		if (!*cur)
  66:tiffs/readfile.c **** 			break;
  67:tiffs/readfile.c **** 
  68:tiffs/readfile.c **** 		next = index(cur, '/');
  69:tiffs/readfile.c **** 		if (next == cur) {
  70:tiffs/readfile.c **** 			puts("Malformed TIFFS pathname: multiple adjacent slashes\n");
  71:tiffs/readfile.c **** 			return -1;
  72:tiffs/readfile.c **** 		} else if (next) {
  73:tiffs/readfile.c **** 			namelen = next - cur;
  74:tiffs/readfile.c **** 			next++;
  75:tiffs/readfile.c **** 		} else {
  76:tiffs/readfile.c **** 			namelen = strlen(cur);
  77:tiffs/readfile.c **** 		}
  78:tiffs/readfile.c **** 
  79:tiffs/readfile.c **** 		if (namelen > MAX_FN_COMPONENT) {
  80:tiffs/readfile.c **** 			puts("Malformed TIFFS pathname: component name too long\n");
  81:tiffs/readfile.c **** 			return -1;
  82:tiffs/readfile.c **** 		}
  83:tiffs/readfile.c **** 
  84:tiffs/readfile.c **** 		memcpy(seekname, cur, namelen);
  85:tiffs/readfile.c **** 		seekname[namelen] = '\0';
  86:tiffs/readfile.c **** 
  87:tiffs/readfile.c **** 		irec = tiffs_active_index + ino;
  88:tiffs/readfile.c **** 		if (irec->type != TIFFS_OBJTYPE_DIR) {
  89:tiffs/readfile.c **** 			/* printf("Error: non-terminal non-directory\n"); */
  90:tiffs/readfile.c **** 			return 0;
  91:tiffs/readfile.c **** 		}
  92:tiffs/readfile.c **** 		ino = find_named_child(irec->descend, seekname);
  93:tiffs/readfile.c **** 		if (!ino) {
  94:tiffs/readfile.c **** 			/* printf("Error: pathname component not found\n"); */
  95:tiffs/readfile.c **** 			return 0;
  96:tiffs/readfile.c **** 		}
  97:tiffs/readfile.c **** 	}
  98:tiffs/readfile.c **** 
  99:tiffs/readfile.c **** 	return ino;
 100:tiffs/readfile.c **** }
 101:tiffs/readfile.c **** 
 102:tiffs/readfile.c **** static uint8_t *find_endofchunk(int ino)
 103:tiffs/readfile.c **** {
  21              		.loc 1 103 0
  22              		@ args = 0, pretend = 0, frame = 0
  23              		@ frame_needed = 0, uses_anonymous_args = 0
  24              	.LVL0:
  25 0000 10402DE9 		stmfd	sp!, {r4, lr}
  26              	.LCFI0:
 104:tiffs/readfile.c **** 	struct tiffs_inode *irec;
 105:tiffs/readfile.c **** 	uint8_t *ptr;
 106:tiffs/readfile.c **** 	int i;
 107:tiffs/readfile.c **** 
 108:tiffs/readfile.c **** 	irec = tiffs_active_index + ino;
  27              		.loc 1 108 0
  28 0004 58309FE5 		ldr	r3, .L9
  29 0008 001093E5 		ldr	r1, [r3, #0]
  30 000c 0022A0E1 		mov	r2, r0, asl #4
  31 0010 023081E0 		add	r3, r1, r2
  32              	.LVL1:
  33              		.loc 1 103 0
  34 0014 00C0A0E1 		mov	ip, r0
 109:tiffs/readfile.c **** 	ptr = INODE_TO_DATAPTR(irec) + irec->len;
  35              		.loc 1 109 0
  36 0018 080093E5 		ldr	r0, [r3, #8]
  37              	.LVL2:
  38 001c 44309FE5 		ldr	r3, .L9+4
  39              	.LVL3:
  40 0020 003093E5 		ldr	r3, [r3, #0]
  41 0024 B22091E1 		ldrh	r2, [r1, r2]
  42 0028 003283E0 		add	r3, r3, r0, asl #4
  43 002c 024083E0 		add	r4, r3, r2
  44              	.LVL4:
  45 0030 1020A0E3 		mov	r2, #16
  46              	.L2:
 110:tiffs/readfile.c **** 
 111:tiffs/readfile.c **** 	for (i = 0; i < 16; i++) {
 112:tiffs/readfile.c **** 		ptr--;
 113:tiffs/readfile.c **** 		if (!*ptr)
  47              		.loc 1 113 0
  48 0034 013074E5 		ldrb	r3, [r4, #-1]!	@ zero_extendqisi2
  49 0038 000053E3 		cmp	r3, #0
  50 003c 1500000A 		beq	.L3
 114:tiffs/readfile.c **** 			return ptr;
 115:tiffs/readfile.c **** 		if (*ptr != 0xFF)
  51              		.loc 1 115 0
  52 0040 FF0053E3 		cmp	r3, #255
  53 0044 1200001A 		bne	.L5
  54              		.loc 1 111 0
  55 0048 012052E2 		subs	r2, r2, #1
  56 004c 0B00001A 		bne	.L2
  57              	.L5:
 116:tiffs/readfile.c **** 			break;
 117:tiffs/readfile.c **** 	}
 118:tiffs/readfile.c **** 
 119:tiffs/readfile.c **** 	printf("TIFFS error: inode #%x has no valid termination\n", ino);
  58              		.loc 1 119 0
  59 0050 0C10A0E1 		mov	r1, ip
  60 0054 10009FE5 		ldr	r0, .L9+8
  61 0058 FEFFFFEB 		bl	printf
  62              	.LVL5:
  63              	.L3:
 120:tiffs/readfile.c **** 	return ptr; /* XXX */
 121:tiffs/readfile.c **** }
  64              		.loc 1 121 0
  65 005c 0400A0E1 		mov	r0, r4
  66 0060 1080BDE8 		ldmfd	sp!, {r4, pc}
  67              	.L10:
  68              		.align	2
  69              	.L9:
  70 0064 00000000 		.word	tiffs_active_index
  71 0068 00000000 		.word	tiffs_base_addr
  72 006c 00000000 		.word	.LC0
  73              	.LFE4:
  75              		.section	.rodata.str1.4
  76 0031 000000   		.align	2
  77              	.LC1:
  78 0034 54494646 		.ascii	"TIFFS reader is not initialized\012\000"
  78      53207265 
  78      61646572 
  78      20697320 
  78      6E6F7420 
  79 0055 000000   		.align	2
  80              	.LC2:
  81 0058 4D616C66 		.ascii	"Malformed TIFFS pathname: multiple adjacent slashes"
  81      6F726D65 
  81      64205449 
  81      46465320 
  81      70617468 
  82 008b 0A00     		.ascii	"\012\000"
  83 008d 000000   		.align	2
  84              	.LC3:
  85 0090 4D616C66 		.ascii	"Malformed TIFFS pathname: component name too long\012"
  85      6F726D65 
  85      64205449 
  85      46465320 
  85      70617468 
  86 00c2 00       		.ascii	"\000"
  87 00c3 00       		.align	2
  88              	.LC4:
  89 00c4 54494646 		.ascii	"TIFFS error: '%s' is not a regular file\012\000"
  89      53206572 
  89      726F723A 
  89      20272573 
  89      27206973 
  90 00ed 000000   		.align	2
  91              	.LC5:
  92 00f0 54494646 		.ascii	"TIFFS error: '%s' is bigger than the read buffer\012"
  92      53206572 
  92      726F723A 
  92      20272573 
  92      27206973 
  93 0121 00       		.ascii	"\000"
  94 0122 0000     		.align	2
  95              	.LC6:
  96 0124 54494646 		.ascii	"TIFFS error: segment inode #%d: deleted and no sibl"
  96      53206572 
  96      726F723A 
  96      20736567 
  96      6D656E74 
  97 0157 696E670A 		.ascii	"ing\012\000"
  97      00
  98              		.align	2
  99              	.LC7:
 100 015c 54494646 		.ascii	"TIFFS error: inode #%x is not a segment\012\000"
 100      53206572 
 100      726F723A 
 100      20696E6F 
 100      64652023 
 101 0185 000000   		.align	2
 102              	.LC8:
 103 0188 54494646 		.ascii	"TIFFS error: segment inode #%x has bad length\012\000"
 103      53206572 
 103      726F723A 
 103      20736567 
 103      6D656E74 
 104              		.section	.text.tiffs_read_file_maxlen,"ax",%progbits
 105              		.align	2
 106              		.global	tiffs_read_file_maxlen
 108              	tiffs_read_file_maxlen:
 109              	.LFB7:
 122:tiffs/readfile.c **** 
 123:tiffs/readfile.c **** static int get_file_head(const char *pathname, uint8_t **startret,
 124:tiffs/readfile.c **** 			 size_t *sizeret, int *continue_ret)
 125:tiffs/readfile.c **** {
 126:tiffs/readfile.c **** 	struct tiffs_inode *irec;
 127:tiffs/readfile.c **** 	uint8_t *start, *end;
 128:tiffs/readfile.c **** 	int ino, cont, size;
 129:tiffs/readfile.c **** 
 130:tiffs/readfile.c **** 	ino = pathname_to_inode(pathname);
 131:tiffs/readfile.c **** 	if (ino <= 0)
 132:tiffs/readfile.c **** 		return ino;
 133:tiffs/readfile.c **** 
 134:tiffs/readfile.c **** 	irec = tiffs_active_index + ino;
 135:tiffs/readfile.c **** 	if (irec->type != TIFFS_OBJTYPE_FILE) {
 136:tiffs/readfile.c **** 		printf("TIFFS error: '%s' is not a regular file\n", pathname);
 137:tiffs/readfile.c **** 		return -1;
 138:tiffs/readfile.c **** 	}
 139:tiffs/readfile.c **** 
 140:tiffs/readfile.c **** 	start = INODE_TO_DATAPTR(irec);
 141:tiffs/readfile.c **** 	start += strlen((const char *) start) + 1;
 142:tiffs/readfile.c **** 	end = find_endofchunk(ino);
 143:tiffs/readfile.c **** 
 144:tiffs/readfile.c **** 	size = end - start;
 145:tiffs/readfile.c **** 	if (size < 0)
 146:tiffs/readfile.c **** 		size = 0;
 147:tiffs/readfile.c **** 
 148:tiffs/readfile.c **** 	cont = irec->descend;
 149:tiffs/readfile.c **** 	if (cont == 0xFFFF)
 150:tiffs/readfile.c **** 		cont = 0;
 151:tiffs/readfile.c **** 	if (startret)
 152:tiffs/readfile.c **** 		*startret = start;
 153:tiffs/readfile.c **** 	if (sizeret)
 154:tiffs/readfile.c **** 		*sizeret = size;
 155:tiffs/readfile.c **** 	if (continue_ret)
 156:tiffs/readfile.c **** 		*continue_ret = cont;
 157:tiffs/readfile.c **** 
 158:tiffs/readfile.c **** 	return 1;
 159:tiffs/readfile.c **** }
 160:tiffs/readfile.c **** 
 161:tiffs/readfile.c **** static int get_segment(int ino, uint8_t **startret,
 162:tiffs/readfile.c **** 		       size_t *sizeret, int *continue_ret)
 163:tiffs/readfile.c **** {
 164:tiffs/readfile.c **** 	struct tiffs_inode *irec;
 165:tiffs/readfile.c **** 	uint8_t *start, *end;
 166:tiffs/readfile.c **** 	int cont, size;
 167:tiffs/readfile.c **** 
 168:tiffs/readfile.c **** 	for (;;) {
 169:tiffs/readfile.c **** 		irec = tiffs_active_index + ino;
 170:tiffs/readfile.c **** 		if (irec->type)
 171:tiffs/readfile.c **** 			break;
 172:tiffs/readfile.c **** 		if (irec->sibling == 0xFFFF) {
 173:tiffs/readfile.c **** 			printf("TIFFS error: segment inode #%d: "
 174:tiffs/readfile.c **** 				"deleted and no sibling\n", ino);
 175:tiffs/readfile.c **** 			return -1;
 176:tiffs/readfile.c **** 		}
 177:tiffs/readfile.c **** 		ino = irec->sibling;
 178:tiffs/readfile.c **** 	}
 179:tiffs/readfile.c **** 
 180:tiffs/readfile.c **** 	if (irec->type != TIFFS_OBJTYPE_SEGMENT) {
 181:tiffs/readfile.c **** 		printf("TIFFS error: inode #%x is not a segment\n", ino);
 182:tiffs/readfile.c **** 		return -1;
 183:tiffs/readfile.c **** 	}
 184:tiffs/readfile.c **** 
 185:tiffs/readfile.c **** 	start = INODE_TO_DATAPTR(irec);
 186:tiffs/readfile.c **** 	end = find_endofchunk(ino);
 187:tiffs/readfile.c **** 
 188:tiffs/readfile.c **** 	size = end - start;
 189:tiffs/readfile.c **** 	if (size <= 0) {
 190:tiffs/readfile.c **** 		printf("TIFFS error: segment inode #%x has bad length\n", ino);
 191:tiffs/readfile.c **** 		return -1;
 192:tiffs/readfile.c **** 	}
 193:tiffs/readfile.c **** 
 194:tiffs/readfile.c **** 	cont = irec->descend;
 195:tiffs/readfile.c **** 	if (cont == 0xFFFF)
 196:tiffs/readfile.c **** 		cont = 0;
 197:tiffs/readfile.c **** 	if (startret)
 198:tiffs/readfile.c **** 		*startret = start;
 199:tiffs/readfile.c **** 	if (sizeret)
 200:tiffs/readfile.c **** 		*sizeret = size;
 201:tiffs/readfile.c **** 	if (continue_ret)
 202:tiffs/readfile.c **** 		*continue_ret = cont;
 203:tiffs/readfile.c **** 
 204:tiffs/readfile.c **** 	return 0;
 205:tiffs/readfile.c **** }
 206:tiffs/readfile.c **** 
 207:tiffs/readfile.c **** int tiffs_read_file_maxlen(const char *pathname, uint8_t *buf,
 208:tiffs/readfile.c **** 			   size_t maxlen, size_t *lenrtn)
 209:tiffs/readfile.c **** {
 110              		.loc 1 209 0
 111              		@ args = 0, pretend = 0, frame = 28
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              	.LVL6:
 114 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 115              	.LCFI1:
 210:tiffs/readfile.c **** 	size_t chunk_size, real_len, roomleft;
 211:tiffs/readfile.c **** 	uint8_t *chunk_start;
 212:tiffs/readfile.c **** 	int stat, cont;
 213:tiffs/readfile.c **** 
 214:tiffs/readfile.c **** 	if (!tiffs_init_done) {
 116              		.loc 1 214 0
 117 0004 C8C29FE5 		ldr	ip, .L72
 118 0008 00C09CE5 		ldr	ip, [ip, #0]
 119              		.loc 1 209 0
 120 000c 1CD04DE2 		sub	sp, sp, #28
 121              	.LCFI2:
 122              	.LVL7:
 123              		.loc 1 214 0
 124 0010 00005CE3 		cmp	ip, #0
 125              		.loc 1 209 0
 126 0014 00B0A0E1 		mov	fp, r0
 127 0018 01A0A0E1 		mov	sl, r1
 128 001c 0290A0E1 		mov	r9, r2
 129 0020 00308DE5 		str	r3, [sp, #0]
 215:tiffs/readfile.c **** 		puts("TIFFS reader is not initialized\n");
 130              		.loc 1 215 0
 131 0024 AC029F05 		ldreq	r0, .L72+4
 132              	.LVL8:
 133              		.loc 1 214 0
 134 0028 A400000A 		beq	.L70
 135              	.LVL9:
 136              	.LBB2:
 137              	.LBB3:
 138              	.LBB4:
 139              	.LBB5:
 140              		.loc 1 61 0
 141 002c 0030DBE5 		ldrb	r3, [fp, #0]	@ zero_extendqisi2
 142 0030 2F0053E3 		cmp	r3, #47
 143              		.loc 1 64 0
 144 0034 A0329FE5 		ldr	r3, .L72+8
 145 0038 007093E5 		ldr	r7, [r3, #0]
 146              	.LVL10:
 147              		.loc 1 61 0
 148 003c 0B50A011 		movne	r5, fp
 149              	.LVL11:
 150              		.loc 1 62 0
 151 0040 01508B02 		addeq	r5, fp, #1
 152 0044 470000EA 		b	.L18
 153              	.LVL12:
 154              	.L19:
 155              		.loc 1 65 0
 156 0048 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 157 004c 000053E3 		cmp	r3, #0
 158 0050 4900000A 		beq	.L20
 159              		.loc 1 68 0
 160 0054 0500A0E1 		mov	r0, r5
 161 0058 2F10A0E3 		mov	r1, #47
 162 005c FEFFFFEB 		bl	index
 163              		.loc 1 69 0
 164 0060 050050E1 		cmp	r0, r5
 165              		.loc 1 68 0
 166 0064 0040A0E1 		mov	r4, r0
 167              	.LVL13:
 168              		.loc 1 69 0
 169 0068 A100000A 		beq	.L64
 170              		.loc 1 72 0
 171 006c 000050E3 		cmp	r0, #0
 172              		.loc 1 74 0
 173 0070 01808012 		addne	r8, r0, #1
 174              		.loc 1 73 0
 175 0074 00606510 		rsbne	r6, r5, r0
 176              	.LVL14:
 177              		.loc 1 72 0
 178 0078 2100001A 		bne	.L26
 179              		.loc 1 76 0
 180 007c 0500A0E1 		mov	r0, r5
 181 0080 FEFFFFEB 		bl	strlen
 182 0084 0480A0E1 		mov	r8, r4
 183 0088 0060A0E1 		mov	r6, r0
 184              	.L26:
 185              		.loc 1 79 0
 186 008c 140056E3 		cmp	r6, #20
 187 0090 A300008A 		bhi	.L65
 188              		.loc 1 84 0
 189 0094 0620A0E1 		mov	r2, r6
 190 0098 0510A0E1 		mov	r1, r5
 191 009c 07008DE2 		add	r0, sp, #7
 192 00a0 FEFFFFEB 		bl	memcpy
 193              		.loc 1 85 0
 194 00a4 1C308DE2 		add	r3, sp, #28
 195 00a8 062083E0 		add	r2, r3, r6
 196              		.loc 1 87 0
 197 00ac 2C329FE5 		ldr	r3, .L72+12
 198 00b0 006093E5 		ldr	r6, [r3, #0]
 199              	.LVL15:
 200              		.loc 1 85 0
 201 00b4 0030A0E3 		mov	r3, #0
 202 00b8 153042E5 		strb	r3, [r2, #-21]
 203              		.loc 1 87 0
 204 00bc 072286E0 		add	r2, r6, r7, asl #4
 205              	.LVL16:
 206              		.loc 1 88 0
 207 00c0 0330D2E5 		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 208 00c4 F20053E3 		cmp	r3, #242
 209 00c8 AF00001A 		bne	.L29
 210              	.LBB6:
 211              	.LBB7:
 212              		.loc 1 46 0
 213 00cc 10329FE5 		ldr	r3, .L72+16
 214              	.LBE7:
 215              	.LBE6:
 216              		.loc 1 92 0
 217 00d0 B470D2E1 		ldrh	r7, [r2, #4]
 218              	.LBB8:
 219              	.LBB9:
 220              		.loc 1 46 0
 221 00d4 005093E5 		ldr	r5, [r3, #0]
 222              	.LVL17:
 223 00d8 3E0000EA 		b	.L31
 224              	.LVL18:
 225              	.L32:
 226              		.loc 1 44 0
 227 00dc 0330D4E5 		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 228 00e0 000053E3 		cmp	r3, #0
 229 00e4 3D00000A 		beq	.L33
 230              		.loc 1 46 0
 231 00e8 080094E5 		ldr	r0, [r4, #8]
 232 00ec 000285E0 		add	r0, r5, r0, asl #4
 233 00f0 FEFFFFEB 		bl	strcmp
 234              	.LVL19:
 235 00f4 000050E3 		cmp	r0, #0
 236 00f8 4400000A 		beq	.L35
 237              	.LVL20:
 238              	.L33:
 239              		.loc 1 42 0
 240 00fc B670D4E1 		ldrh	r7, [r4, #6]
 241              	.L31:
 242 0100 E0319FE5 		ldr	r3, .L72+20
 243 0104 030057E1 		cmp	r7, r3
 244              		.loc 1 46 0
 245 0108 07108DE2 		add	r1, sp, #7
 246              		.loc 1 43 0
 247 010c 074286E0 		add	r4, r6, r7, asl #4
 248              		.loc 1 42 0
 249 0110 3500001A 		bne	.L32
 250 0114 AF0000EA 		b	.L29
 251              	.LVL21:
 252              	.L35:
 253              	.LBE9:
 254              	.LBE8:
 255              		.loc 1 93 0
 256 0118 000057E3 		cmp	r7, #0
 257 011c AF00000A 		beq	.L29
 258 0120 0850A0E1 		mov	r5, r8
 259              	.LVL22:
 260              	.L18:
 261              		.loc 1 64 0
 262 0124 000055E3 		cmp	r5, #0
 263 0128 1000001A 		bne	.L19
 264              	.L20:
 265              	.LBE5:
 266              	.LBE4:
 267              		.loc 1 131 0
 268 012c 005057E2 		subs	r5, r7, #0
 269              	.LVL23:
 270 0130 B00000DA 		ble	.L14
 271              		.loc 1 134 0
 272 0134 A4319FE5 		ldr	r3, .L72+12
 273 0138 003093E5 		ldr	r3, [r3, #0]
 274 013c 056283E0 		add	r6, r3, r5, asl #4
 275              	.LVL24:
 276              		.loc 1 135 0
 277 0140 0330D6E5 		ldrb	r3, [r6, #3]	@ zero_extendqisi2
 278 0144 F10053E3 		cmp	r3, #241
 279 0148 5600000A 		beq	.L38
 280              		.loc 1 136 0
 281 014c 98019FE5 		ldr	r0, .L72+24
 282 0150 0B10A0E1 		mov	r1, fp
 283              	.LVL25:
 284              	.L71:
 285 0154 FEFFFFEB 		bl	printf
 286              	.LVL26:
 287              	.L69:
 288 0158 0050E0E3 		mvn	r5, #0
 289              	.LVL27:
 290 015c B00000EA 		b	.L14
 291              	.LVL28:
 292              	.L38:
 293              		.loc 1 140 0
 294 0160 7C319FE5 		ldr	r3, .L72+16
 295 0164 004093E5 		ldr	r4, [r3, #0]
 296              	.LVL29:
 297 0168 083096E5 		ldr	r3, [r6, #8]
 298 016c 034284E0 		add	r4, r4, r3, asl #4
 299              	.LVL30:
 300              		.loc 1 141 0
 301 0170 0400A0E1 		mov	r0, r4
 302 0174 FEFFFFEB 		bl	strlen
 303 0178 004084E0 		add	r4, r4, r0
 304              	.LVL31:
 305              		.loc 1 142 0
 306 017c 0500A0E1 		mov	r0, r5
 307 0180 FEFFFFEB 		bl	find_endofchunk
 308              		.loc 1 141 0
 309 0184 017084E2 		add	r7, r4, #1
 310              	.LVL32:
 311              		.loc 1 148 0
 312 0188 B450D6E1 		ldrh	r5, [r6, #4]
 313              	.LVL33:
 314              		.loc 1 149 0
 315 018c 54319FE5 		ldr	r3, .L72+20
 316              		.loc 1 144 0
 317 0190 004067E0 		rsb	r4, r7, r0
 318              	.LVL34:
 319              		.loc 1 145 0
 320 0194 000054E3 		cmp	r4, #0
 321 0198 0040A0B3 		movlt	r4, #0
 322              		.loc 1 149 0
 323 019c 030055E1 		cmp	r5, r3
 324 01a0 0050A003 		moveq	r5, #0
 325              	.LBE3:
 326              	.LBE2:
 216:tiffs/readfile.c **** 		return -1;
 217:tiffs/readfile.c **** 	}
 218:tiffs/readfile.c **** 
 219:tiffs/readfile.c **** 	stat = get_file_head(pathname, &chunk_start, &chunk_size, &cont);
 220:tiffs/readfile.c **** 	if (stat <= 0)
 221:tiffs/readfile.c **** 		return stat;
 222:tiffs/readfile.c **** 	if (chunk_size > maxlen) {
 327              		.loc 1 222 0
 328 01a4 090054E1 		cmp	r4, r9
 329 01a8 6C00009A 		bls	.L44
 330              	.LVL35:
 331              	.L45:
 223:tiffs/readfile.c **** toobig:		printf("TIFFS error: '%s' is bigger than the read buffer\n", pathname);
 332              		.loc 1 223 0
 333 01ac 3C019FE5 		ldr	r0, .L72+28
 334 01b0 0B10A0E1 		mov	r1, fp
 335 01b4 530000EA 		b	.L71
 336              	.LVL36:
 337              	.L44:
 224:tiffs/readfile.c **** 		return -1;
 225:tiffs/readfile.c **** 	}
 226:tiffs/readfile.c **** 
 227:tiffs/readfile.c **** 	real_len = chunk_size;
 228:tiffs/readfile.c **** 	memcpy(buf, chunk_start, chunk_size);
 338              		.loc 1 228 0
 339 01b8 0A00A0E1 		mov	r0, sl
 340 01bc 0710A0E1 		mov	r1, r7
 341 01c0 0420A0E1 		mov	r2, r4
 342              	.LVL37:
 343 01c4 FEFFFFEB 		bl	memcpy
 344              	.LVL38:
 229:tiffs/readfile.c **** 	buf += chunk_size;
 230:tiffs/readfile.c **** 	roomleft = maxlen - chunk_size;
 345              		.loc 1 230 0
 346 01c8 098064E0 		rsb	r8, r4, r9
 347              	.LVL39:
 348              		.loc 1 229 0
 349 01cc 04A08AE0 		add	sl, sl, r4
 350              	.LVL40:
 351              		.loc 1 230 0
 352 01d0 0490A0E1 		mov	r9, r4
 353              	.LVL41:
 354 01d4 980000EA 		b	.L46
 355              	.LVL42:
 356              	.L47:
 357              	.LBB10:
 358              	.LBB11:
 359              		.loc 1 169 0
 360 01d8 00319FE5 		ldr	r3, .L72+12
 361 01dc 001093E5 		ldr	r1, [r3, #0]
 362              	.L48:
 363 01e0 056281E0 		add	r6, r1, r5, asl #4
 364              	.LVL43:
 365              		.loc 1 170 0
 366 01e4 0330D6E5 		ldrb	r3, [r6, #3]	@ zero_extendqisi2
 367 01e8 000053E3 		cmp	r3, #0
 368 01ec 8000001A 		bne	.L49
 369              		.loc 1 172 0
 370 01f0 B620D6E1 		ldrh	r2, [r6, #6]
 371 01f4 EC309FE5 		ldr	r3, .L72+20
 372 01f8 030052E1 		cmp	r2, r3
 373 01fc A600000A 		beq	.L66
 374              		.loc 1 177 0
 375 0200 0250A0E1 		mov	r5, r2
 376 0204 760000EA 		b	.L48
 377              	.L49:
 378              		.loc 1 180 0
 379 0208 F40053E3 		cmp	r3, #244
 380 020c A900001A 		bne	.L67
 381              		.loc 1 185 0
 382 0210 CC309FE5 		ldr	r3, .L72+16
 383 0214 002093E5 		ldr	r2, [r3, #0]
 384 0218 083096E5 		ldr	r3, [r6, #8]
 385              		.loc 1 186 0
 386 021c 0500A0E1 		mov	r0, r5
 387              		.loc 1 185 0
 388 0220 037282E0 		add	r7, r2, r3, asl #4
 389              	.LVL44:
 390              		.loc 1 186 0
 391 0224 FEFFFFEB 		bl	find_endofchunk
 392              		.loc 1 188 0
 393 0228 004067E0 		rsb	r4, r7, r0
 394              	.LVL45:
 395              		.loc 1 189 0
 396 022c 000054E3 		cmp	r4, #0
 397 0230 AC0000DA 		ble	.L68
 398              		.loc 1 194 0
 399 0234 B450D6E1 		ldrh	r5, [r6, #4]
 400              		.loc 1 195 0
 401 0238 A8309FE5 		ldr	r3, .L72+20
 402 023c 030055E1 		cmp	r5, r3
 403 0240 0050A003 		moveq	r5, #0
 404              	.LBE11:
 405              	.LBE10:
 231:tiffs/readfile.c **** 	while (cont) {
 232:tiffs/readfile.c **** 		stat = get_segment(cont, &chunk_start, &chunk_size, &cont);
 233:tiffs/readfile.c **** 		if (stat < 0)
 234:tiffs/readfile.c **** 			return stat;
 235:tiffs/readfile.c **** 		if (chunk_size > roomleft)
 406              		.loc 1 235 0
 407 0244 080054E1 		cmp	r4, r8
 408 0248 6900008A 		bhi	.L45
 236:tiffs/readfile.c **** 			goto toobig;
 237:tiffs/readfile.c **** 
 238:tiffs/readfile.c **** 		real_len += chunk_size;
 239:tiffs/readfile.c **** 		memcpy(buf, chunk_start, chunk_size);
 409              		.loc 1 239 0
 410 024c 0A00A0E1 		mov	r0, sl
 411 0250 0710A0E1 		mov	r1, r7
 412 0254 0420A0E1 		mov	r2, r4
 413              	.LVL46:
 414 0258 FEFFFFEB 		bl	memcpy
 415              	.LVL47:
 240:tiffs/readfile.c **** 		buf += chunk_size;
 241:tiffs/readfile.c **** 		roomleft -= chunk_size;
 416              		.loc 1 241 0
 417 025c 088064E0 		rsb	r8, r4, r8
 418              		.loc 1 238 0
 419 0260 049089E0 		add	r9, r9, r4
 420              		.loc 1 240 0
 421 0264 04A08AE0 		add	sl, sl, r4
 422              	.LVL48:
 423              	.L46:
 424              		.loc 1 231 0
 425 0268 000055E3 		cmp	r5, #0
 426 026c 7400001A 		bne	.L47
 242:tiffs/readfile.c **** 	}
 243:tiffs/readfile.c **** 
 244:tiffs/readfile.c **** 	if (lenrtn)
 427              		.loc 1 244 0
 428 0270 00309DE5 		ldr	r3, [sp, #0]
 429 0274 000053E3 		cmp	r3, #0
 245:tiffs/readfile.c **** 		*lenrtn = real_len;
 430              		.loc 1 245 0
 431 0278 00309D15 		ldrne	r3, [sp, #0]
 432              	.LVL49:
 433              		.loc 1 244 0
 434 027c 01508502 		addeq	r5, r5, #1
 435              		.loc 1 245 0
 436 0280 0150A013 		movne	r5, #1
 437 0284 00908315 		strne	r9, [r3, #0]
 438 0288 B00000EA 		b	.L14
 439              	.LVL50:
 440              	.L64:
 441              	.LBB12:
 442              	.LBB13:
 443              	.LBB14:
 444              	.LBB15:
 445              		.loc 1 70 0
 446 028c 60009FE5 		ldr	r0, .L72+32
 447 0290 A40000EA 		b	.L70
 448              	.LVL51:
 449              	.L65:
 450              		.loc 1 80 0
 451 0294 5C009FE5 		ldr	r0, .L72+36
 452              	.LVL52:
 453              	.L70:
 454 0298 FEFFFFEB 		bl	puts
 455 029c 540000EA 		b	.L69
 456              	.LVL53:
 457              	.L66:
 458              	.LBE15:
 459              	.LBE14:
 460              	.LBE13:
 461              	.LBE12:
 462              	.LBB16:
 463              	.LBB17:
 464              		.loc 1 173 0
 465 02a0 54009FE5 		ldr	r0, .L72+40
 466 02a4 0510A0E1 		mov	r1, r5
 467 02a8 530000EA 		b	.L71
 468              	.LVL54:
 469              	.L67:
 470              		.loc 1 181 0
 471 02ac 4C009FE5 		ldr	r0, .L72+44
 472 02b0 0510A0E1 		mov	r1, r5
 473 02b4 530000EA 		b	.L71
 474              	.LVL55:
 475              	.L68:
 476              		.loc 1 190 0
 477 02b8 44009FE5 		ldr	r0, .L72+48
 478 02bc 0510A0E1 		mov	r1, r5
 479 02c0 530000EA 		b	.L71
 480              	.LVL56:
 481              	.L29:
 482              	.LBE17:
 483              	.LBE16:
 484              		.loc 1 245 0
 485 02c4 0050A0E3 		mov	r5, #0
 486              	.LVL57:
 487              	.L14:
 246:tiffs/readfile.c **** 
 247:tiffs/readfile.c **** 	return 1;
 248:tiffs/readfile.c **** }
 488              		.loc 1 248 0
 489 02c8 0500A0E1 		mov	r0, r5
 490 02cc 1CD08DE2 		add	sp, sp, #28
 491 02d0 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 492              	.L73:
 493              		.align	2
 494              	.L72:
 495 02d4 00000000 		.word	tiffs_init_done
 496 02d8 34000000 		.word	.LC1
 497 02dc 00000000 		.word	tiffs_root_ino
 498 02e0 00000000 		.word	tiffs_active_index
 499 02e4 00000000 		.word	tiffs_base_addr
 500 02e8 FFFF0000 		.word	65535
 501 02ec C4000000 		.word	.LC4
 502 02f0 F0000000 		.word	.LC5
 503 02f4 58000000 		.word	.LC2
 504 02f8 90000000 		.word	.LC3
 505 02fc 24010000 		.word	.LC6
 506 0300 5C010000 		.word	.LC7
 507 0304 88010000 		.word	.LC8
 508              	.LFE7:
 510              		.section	.rodata.str1.4
 511 01b7 00       		.align	2
 512              	.LC9:
 513 01b8 54494646 		.ascii	"TIFFS error: '%s' has the wrong length\012\000"
 513      53206572 
 513      726F723A 
 513      20272573 
 513      27206861 
 514              		.section	.text.tiffs_read_file_fixedlen,"ax",%progbits
 515              		.align	2
 516              		.global	tiffs_read_file_fixedlen
 518              	tiffs_read_file_fixedlen:
 519              	.LFB8:
 249:tiffs/readfile.c **** 
 250:tiffs/readfile.c **** int tiffs_read_file_fixedlen(const char *pathname, uint8_t *buf,
 251:tiffs/readfile.c **** 			     size_t expect_len)
 252:tiffs/readfile.c **** {
 520              		.loc 1 252 0
 521              		@ args = 0, pretend = 0, frame = 4
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              	.LVL58:
 524 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 525              	.LCFI3:
 526 0004 04D04DE2 		sub	sp, sp, #4
 527              	.LCFI4:
 528              	.LVL59:
 253:tiffs/readfile.c **** 	size_t real_len;
 254:tiffs/readfile.c **** 	int rc;
 255:tiffs/readfile.c **** 
 256:tiffs/readfile.c **** 	rc = tiffs_read_file_maxlen(pathname, buf, expect_len, &real_len);
 529              		.loc 1 256 0
 530 0008 0D30A0E1 		mov	r3, sp
 531              		.loc 1 252 0
 532 000c 0250A0E1 		mov	r5, r2
 533 0010 0040A0E1 		mov	r4, r0
 534              		.loc 1 256 0
 535 0014 FEFFFFEB 		bl	tiffs_read_file_maxlen
 536              	.LVL60:
 257:tiffs/readfile.c **** 	if (rc <= 0)
 537              		.loc 1 257 0
 538 0018 003050E2 		subs	r3, r0, #0
 539              	.LVL61:
 540 001c 0E0000DA 		ble	.L75
 541              	.LVL62:
 258:tiffs/readfile.c **** 		return rc;
 259:tiffs/readfile.c **** 	if (real_len != expect_len) {
 542              		.loc 1 259 0
 543 0020 00309DE5 		ldr	r3, [sp, #0]
 544              	.LVL63:
 545 0024 050053E1 		cmp	r3, r5
 260:tiffs/readfile.c **** 		printf("TIFFS error: '%s' has the wrong length\n", pathname);
 546              		.loc 1 260 0
 547 0028 0410A0E1 		mov	r1, r4
 548              		.loc 1 259 0
 549 002c 0130A0E3 		mov	r3, #1
 550              	.LVL64:
 551              		.loc 1 260 0
 552 0030 14009FE5 		ldr	r0, .L80
 553              		.loc 1 259 0
 554 0034 0E00000A 		beq	.L75
 555              	.LVL65:
 556              		.loc 1 260 0
 557 0038 FEFFFFEB 		bl	printf
 558              	.LVL66:
 559 003c 0030E0E3 		mvn	r3, #0
 560              	.LVL67:
 561              	.L75:
 261:tiffs/readfile.c **** 		return -1;
 262:tiffs/readfile.c **** 	}
 263:tiffs/readfile.c **** 
 264:tiffs/readfile.c **** 	return 1;
 265:tiffs/readfile.c **** }
 562              		.loc 1 265 0
 563 0040 0300A0E1 		mov	r0, r3
 564 0044 04D08DE2 		add	sp, sp, #4
 565 0048 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 566              	.L81:
 567              		.align	2
 568              	.L80:
 569 004c B8010000 		.word	.LC9
 570              	.LFE8:
 664              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 readfile.c
     /tmp/ccQD1sz2.s:18     .text.find_endofchunk:0000000000000000 find_endofchunk
     /tmp/ccQD1sz2.s:25     .text.find_endofchunk:0000000000000000 $a
     /tmp/ccQD1sz2.s:70     .text.find_endofchunk:0000000000000064 $d
     /tmp/ccQD1sz2.s:108    .text.tiffs_read_file_maxlen:0000000000000000 tiffs_read_file_maxlen
     /tmp/ccQD1sz2.s:114    .text.tiffs_read_file_maxlen:0000000000000000 $a
     /tmp/ccQD1sz2.s:495    .text.tiffs_read_file_maxlen:00000000000002d4 $d
     /tmp/ccQD1sz2.s:518    .text.tiffs_read_file_fixedlen:0000000000000000 tiffs_read_file_fixedlen
     /tmp/ccQD1sz2.s:524    .text.tiffs_read_file_fixedlen:0000000000000000 $a
     /tmp/ccQD1sz2.s:569    .text.tiffs_read_file_fixedlen:000000000000004c $d

UNDEFINED SYMBOLS
printf
tiffs_active_index
tiffs_base_addr
index
strlen
memcpy
strcmp
puts
tiffs_init_done
tiffs_root_ino
